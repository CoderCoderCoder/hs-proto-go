// Code generated by protoc-gen-go.
// source: pegasusshared/pegasusshared.proto
// DO NOT EDIT!

package pegasusshared

import proto "github.com/golang/protobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

// ref: PegasusShared.AssetType
type AssetType int32

const (
	AssetType_ASSET_TYPE_SCENARIO     AssetType = 1
	AssetType_ASSET_TYPE_SUBSET_CARD  AssetType = 2
	AssetType_ASSET_TYPE_DECK_RULESET AssetType = 3
	AssetType_ASSET_TYPE_REWARD_CHEST AssetType = 4
)

var AssetType_name = map[int32]string{
	1: "ASSET_TYPE_SCENARIO",
	2: "ASSET_TYPE_SUBSET_CARD",
	3: "ASSET_TYPE_DECK_RULESET",
	4: "ASSET_TYPE_REWARD_CHEST",
}
var AssetType_value = map[string]int32{
	"ASSET_TYPE_SCENARIO":     1,
	"ASSET_TYPE_SUBSET_CARD":  2,
	"ASSET_TYPE_DECK_RULESET": 3,
	"ASSET_TYPE_REWARD_CHEST": 4,
}

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}
func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}
func (x AssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *AssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AssetType_value, data, "AssetType")
	if err != nil {
		return err
	}
	*x = AssetType(value)
	return nil
}

// ref: PegasusShared.BattlePayProvider
type BattlePayProvider int32

const (
	BattlePayProvider_BP_PROVIDER_BLIZZARD    BattlePayProvider = 1
	BattlePayProvider_BP_PROVIDER_APPLE       BattlePayProvider = 2
	BattlePayProvider_BP_PROVIDER_GOOGLE_PLAY BattlePayProvider = 3
	BattlePayProvider_BP_PROVIDER_AMAZON      BattlePayProvider = 4
)

var BattlePayProvider_name = map[int32]string{
	1: "BP_PROVIDER_BLIZZARD",
	2: "BP_PROVIDER_APPLE",
	3: "BP_PROVIDER_GOOGLE_PLAY",
	4: "BP_PROVIDER_AMAZON",
}
var BattlePayProvider_value = map[string]int32{
	"BP_PROVIDER_BLIZZARD":    1,
	"BP_PROVIDER_APPLE":       2,
	"BP_PROVIDER_GOOGLE_PLAY": 3,
	"BP_PROVIDER_AMAZON":      4,
}

func (x BattlePayProvider) Enum() *BattlePayProvider {
	p := new(BattlePayProvider)
	*p = x
	return p
}
func (x BattlePayProvider) String() string {
	return proto.EnumName(BattlePayProvider_name, int32(x))
}
func (x BattlePayProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *BattlePayProvider) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BattlePayProvider_value, data, "BattlePayProvider")
	if err != nil {
		return err
	}
	*x = BattlePayProvider(value)
	return nil
}

// ref: PegasusShared.BnetGameType
type BnetGameType int32

const (
	BnetGameType_BGT_UNKNOWN                  BnetGameType = 0
	BnetGameType_BGT_FRIENDS                  BnetGameType = 1
	BnetGameType_BGT_RANKED_STANDARD          BnetGameType = 2
	BnetGameType_BGT_ARENA                    BnetGameType = 3
	BnetGameType_BGT_VS_AI                    BnetGameType = 4
	BnetGameType_BGT_TUTORIAL                 BnetGameType = 5
	BnetGameType_BGT_ASYNC                    BnetGameType = 6
	BnetGameType_BGT_CASUAL_STANDARD_NEWBIE   BnetGameType = 9
	BnetGameType_BGT_CASUAL_STANDARD_NORMAL   BnetGameType = 10
	BnetGameType_BGT_TEST1                    BnetGameType = 11
	BnetGameType_BGT_TEST2                    BnetGameType = 12
	BnetGameType_BGT_TEST3                    BnetGameType = 13
	BnetGameType_BGT_TAVERNBRAWL_PVP          BnetGameType = 16
	BnetGameType_BGT_TAVERNBRAWL_1P_VERSUS_AI BnetGameType = 17
	BnetGameType_BGT_TAVERNBRAWL_2P_COOP      BnetGameType = 18
	BnetGameType_BGT_RANKED_WILD              BnetGameType = 30
	BnetGameType_BGT_CASUAL_WILD              BnetGameType = 31
	BnetGameType_BGT_FSG_BRAWL_VS_FRIEND      BnetGameType = 40
	BnetGameType_BGT_FSG_BRAWL_PVP            BnetGameType = 41
	BnetGameType_BGT_FSG_BRAWL_1P_VERSUS_AI   BnetGameType = 42
	BnetGameType_BGT_FSG_BRAWL_2P_COOP        BnetGameType = 43
	BnetGameType_BGT_LAST                     BnetGameType = 44
)

var BnetGameType_name = map[int32]string{
	0:  "BGT_UNKNOWN",
	1:  "BGT_FRIENDS",
	2:  "BGT_RANKED_STANDARD",
	3:  "BGT_ARENA",
	4:  "BGT_VS_AI",
	5:  "BGT_TUTORIAL",
	6:  "BGT_ASYNC",
	9:  "BGT_CASUAL_STANDARD_NEWBIE",
	10: "BGT_CASUAL_STANDARD_NORMAL",
	11: "BGT_TEST1",
	12: "BGT_TEST2",
	13: "BGT_TEST3",
	16: "BGT_TAVERNBRAWL_PVP",
	17: "BGT_TAVERNBRAWL_1P_VERSUS_AI",
	18: "BGT_TAVERNBRAWL_2P_COOP",
	30: "BGT_RANKED_WILD",
	31: "BGT_CASUAL_WILD",
	40: "BGT_FSG_BRAWL_VS_FRIEND",
	41: "BGT_FSG_BRAWL_PVP",
	42: "BGT_FSG_BRAWL_1P_VERSUS_AI",
	43: "BGT_FSG_BRAWL_2P_COOP",
	44: "BGT_LAST",
}
var BnetGameType_value = map[string]int32{
	"BGT_UNKNOWN":                  0,
	"BGT_FRIENDS":                  1,
	"BGT_RANKED_STANDARD":          2,
	"BGT_ARENA":                    3,
	"BGT_VS_AI":                    4,
	"BGT_TUTORIAL":                 5,
	"BGT_ASYNC":                    6,
	"BGT_CASUAL_STANDARD_NEWBIE":   9,
	"BGT_CASUAL_STANDARD_NORMAL":   10,
	"BGT_TEST1":                    11,
	"BGT_TEST2":                    12,
	"BGT_TEST3":                    13,
	"BGT_TAVERNBRAWL_PVP":          16,
	"BGT_TAVERNBRAWL_1P_VERSUS_AI": 17,
	"BGT_TAVERNBRAWL_2P_COOP":      18,
	"BGT_RANKED_WILD":              30,
	"BGT_CASUAL_WILD":              31,
	"BGT_FSG_BRAWL_VS_FRIEND":      40,
	"BGT_FSG_BRAWL_PVP":            41,
	"BGT_FSG_BRAWL_1P_VERSUS_AI":   42,
	"BGT_FSG_BRAWL_2P_COOP":        43,
	"BGT_LAST":                     44,
}

func (x BnetGameType) Enum() *BnetGameType {
	p := new(BnetGameType)
	*p = x
	return p
}
func (x BnetGameType) String() string {
	return proto.EnumName(BnetGameType_name, int32(x))
}
func (x BnetGameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *BnetGameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BnetGameType_value, data, "BnetGameType")
	if err != nil {
		return err
	}
	*x = BnetGameType(value)
	return nil
}

// ref: PegasusShared.BrawlType
type BrawlType int32

const (
	BrawlType_BRAWL_TYPE_UNKNOWN            BrawlType = 0
	BrawlType_BRAWL_TYPE_TAVERN_BRAWL       BrawlType = 1
	BrawlType_BRAWL_TYPE_FIRST              BrawlType = 1
	BrawlType_BRAWL_TYPE_FIRESIDE_GATHERING BrawlType = 2
	BrawlType_BRAWL_TYPE_COUNT              BrawlType = 3
)

var BrawlType_name = map[int32]string{
	0: "BRAWL_TYPE_UNKNOWN",
	1: "BRAWL_TYPE_TAVERN_BRAWL",
	// Duplicate value: 1: "BRAWL_TYPE_FIRST",
	2: "BRAWL_TYPE_FIRESIDE_GATHERING",
	3: "BRAWL_TYPE_COUNT",
}
var BrawlType_value = map[string]int32{
	"BRAWL_TYPE_UNKNOWN":            0,
	"BRAWL_TYPE_TAVERN_BRAWL":       1,
	"BRAWL_TYPE_FIRST":              1,
	"BRAWL_TYPE_FIRESIDE_GATHERING": 2,
	"BRAWL_TYPE_COUNT":              3,
}

func (x BrawlType) Enum() *BrawlType {
	p := new(BrawlType)
	*p = x
	return p
}
func (x BrawlType) String() string {
	return proto.EnumName(BrawlType_name, int32(x))
}
func (x BrawlType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *BrawlType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BrawlType_value, data, "BrawlType")
	if err != nil {
		return err
	}
	*x = BrawlType(value)
	return nil
}

// ref: PegasusShared.DatabaseAction
type DatabaseAction int32

const (
	DatabaseAction_DB_A_UNKNOWN      DatabaseAction = 0
	DatabaseAction_DB_A_GET_DECK     DatabaseAction = 1
	DatabaseAction_DB_A_CREATE_DECK  DatabaseAction = 2
	DatabaseAction_DB_A_RENAME_DECK  DatabaseAction = 3
	DatabaseAction_DB_A_DELETE_DECK  DatabaseAction = 4
	DatabaseAction_DB_A_SET_DECK     DatabaseAction = 5
	DatabaseAction_DB_A_OPEN_BOOSTER DatabaseAction = 6
	DatabaseAction_DB_A_GAMES_INFO   DatabaseAction = 7
)

var DatabaseAction_name = map[int32]string{
	0: "DB_A_UNKNOWN",
	1: "DB_A_GET_DECK",
	2: "DB_A_CREATE_DECK",
	3: "DB_A_RENAME_DECK",
	4: "DB_A_DELETE_DECK",
	5: "DB_A_SET_DECK",
	6: "DB_A_OPEN_BOOSTER",
	7: "DB_A_GAMES_INFO",
}
var DatabaseAction_value = map[string]int32{
	"DB_A_UNKNOWN":      0,
	"DB_A_GET_DECK":     1,
	"DB_A_CREATE_DECK":  2,
	"DB_A_RENAME_DECK":  3,
	"DB_A_DELETE_DECK":  4,
	"DB_A_SET_DECK":     5,
	"DB_A_OPEN_BOOSTER": 6,
	"DB_A_GAMES_INFO":   7,
}

func (x DatabaseAction) Enum() *DatabaseAction {
	p := new(DatabaseAction)
	*p = x
	return p
}
func (x DatabaseAction) String() string {
	return proto.EnumName(DatabaseAction_name, int32(x))
}
func (x DatabaseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *DatabaseAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DatabaseAction_value, data, "DatabaseAction")
	if err != nil {
		return err
	}
	*x = DatabaseAction(value)
	return nil
}

// ref: PegasusShared.DatabaseResult
type DatabaseResult int32

const (
	DatabaseResult_DB_E_SQL_EX         DatabaseResult = -1
	DatabaseResult_DB_E_UNKNOWN        DatabaseResult = 0
	DatabaseResult_DB_E_SUCCESS        DatabaseResult = 1
	DatabaseResult_DB_E_NOT_OWNED      DatabaseResult = 2
	DatabaseResult_DB_E_CONSTRAINT     DatabaseResult = 3
	DatabaseResult_DB_E_NOT_FOUND      DatabaseResult = 4
	DatabaseResult_DB_E_EXCEPTION      DatabaseResult = 9
	DatabaseResult_DB_E_BAD_PARAM      DatabaseResult = 11
	DatabaseResult_DB_E_DECK_IS_LOCKED DatabaseResult = 12
)

var DatabaseResult_name = map[int32]string{
	-1: "DB_E_SQL_EX",
	0:  "DB_E_UNKNOWN",
	1:  "DB_E_SUCCESS",
	2:  "DB_E_NOT_OWNED",
	3:  "DB_E_CONSTRAINT",
	4:  "DB_E_NOT_FOUND",
	9:  "DB_E_EXCEPTION",
	11: "DB_E_BAD_PARAM",
	12: "DB_E_DECK_IS_LOCKED",
}
var DatabaseResult_value = map[string]int32{
	"DB_E_SQL_EX":         -1,
	"DB_E_UNKNOWN":        0,
	"DB_E_SUCCESS":        1,
	"DB_E_NOT_OWNED":      2,
	"DB_E_CONSTRAINT":     3,
	"DB_E_NOT_FOUND":      4,
	"DB_E_EXCEPTION":      9,
	"DB_E_BAD_PARAM":      11,
	"DB_E_DECK_IS_LOCKED": 12,
}

func (x DatabaseResult) Enum() *DatabaseResult {
	p := new(DatabaseResult)
	*p = x
	return p
}
func (x DatabaseResult) String() string {
	return proto.EnumName(DatabaseResult_name, int32(x))
}
func (x DatabaseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *DatabaseResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DatabaseResult_value, data, "DatabaseResult")
	if err != nil {
		return err
	}
	*x = DatabaseResult(value)
	return nil
}

// ref: PegasusShared.DeckSourceType
type DeckSourceType int32

const (
	DeckSourceType_DECK_SOURCE_TYPE_UNKNOWN        DeckSourceType = 0
	DeckSourceType_DECK_SOURCE_TYPE_NORMAL         DeckSourceType = 1
	DeckSourceType_DECK_SOURCE_TYPE_TEMPLATE       DeckSourceType = 2
	DeckSourceType_DECK_SOURCE_TYPE_BASIC_DECK     DeckSourceType = 3
	DeckSourceType_DECK_SOURCE_TYPE_INNKEEPER_DECK DeckSourceType = 4
	DeckSourceType_DECK_SOURCE_TYPE_PASTED_DECK    DeckSourceType = 5
)

var DeckSourceType_name = map[int32]string{
	0: "DECK_SOURCE_TYPE_UNKNOWN",
	1: "DECK_SOURCE_TYPE_NORMAL",
	2: "DECK_SOURCE_TYPE_TEMPLATE",
	3: "DECK_SOURCE_TYPE_BASIC_DECK",
	4: "DECK_SOURCE_TYPE_INNKEEPER_DECK",
	5: "DECK_SOURCE_TYPE_PASTED_DECK",
}
var DeckSourceType_value = map[string]int32{
	"DECK_SOURCE_TYPE_UNKNOWN":        0,
	"DECK_SOURCE_TYPE_NORMAL":         1,
	"DECK_SOURCE_TYPE_TEMPLATE":       2,
	"DECK_SOURCE_TYPE_BASIC_DECK":     3,
	"DECK_SOURCE_TYPE_INNKEEPER_DECK": 4,
	"DECK_SOURCE_TYPE_PASTED_DECK":    5,
}

func (x DeckSourceType) Enum() *DeckSourceType {
	p := new(DeckSourceType)
	*p = x
	return p
}
func (x DeckSourceType) String() string {
	return proto.EnumName(DeckSourceType_name, int32(x))
}
func (x DeckSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *DeckSourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeckSourceType_value, data, "DeckSourceType")
	if err != nil {
		return err
	}
	*x = DeckSourceType(value)
	return nil
}

// ref: PegasusShared.DeckType
type DeckType int32

const (
	DeckType_UNKNOWN_DECK_TYPE DeckType = 0
	DeckType_NORMAL_DECK       DeckType = 1
	DeckType_AI_DECK           DeckType = 2
	DeckType_DRAFT_DECK        DeckType = 4
	DeckType_PRECON_DECK       DeckType = 5
	DeckType_TAVERN_BRAWL_DECK DeckType = 6
	DeckType_FSG_BRAWL_DECK    DeckType = 7
	DeckType_HIDDEN_DECK       DeckType = 1000
)

var DeckType_name = map[int32]string{
	0:    "UNKNOWN_DECK_TYPE",
	1:    "NORMAL_DECK",
	2:    "AI_DECK",
	4:    "DRAFT_DECK",
	5:    "PRECON_DECK",
	6:    "TAVERN_BRAWL_DECK",
	7:    "FSG_BRAWL_DECK",
	1000: "HIDDEN_DECK",
}
var DeckType_value = map[string]int32{
	"UNKNOWN_DECK_TYPE": 0,
	"NORMAL_DECK":       1,
	"AI_DECK":           2,
	"DRAFT_DECK":        4,
	"PRECON_DECK":       5,
	"TAVERN_BRAWL_DECK": 6,
	"FSG_BRAWL_DECK":    7,
	"HIDDEN_DECK":       1000,
}

func (x DeckType) Enum() *DeckType {
	p := new(DeckType)
	*p = x
	return p
}
func (x DeckType) String() string {
	return proto.EnumName(DeckType_name, int32(x))
}
func (x DeckType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *DeckType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeckType_value, data, "DeckType")
	if err != nil {
		return err
	}
	*x = DeckType(value)
	return nil
}

// ref: PegasusShared.DraftSlotType
type DraftSlotType int32

const (
	DraftSlotType_DRAFT_SLOT_NONE       DraftSlotType = 0
	DraftSlotType_DRAFT_SLOT_CARD       DraftSlotType = 1
	DraftSlotType_DRAFT_SLOT_HERO       DraftSlotType = 2
	DraftSlotType_DRAFT_SLOT_HERO_POWER DraftSlotType = 3
)

var DraftSlotType_name = map[int32]string{
	0: "DRAFT_SLOT_NONE",
	1: "DRAFT_SLOT_CARD",
	2: "DRAFT_SLOT_HERO",
	3: "DRAFT_SLOT_HERO_POWER",
}
var DraftSlotType_value = map[string]int32{
	"DRAFT_SLOT_NONE":       0,
	"DRAFT_SLOT_CARD":       1,
	"DRAFT_SLOT_HERO":       2,
	"DRAFT_SLOT_HERO_POWER": 3,
}

func (x DraftSlotType) Enum() *DraftSlotType {
	p := new(DraftSlotType)
	*p = x
	return p
}
func (x DraftSlotType) String() string {
	return proto.EnumName(DraftSlotType_name, int32(x))
}
func (x DraftSlotType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *DraftSlotType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DraftSlotType_value, data, "DraftSlotType")
	if err != nil {
		return err
	}
	*x = DraftSlotType(value)
	return nil
}

// ref: PegasusShared.ErrorCode
type ErrorCode int32

const (
	ErrorCode_ERROR_OK                                         ErrorCode = 0
	ErrorCode_ERROR_HEARTHSTONE_BEGIN                          ErrorCode = 1000000
	ErrorCode_ERROR_GLOBAL_INVALID_INPUT                       ErrorCode = 1000001
	ErrorCode_ERROR_GLOBAL_NO_DATA                             ErrorCode = 1000002
	ErrorCode_ERROR_GLOBAL_NOT_YET_IMPLEMENTED                 ErrorCode = 1000003
	ErrorCode_ERROR_GLOBAL_DATA_MODIFIED                       ErrorCode = 1000004
	ErrorCode_ERROR_GLOBAL_INTERNAL_DB_ERROR                   ErrorCode = 1000005
	ErrorCode_ERROR_GLOBAL_DECK_IS_LOCKED                      ErrorCode = 1000006
	ErrorCode_ERROR_GLOBAL_FEATURE_DISABLED                    ErrorCode = 1000007
	ErrorCode_ERROR_GLOBAL_HTTP_ERROR                          ErrorCode = 1000008
	ErrorCode_ERROR_GLOBAL_JSON_PARSE_ERROR                    ErrorCode = 1000009
	ErrorCode_ERROR_GLOBAL_INTERNAL_ERROR                      ErrorCode = 1000010
	ErrorCode_ERROR_GLOBAL_FSG_ID_INVALID                      ErrorCode = 1000011
	ErrorCode_ERROR_GLOBAL_HTTP_TIMEOUT_OR_ABORTED             ErrorCode = 1000012
	ErrorCode_ERROR_GLOBAL_INVALID_HERO_SPECIFIED              ErrorCode = 1000013
	ErrorCode_ERROR_GLOBAL_PARSE_ERROR_EXPECTED_NUMERIC_STRING ErrorCode = 1000014
	ErrorCode_ERROR_SCENARIO_INCORRECT_NUM_PLAYERS             ErrorCode = 1000500
	ErrorCode_ERROR_SCENARIO_NO_DECK_SPECIFIED                 ErrorCode = 1000501
	ErrorCode_ERROR_SCENARIO_MUST_BE_SERVER_ONLY               ErrorCode = 1000502
	ErrorCode_ERROR_TAVERN_BRAWL_SEASON_INCREMENTED            ErrorCode = 1001000
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_ACTIVE                    ErrorCode = 1001001
	ErrorCode_ERROR_TAVERN_BRAWL_NO_TICKET                     ErrorCode = 1001002
	ErrorCode_ERROR_TAVERN_BRAWL_RETIRE_FIRST                  ErrorCode = 1001003
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_IN_SESSION                ErrorCode = 1001004
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE   ErrorCode = 1001005
	ErrorCode_ERROR_TAVERN_BRAWL_FEATURE_DISABLED              ErrorCode = 1001006
	ErrorCode_ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED           ErrorCode = 1001007
	ErrorCode_ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED   ErrorCode = 1001008
	ErrorCode_ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE             ErrorCode = 1002000
	ErrorCode_ERROR_DECK_RULESET_RULE_DB_READ_ERROR            ErrorCode = 1002001
	ErrorCode_ERROR_DECK_RULESET_RULE_VIOLATION                ErrorCode = 1002002
	ErrorCode_ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN          ErrorCode = 1002003
	ErrorCode_ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN        ErrorCode = 1002004
	ErrorCode_ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN        ErrorCode = 1002005
	ErrorCode_ERROR_DECK_VALIDATION_DB_WRITE_ERROR             ErrorCode = 1002006
	ErrorCode_ERROR_DECK_VALIDATION_WRONG_FORMAT               ErrorCode = 1002007
	ErrorCode_ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY           ErrorCode = 1002008
	ErrorCode_ERROR_PLAY_GAME_DECK_MODIFIED                    ErrorCode = 1003000
	ErrorCode_ERROR_PLAY_GAME_FSG_ID_NOT_MATCHING              ErrorCode = 1003002
	ErrorCode_ERROR_PLAY_GAME_FSG_PATRON_NOT_CHECKED_IN        ErrorCode = 1003003
	ErrorCode_ERROR_PLAY_GAME_FSG_NOT_CURRENTLY_PLAYABLE       ErrorCode = 1003004
	ErrorCode_ERROR_PLAY_GAME_SEASON_INCREMENTED               ErrorCode = 1003005
	ErrorCode_ERROR_FSG_NO_PERMISSION                          ErrorCode = 1004000
	ErrorCode_ERROR_FSG_DUPLICATE_REQUEST_IGNORED              ErrorCode = 1004001
	ErrorCode_ERROR_FSG_DUPLICATE_REQUEST_ORIGINAL_DROPPED     ErrorCode = 1004002
	ErrorCode_ERROR_FSG_ALREADY_CHECKED_IN_FETCH_FSG_INFO      ErrorCode = 1004003
	ErrorCode_ERROR_FSG_BSSIDS_NOT_VALID                       ErrorCode = 1004004
)

var ErrorCode_name = map[int32]string{
	0:       "ERROR_OK",
	1000000: "ERROR_HEARTHSTONE_BEGIN",
	1000001: "ERROR_GLOBAL_INVALID_INPUT",
	1000002: "ERROR_GLOBAL_NO_DATA",
	1000003: "ERROR_GLOBAL_NOT_YET_IMPLEMENTED",
	1000004: "ERROR_GLOBAL_DATA_MODIFIED",
	1000005: "ERROR_GLOBAL_INTERNAL_DB_ERROR",
	1000006: "ERROR_GLOBAL_DECK_IS_LOCKED",
	1000007: "ERROR_GLOBAL_FEATURE_DISABLED",
	1000008: "ERROR_GLOBAL_HTTP_ERROR",
	1000009: "ERROR_GLOBAL_JSON_PARSE_ERROR",
	1000010: "ERROR_GLOBAL_INTERNAL_ERROR",
	1000011: "ERROR_GLOBAL_FSG_ID_INVALID",
	1000012: "ERROR_GLOBAL_HTTP_TIMEOUT_OR_ABORTED",
	1000013: "ERROR_GLOBAL_INVALID_HERO_SPECIFIED",
	1000014: "ERROR_GLOBAL_PARSE_ERROR_EXPECTED_NUMERIC_STRING",
	1000500: "ERROR_SCENARIO_INCORRECT_NUM_PLAYERS",
	1000501: "ERROR_SCENARIO_NO_DECK_SPECIFIED",
	1000502: "ERROR_SCENARIO_MUST_BE_SERVER_ONLY",
	1001000: "ERROR_TAVERN_BRAWL_SEASON_INCREMENTED",
	1001001: "ERROR_TAVERN_BRAWL_NOT_ACTIVE",
	1001002: "ERROR_TAVERN_BRAWL_NO_TICKET",
	1001003: "ERROR_TAVERN_BRAWL_RETIRE_FIRST",
	1001004: "ERROR_TAVERN_BRAWL_NOT_IN_SESSION",
	1001005: "ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE",
	1001006: "ERROR_TAVERN_BRAWL_FEATURE_DISABLED",
	1001007: "ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED",
	1001008: "ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED",
	1002000: "ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE",
	1002001: "ERROR_DECK_RULESET_RULE_DB_READ_ERROR",
	1002002: "ERROR_DECK_RULESET_RULE_VIOLATION",
	1002003: "ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN",
	1002004: "ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN",
	1002005: "ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN",
	1002006: "ERROR_DECK_VALIDATION_DB_WRITE_ERROR",
	1002007: "ERROR_DECK_VALIDATION_WRONG_FORMAT",
	1002008: "ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY",
	1003000: "ERROR_PLAY_GAME_DECK_MODIFIED",
	1003002: "ERROR_PLAY_GAME_FSG_ID_NOT_MATCHING",
	1003003: "ERROR_PLAY_GAME_FSG_PATRON_NOT_CHECKED_IN",
	1003004: "ERROR_PLAY_GAME_FSG_NOT_CURRENTLY_PLAYABLE",
	1003005: "ERROR_PLAY_GAME_SEASON_INCREMENTED",
	1004000: "ERROR_FSG_NO_PERMISSION",
	1004001: "ERROR_FSG_DUPLICATE_REQUEST_IGNORED",
	1004002: "ERROR_FSG_DUPLICATE_REQUEST_ORIGINAL_DROPPED",
	1004003: "ERROR_FSG_ALREADY_CHECKED_IN_FETCH_FSG_INFO",
	1004004: "ERROR_FSG_BSSIDS_NOT_VALID",
}
var ErrorCode_value = map[string]int32{
	"ERROR_OK":                                         0,
	"ERROR_HEARTHSTONE_BEGIN":                          1000000,
	"ERROR_GLOBAL_INVALID_INPUT":                       1000001,
	"ERROR_GLOBAL_NO_DATA":                             1000002,
	"ERROR_GLOBAL_NOT_YET_IMPLEMENTED":                 1000003,
	"ERROR_GLOBAL_DATA_MODIFIED":                       1000004,
	"ERROR_GLOBAL_INTERNAL_DB_ERROR":                   1000005,
	"ERROR_GLOBAL_DECK_IS_LOCKED":                      1000006,
	"ERROR_GLOBAL_FEATURE_DISABLED":                    1000007,
	"ERROR_GLOBAL_HTTP_ERROR":                          1000008,
	"ERROR_GLOBAL_JSON_PARSE_ERROR":                    1000009,
	"ERROR_GLOBAL_INTERNAL_ERROR":                      1000010,
	"ERROR_GLOBAL_FSG_ID_INVALID":                      1000011,
	"ERROR_GLOBAL_HTTP_TIMEOUT_OR_ABORTED":             1000012,
	"ERROR_GLOBAL_INVALID_HERO_SPECIFIED":              1000013,
	"ERROR_GLOBAL_PARSE_ERROR_EXPECTED_NUMERIC_STRING": 1000014,
	"ERROR_SCENARIO_INCORRECT_NUM_PLAYERS":             1000500,
	"ERROR_SCENARIO_NO_DECK_SPECIFIED":                 1000501,
	"ERROR_SCENARIO_MUST_BE_SERVER_ONLY":               1000502,
	"ERROR_TAVERN_BRAWL_SEASON_INCREMENTED":            1001000,
	"ERROR_TAVERN_BRAWL_NOT_ACTIVE":                    1001001,
	"ERROR_TAVERN_BRAWL_NO_TICKET":                     1001002,
	"ERROR_TAVERN_BRAWL_RETIRE_FIRST":                  1001003,
	"ERROR_TAVERN_BRAWL_NOT_IN_SESSION":                1001004,
	"ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE":   1001005,
	"ERROR_TAVERN_BRAWL_FEATURE_DISABLED":              1001006,
	"ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED":           1001007,
	"ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED":   1001008,
	"ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE":             1002000,
	"ERROR_DECK_RULESET_RULE_DB_READ_ERROR":            1002001,
	"ERROR_DECK_RULESET_RULE_VIOLATION":                1002002,
	"ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN":          1002003,
	"ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN":        1002004,
	"ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN":        1002005,
	"ERROR_DECK_VALIDATION_DB_WRITE_ERROR":             1002006,
	"ERROR_DECK_VALIDATION_WRONG_FORMAT":               1002007,
	"ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY":           1002008,
	"ERROR_PLAY_GAME_DECK_MODIFIED":                    1003000,
	"ERROR_PLAY_GAME_FSG_ID_NOT_MATCHING":              1003002,
	"ERROR_PLAY_GAME_FSG_PATRON_NOT_CHECKED_IN":        1003003,
	"ERROR_PLAY_GAME_FSG_NOT_CURRENTLY_PLAYABLE":       1003004,
	"ERROR_PLAY_GAME_SEASON_INCREMENTED":               1003005,
	"ERROR_FSG_NO_PERMISSION":                          1004000,
	"ERROR_FSG_DUPLICATE_REQUEST_IGNORED":              1004001,
	"ERROR_FSG_DUPLICATE_REQUEST_ORIGINAL_DROPPED":     1004002,
	"ERROR_FSG_ALREADY_CHECKED_IN_FETCH_FSG_INFO":      1004003,
	"ERROR_FSG_BSSIDS_NOT_VALID":                       1004004,
}

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}
func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (x ErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorCode_value, data, "ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorCode(value)
	return nil
}

// ref: PegasusShared.EventType
type EventType int32

const (
	EventType_EVT_NONE    EventType = 0
	EventType_EVT_UPDATED EventType = 1
	EventType_EVT_ADDED   EventType = 2
	EventType_EVT_REMOVED EventType = 3
)

var EventType_name = map[int32]string{
	0: "EVT_NONE",
	1: "EVT_UPDATED",
	2: "EVT_ADDED",
	3: "EVT_REMOVED",
}
var EventType_value = map[string]int32{
	"EVT_NONE":    0,
	"EVT_UPDATED": 1,
	"EVT_ADDED":   2,
	"EVT_REMOVED": 3,
}

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}
func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (x EventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EventType_value, data, "EventType")
	if err != nil {
		return err
	}
	*x = EventType(value)
	return nil
}

// ref: PegasusShared.FormatType
type FormatType int32

const (
	FormatType_FT_UNKNOWN  FormatType = 0
	FormatType_FT_WILD     FormatType = 1
	FormatType_FT_STANDARD FormatType = 2
)

var FormatType_name = map[int32]string{
	0: "FT_UNKNOWN",
	1: "FT_WILD",
	2: "FT_STANDARD",
}
var FormatType_value = map[string]int32{
	"FT_UNKNOWN":  0,
	"FT_WILD":     1,
	"FT_STANDARD": 2,
}

func (x FormatType) Enum() *FormatType {
	p := new(FormatType)
	*p = x
	return p
}
func (x FormatType) String() string {
	return proto.EnumName(FormatType_name, int32(x))
}
func (x FormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *FormatType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FormatType_value, data, "FormatType")
	if err != nil {
		return err
	}
	*x = FormatType(value)
	return nil
}

// ref: PegasusShared.GameSaveOwnerType
type GameSaveOwnerType int32

const (
	GameSaveOwnerType_GAME_SAVE_OWNER_TYPE_UNKNOWN            GameSaveOwnerType = 0
	GameSaveOwnerType_GAME_SAVE_OWNER_TYPE_PLAYER             GameSaveOwnerType = 1
	GameSaveOwnerType_GAME_SAVE_OWNER_TYPE_FIRST              GameSaveOwnerType = 1
	GameSaveOwnerType_GAME_SAVE_OWNER_TYPE_FIRESIDE_GATHERING GameSaveOwnerType = 2
	GameSaveOwnerType_GAME_SAVE_OWNER_TYPE_COUNT              GameSaveOwnerType = 3
)

var GameSaveOwnerType_name = map[int32]string{
	0: "GAME_SAVE_OWNER_TYPE_UNKNOWN",
	1: "GAME_SAVE_OWNER_TYPE_PLAYER",
	// Duplicate value: 1: "GAME_SAVE_OWNER_TYPE_FIRST",
	2: "GAME_SAVE_OWNER_TYPE_FIRESIDE_GATHERING",
	3: "GAME_SAVE_OWNER_TYPE_COUNT",
}
var GameSaveOwnerType_value = map[string]int32{
	"GAME_SAVE_OWNER_TYPE_UNKNOWN":            0,
	"GAME_SAVE_OWNER_TYPE_PLAYER":             1,
	"GAME_SAVE_OWNER_TYPE_FIRST":              1,
	"GAME_SAVE_OWNER_TYPE_FIRESIDE_GATHERING": 2,
	"GAME_SAVE_OWNER_TYPE_COUNT":              3,
}

func (x GameSaveOwnerType) Enum() *GameSaveOwnerType {
	p := new(GameSaveOwnerType)
	*p = x
	return p
}
func (x GameSaveOwnerType) String() string {
	return proto.EnumName(GameSaveOwnerType_name, int32(x))
}
func (x GameSaveOwnerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *GameSaveOwnerType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameSaveOwnerType_value, data, "GameSaveOwnerType")
	if err != nil {
		return err
	}
	*x = GameSaveOwnerType(value)
	return nil
}

// ref: PegasusShared.GameType
type GameType int32

const (
	GameType_GT_UNKNOWN             GameType = 0
	GameType_GT_VS_AI               GameType = 1
	GameType_GT_VS_FRIEND           GameType = 2
	GameType_GT_TUTORIAL            GameType = 4
	GameType_GT_ARENA               GameType = 5
	GameType_GT_TEST                GameType = 6
	GameType_GT_RANKED              GameType = 7
	GameType_GT_CASUAL              GameType = 8
	GameType_GT_TAVERNBRAWL         GameType = 16
	GameType_GT_TB_1P_VS_AI         GameType = 17
	GameType_GT_TB_2P_COOP          GameType = 18
	GameType_GT_FSG_BRAWL_VS_FRIEND GameType = 19
	GameType_GT_FSG_BRAWL           GameType = 20
	GameType_GT_FSG_BRAWL_1P_VS_AI  GameType = 21
	GameType_GT_FSG_BRAWL_2P_COOP   GameType = 22
	GameType_GT_LAST                GameType = 23
)

var GameType_name = map[int32]string{
	0:  "GT_UNKNOWN",
	1:  "GT_VS_AI",
	2:  "GT_VS_FRIEND",
	4:  "GT_TUTORIAL",
	5:  "GT_ARENA",
	6:  "GT_TEST",
	7:  "GT_RANKED",
	8:  "GT_CASUAL",
	16: "GT_TAVERNBRAWL",
	17: "GT_TB_1P_VS_AI",
	18: "GT_TB_2P_COOP",
	19: "GT_FSG_BRAWL_VS_FRIEND",
	20: "GT_FSG_BRAWL",
	21: "GT_FSG_BRAWL_1P_VS_AI",
	22: "GT_FSG_BRAWL_2P_COOP",
	23: "GT_LAST",
}
var GameType_value = map[string]int32{
	"GT_UNKNOWN":             0,
	"GT_VS_AI":               1,
	"GT_VS_FRIEND":           2,
	"GT_TUTORIAL":            4,
	"GT_ARENA":               5,
	"GT_TEST":                6,
	"GT_RANKED":              7,
	"GT_CASUAL":              8,
	"GT_TAVERNBRAWL":         16,
	"GT_TB_1P_VS_AI":         17,
	"GT_TB_2P_COOP":          18,
	"GT_FSG_BRAWL_VS_FRIEND": 19,
	"GT_FSG_BRAWL":           20,
	"GT_FSG_BRAWL_1P_VS_AI":  21,
	"GT_FSG_BRAWL_2P_COOP":   22,
	"GT_LAST":                23,
}

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}
func (x GameType) String() string {
	return proto.EnumName(GameType_name, int32(x))
}
func (x GameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *GameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameType_value, data, "GameType")
	if err != nil {
		return err
	}
	*x = GameType(value)
	return nil
}

// ref: PegasusShared.RecruitAFriendState
type RecruitAFriendState int32

const (
	RecruitAFriendState_RAF_RECRUITABLE                  RecruitAFriendState = 1
	RecruitAFriendState_RAF_RECRUITED                    RecruitAFriendState = 2
	RecruitAFriendState_RAF_GRADUATED                    RecruitAFriendState = 3
	RecruitAFriendState_RAF_VALEDICTORIAN                RecruitAFriendState = 4
	RecruitAFriendState_RAF_NOT_RECRUITABLE_WRONG_REGION RecruitAFriendState = 1000
	RecruitAFriendState_RAF_NOT_RECRUITABLE_TOO_OLD      RecruitAFriendState = 1001
	RecruitAFriendState_RAF_GRADUATED_WITHOUT_RECRUITER  RecruitAFriendState = 1002
)

var RecruitAFriendState_name = map[int32]string{
	1:    "RAF_RECRUITABLE",
	2:    "RAF_RECRUITED",
	3:    "RAF_GRADUATED",
	4:    "RAF_VALEDICTORIAN",
	1000: "RAF_NOT_RECRUITABLE_WRONG_REGION",
	1001: "RAF_NOT_RECRUITABLE_TOO_OLD",
	1002: "RAF_GRADUATED_WITHOUT_RECRUITER",
}
var RecruitAFriendState_value = map[string]int32{
	"RAF_RECRUITABLE":                  1,
	"RAF_RECRUITED":                    2,
	"RAF_GRADUATED":                    3,
	"RAF_VALEDICTORIAN":                4,
	"RAF_NOT_RECRUITABLE_WRONG_REGION": 1000,
	"RAF_NOT_RECRUITABLE_TOO_OLD":      1001,
	"RAF_GRADUATED_WITHOUT_RECRUITER":  1002,
}

func (x RecruitAFriendState) Enum() *RecruitAFriendState {
	p := new(RecruitAFriendState)
	*p = x
	return p
}
func (x RecruitAFriendState) String() string {
	return proto.EnumName(RecruitAFriendState_name, int32(x))
}
func (x RecruitAFriendState) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *RecruitAFriendState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitAFriendState_value, data, "RecruitAFriendState")
	if err != nil {
		return err
	}
	*x = RecruitAFriendState(value)
	return nil
}

// ref: PegasusShared.ReturningPlayerStatus
type ReturningPlayerStatus int32

const (
	ReturningPlayerStatus_RPS_UNKNOWN                 ReturningPlayerStatus = 0
	ReturningPlayerStatus_RPS_NOT_RETURNING_PLAYER    ReturningPlayerStatus = 1
	ReturningPlayerStatus_RPS_ACTIVE                  ReturningPlayerStatus = 2
	ReturningPlayerStatus_RPS_COMPLETE                ReturningPlayerStatus = 3
	ReturningPlayerStatus_RPS_ACTIVE_OPTED_OUT_QUEST1 ReturningPlayerStatus = 4
	ReturningPlayerStatus_RPS_ACTIVE_WITH_MANY_LOSSES ReturningPlayerStatus = 5
)

var ReturningPlayerStatus_name = map[int32]string{
	0: "RPS_UNKNOWN",
	1: "RPS_NOT_RETURNING_PLAYER",
	2: "RPS_ACTIVE",
	3: "RPS_COMPLETE",
	4: "RPS_ACTIVE_OPTED_OUT_QUEST1",
	5: "RPS_ACTIVE_WITH_MANY_LOSSES",
}
var ReturningPlayerStatus_value = map[string]int32{
	"RPS_UNKNOWN":                 0,
	"RPS_NOT_RETURNING_PLAYER":    1,
	"RPS_ACTIVE":                  2,
	"RPS_COMPLETE":                3,
	"RPS_ACTIVE_OPTED_OUT_QUEST1": 4,
	"RPS_ACTIVE_WITH_MANY_LOSSES": 5,
}

func (x ReturningPlayerStatus) Enum() *ReturningPlayerStatus {
	p := new(ReturningPlayerStatus)
	*p = x
	return p
}
func (x ReturningPlayerStatus) String() string {
	return proto.EnumName(ReturningPlayerStatus_name, int32(x))
}
func (x ReturningPlayerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ReturningPlayerStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReturningPlayerStatus_value, data, "ReturningPlayerStatus")
	if err != nil {
		return err
	}
	*x = ReturningPlayerStatus(value)
	return nil
}

// ref: PegasusShared.RewardTrigger
type RewardTrigger int32

const (
	RewardTrigger_REWARD_TRIGGER_UNKNOWN        RewardTrigger = 0
	RewardTrigger_REWARD_TRIGGER_NONE           RewardTrigger = 1
	RewardTrigger_REWARD_TRIGGER_WIN_GAME       RewardTrigger = 2
	RewardTrigger_REWARD_TRIGGER_FINISH_GAME    RewardTrigger = 3
	RewardTrigger_REWARD_TRIGGER_FINISH_SESSION RewardTrigger = 4
)

var RewardTrigger_name = map[int32]string{
	0: "REWARD_TRIGGER_UNKNOWN",
	1: "REWARD_TRIGGER_NONE",
	2: "REWARD_TRIGGER_WIN_GAME",
	3: "REWARD_TRIGGER_FINISH_GAME",
	4: "REWARD_TRIGGER_FINISH_SESSION",
}
var RewardTrigger_value = map[string]int32{
	"REWARD_TRIGGER_UNKNOWN":        0,
	"REWARD_TRIGGER_NONE":           1,
	"REWARD_TRIGGER_WIN_GAME":       2,
	"REWARD_TRIGGER_FINISH_GAME":    3,
	"REWARD_TRIGGER_FINISH_SESSION": 4,
}

func (x RewardTrigger) Enum() *RewardTrigger {
	p := new(RewardTrigger)
	*p = x
	return p
}
func (x RewardTrigger) String() string {
	return proto.EnumName(RewardTrigger_name, int32(x))
}
func (x RewardTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *RewardTrigger) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RewardTrigger_value, data, "RewardTrigger")
	if err != nil {
		return err
	}
	*x = RewardTrigger(value)
	return nil
}

// ref: PegasusShared.RewardType
type RewardType int32

const (
	RewardType_REWARD_UNKNOWN                     RewardType = 0
	RewardType_REWARD_NONE                        RewardType = 1
	RewardType_REWARD_ADVENTURE_PROGRESS          RewardType = 2
	RewardType_REWARD_ARCANE_DUST                 RewardType = 3
	RewardType_REWARD_BASIC_CARD                  RewardType = 4
	RewardType_REWARD_BOOSTER_PACKS               RewardType = 5
	RewardType_REWARD_CARD_BACK                   RewardType = 6
	RewardType_REWARD_CARD_ID                     RewardType = 7
	RewardType_REWARD_CARD_ID_2X                  RewardType = 8
	RewardType_REWARD_CARD_SET                    RewardType = 9
	RewardType_DEPRECATED_REWARD_CRAFTABLE_GOLDEN RewardType = 10
	RewardType_REWARD_GOLD                        RewardType = 11
	RewardType_REWARD_GOLD_HERO                   RewardType = 12
	RewardType_REWARD_FORGE_TICKETS               RewardType = 13
	RewardType_REWARD_HERO                        RewardType = 14
	RewardType_REWARD_EXTERNAL_GAME_MOUNT         RewardType = 15
	RewardType_REWARD_CHEST                       RewardType = 16
	RewardType_REWARD_RETURNING_PLAYER_COMPLETE   RewardType = 17
	RewardType_REWARD_EVENT_NOTICE                RewardType = 18
	RewardType_REWARD_GENERIC_REWARD_CHEST        RewardType = 19
)

var RewardType_name = map[int32]string{
	0:  "REWARD_UNKNOWN",
	1:  "REWARD_NONE",
	2:  "REWARD_ADVENTURE_PROGRESS",
	3:  "REWARD_ARCANE_DUST",
	4:  "REWARD_BASIC_CARD",
	5:  "REWARD_BOOSTER_PACKS",
	6:  "REWARD_CARD_BACK",
	7:  "REWARD_CARD_ID",
	8:  "REWARD_CARD_ID_2X",
	9:  "REWARD_CARD_SET",
	10: "DEPRECATED_REWARD_CRAFTABLE_GOLDEN",
	11: "REWARD_GOLD",
	12: "REWARD_GOLD_HERO",
	13: "REWARD_FORGE_TICKETS",
	14: "REWARD_HERO",
	15: "REWARD_EXTERNAL_GAME_MOUNT",
	16: "REWARD_CHEST",
	17: "REWARD_RETURNING_PLAYER_COMPLETE",
	18: "REWARD_EVENT_NOTICE",
	19: "REWARD_GENERIC_REWARD_CHEST",
}
var RewardType_value = map[string]int32{
	"REWARD_UNKNOWN":                     0,
	"REWARD_NONE":                        1,
	"REWARD_ADVENTURE_PROGRESS":          2,
	"REWARD_ARCANE_DUST":                 3,
	"REWARD_BASIC_CARD":                  4,
	"REWARD_BOOSTER_PACKS":               5,
	"REWARD_CARD_BACK":                   6,
	"REWARD_CARD_ID":                     7,
	"REWARD_CARD_ID_2X":                  8,
	"REWARD_CARD_SET":                    9,
	"DEPRECATED_REWARD_CRAFTABLE_GOLDEN": 10,
	"REWARD_GOLD":                        11,
	"REWARD_GOLD_HERO":                   12,
	"REWARD_FORGE_TICKETS":               13,
	"REWARD_HERO":                        14,
	"REWARD_EXTERNAL_GAME_MOUNT":         15,
	"REWARD_CHEST":                       16,
	"REWARD_RETURNING_PLAYER_COMPLETE":   17,
	"REWARD_EVENT_NOTICE":                18,
	"REWARD_GENERIC_REWARD_CHEST":        19,
}

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}
func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}
func (x RewardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *RewardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RewardType_value, data, "RewardType")
	if err != nil {
		return err
	}
	*x = RewardType(value)
	return nil
}

// ref: PegasusShared.RuleType
type RuleType int32

const (
	RuleType_RULE_NONE        RuleType = 0
	RuleType_RULE_CHOOSE_HERO RuleType = 1
	RuleType_RULE_CHOOSE_DECK RuleType = 2
)

var RuleType_name = map[int32]string{
	0: "RULE_NONE",
	1: "RULE_CHOOSE_HERO",
	2: "RULE_CHOOSE_DECK",
}
var RuleType_value = map[string]int32{
	"RULE_NONE":        0,
	"RULE_CHOOSE_HERO": 1,
	"RULE_CHOOSE_DECK": 2,
}

func (x RuleType) Enum() *RuleType {
	p := new(RuleType)
	*p = x
	return p
}
func (x RuleType) String() string {
	return proto.EnumName(RuleType_name, int32(x))
}
func (x RuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *RuleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RuleType_value, data, "RuleType")
	if err != nil {
		return err
	}
	*x = RuleType(value)
	return nil
}

// ref: PegasusShared.TavernBrawlStatus
type TavernBrawlStatus int32

const (
	TavernBrawlStatus_TB_STATUS_INVALID         TavernBrawlStatus = 0
	TavernBrawlStatus_TB_STATUS_TICKET_REQUIRED TavernBrawlStatus = 1
	TavernBrawlStatus_TB_STATUS_ACTIVE          TavernBrawlStatus = 2
	TavernBrawlStatus_TB_STATUS_IN_REWARDS      TavernBrawlStatus = 3
)

var TavernBrawlStatus_name = map[int32]string{
	0: "TB_STATUS_INVALID",
	1: "TB_STATUS_TICKET_REQUIRED",
	2: "TB_STATUS_ACTIVE",
	3: "TB_STATUS_IN_REWARDS",
}
var TavernBrawlStatus_value = map[string]int32{
	"TB_STATUS_INVALID":         0,
	"TB_STATUS_TICKET_REQUIRED": 1,
	"TB_STATUS_ACTIVE":          2,
	"TB_STATUS_IN_REWARDS":      3,
}

func (x TavernBrawlStatus) Enum() *TavernBrawlStatus {
	p := new(TavernBrawlStatus)
	*p = x
	return p
}
func (x TavernBrawlStatus) String() string {
	return proto.EnumName(TavernBrawlStatus_name, int32(x))
}
func (x TavernBrawlStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *TavernBrawlStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TavernBrawlStatus_value, data, "TavernBrawlStatus")
	if err != nil {
		return err
	}
	*x = TavernBrawlStatus(value)
	return nil
}

// ref: PegasusShared.TavernSignType
type TavernSignType int32

const (
	TavernSignType_TAVERN_SIGN_TYPE_DEFAULT TavernSignType = 0
	TavernSignType_TAVERN_SIGN_TYPE_CUSTOM  TavernSignType = 1
)

var TavernSignType_name = map[int32]string{
	0: "TAVERN_SIGN_TYPE_DEFAULT",
	1: "TAVERN_SIGN_TYPE_CUSTOM",
}
var TavernSignType_value = map[string]int32{
	"TAVERN_SIGN_TYPE_DEFAULT": 0,
	"TAVERN_SIGN_TYPE_CUSTOM":  1,
}

func (x TavernSignType) Enum() *TavernSignType {
	p := new(TavernSignType)
	*p = x
	return p
}
func (x TavernSignType) String() string {
	return proto.EnumName(TavernSignType_name, int32(x))
}
func (x TavernSignType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *TavernSignType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TavernSignType_value, data, "TavernSignType")
	if err != nil {
		return err
	}
	*x = TavernSignType(value)
	return nil
}

// ref: PegasusShared.AccountLicenseInfo/Flags
type AccountLicenseInfo_Flags int32

const (
	AccountLicenseInfo_OWNED AccountLicenseInfo_Flags = 1
)

var AccountLicenseInfo_Flags_name = map[int32]string{
	1: "OWNED",
}
var AccountLicenseInfo_Flags_value = map[string]int32{
	"OWNED": 1,
}

func (x AccountLicenseInfo_Flags) Enum() *AccountLicenseInfo_Flags {
	p := new(AccountLicenseInfo_Flags)
	*p = x
	return p
}
func (x AccountLicenseInfo_Flags) String() string {
	return proto.EnumName(AccountLicenseInfo_Flags_name, int32(x))
}
func (x AccountLicenseInfo_Flags) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *AccountLicenseInfo_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccountLicenseInfo_Flags_value, data, "AccountLicenseInfo_Flags")
	if err != nil {
		return err
	}
	*x = AccountLicenseInfo_Flags(value)
	return nil
}

// ref: PegasusShared.AdventureProgress/Flags
type AdventureProgress_Flags int32

const (
	AdventureProgress_OWNED                            AdventureProgress_Flags = 1
	AdventureProgress_DEFEAT_HEROIC_MISSION_1          AdventureProgress_Flags = 2
	AdventureProgress_DEFEAT_HEROIC_MISSION_2          AdventureProgress_Flags = 4
	AdventureProgress_DEFEAT_HEROIC_MISSION_3          AdventureProgress_Flags = 8
	AdventureProgress_DEFEAT_HEROIC_MISSION_4          AdventureProgress_Flags = 16
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_1 AdventureProgress_Flags = 256
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_2 AdventureProgress_Flags = 512
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_3 AdventureProgress_Flags = 1024
)

var AdventureProgress_Flags_name = map[int32]string{
	1:    "OWNED",
	2:    "DEFEAT_HEROIC_MISSION_1",
	4:    "DEFEAT_HEROIC_MISSION_2",
	8:    "DEFEAT_HEROIC_MISSION_3",
	16:   "DEFEAT_HEROIC_MISSION_4",
	256:  "DEFEAT_CLASS_CHALLENGE_MISSION_1",
	512:  "DEFEAT_CLASS_CHALLENGE_MISSION_2",
	1024: "DEFEAT_CLASS_CHALLENGE_MISSION_3",
}
var AdventureProgress_Flags_value = map[string]int32{
	"OWNED":                            1,
	"DEFEAT_HEROIC_MISSION_1":          2,
	"DEFEAT_HEROIC_MISSION_2":          4,
	"DEFEAT_HEROIC_MISSION_3":          8,
	"DEFEAT_HEROIC_MISSION_4":          16,
	"DEFEAT_CLASS_CHALLENGE_MISSION_1": 256,
	"DEFEAT_CLASS_CHALLENGE_MISSION_2": 512,
	"DEFEAT_CLASS_CHALLENGE_MISSION_3": 1024,
}

func (x AdventureProgress_Flags) Enum() *AdventureProgress_Flags {
	p := new(AdventureProgress_Flags)
	*p = x
	return p
}
func (x AdventureProgress_Flags) String() string {
	return proto.EnumName(AdventureProgress_Flags_name, int32(x))
}
func (x AdventureProgress_Flags) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *AdventureProgress_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdventureProgress_Flags_value, data, "AdventureProgress_Flags")
	if err != nil {
		return err
	}
	*x = AdventureProgress_Flags(value)
	return nil
}

// ref: PegasusShared.DeckInfo/ValidityFlags
type DeckInfo_ValidityFlags int32

const (
	DeckInfo_UNLOCKED_HERO_CLASS DeckInfo_ValidityFlags = 1
	DeckInfo_OWNS_CARDS          DeckInfo_ValidityFlags = 2
	DeckInfo_HAS_30_CARDS        DeckInfo_ValidityFlags = 4
	DeckInfo_OBEYS_MAXES         DeckInfo_ValidityFlags = 8
	DeckInfo_CLASS_MATCHES       DeckInfo_ValidityFlags = 16
	DeckInfo_OWNS_CARD_BACK      DeckInfo_ValidityFlags = 32
	DeckInfo_OWNS_HERO           DeckInfo_ValidityFlags = 64
	DeckInfo_TAGGED_STANDARD     DeckInfo_ValidityFlags = 128
	DeckInfo_NEEDS_VALIDATION    DeckInfo_ValidityFlags = 256
	DeckInfo_NEEDS_NAME          DeckInfo_ValidityFlags = 512
	DeckInfo_LOCKED_DECK         DeckInfo_ValidityFlags = 1024
)

var DeckInfo_ValidityFlags_name = map[int32]string{
	1:    "UNLOCKED_HERO_CLASS",
	2:    "OWNS_CARDS",
	4:    "HAS_30_CARDS",
	8:    "OBEYS_MAXES",
	16:   "CLASS_MATCHES",
	32:   "OWNS_CARD_BACK",
	64:   "OWNS_HERO",
	128:  "TAGGED_STANDARD",
	256:  "NEEDS_VALIDATION",
	512:  "NEEDS_NAME",
	1024: "LOCKED_DECK",
}
var DeckInfo_ValidityFlags_value = map[string]int32{
	"UNLOCKED_HERO_CLASS": 1,
	"OWNS_CARDS":          2,
	"HAS_30_CARDS":        4,
	"OBEYS_MAXES":         8,
	"CLASS_MATCHES":       16,
	"OWNS_CARD_BACK":      32,
	"OWNS_HERO":           64,
	"TAGGED_STANDARD":     128,
	"NEEDS_VALIDATION":    256,
	"NEEDS_NAME":          512,
	"LOCKED_DECK":         1024,
}

func (x DeckInfo_ValidityFlags) Enum() *DeckInfo_ValidityFlags {
	p := new(DeckInfo_ValidityFlags)
	*p = x
	return p
}
func (x DeckInfo_ValidityFlags) String() string {
	return proto.EnumName(DeckInfo_ValidityFlags_name, int32(x))
}
func (x DeckInfo_ValidityFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *DeckInfo_ValidityFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeckInfo_ValidityFlags_value, data, "DeckInfo_ValidityFlags")
	if err != nil {
		return err
	}
	*x = DeckInfo_ValidityFlags(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeAccountLicense/NoticeID
type ProfileNoticeAccountLicense_NoticeID int32

const (
	ProfileNoticeAccountLicense_ID ProfileNoticeAccountLicense_NoticeID = 16
)

var ProfileNoticeAccountLicense_NoticeID_name = map[int32]string{
	16: "ID",
}
var ProfileNoticeAccountLicense_NoticeID_value = map[string]int32{
	"ID": 16,
}

func (x ProfileNoticeAccountLicense_NoticeID) Enum() *ProfileNoticeAccountLicense_NoticeID {
	p := new(ProfileNoticeAccountLicense_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeAccountLicense_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeAccountLicense_NoticeID_name, int32(x))
}
func (x ProfileNoticeAccountLicense_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeAccountLicense_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeAccountLicense_NoticeID_value, data, "ProfileNoticeAccountLicense_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeAccountLicense_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeAdventureProgress/NoticeID
type ProfileNoticeAdventureProgress_NoticeID int32

const (
	ProfileNoticeAdventureProgress_ID ProfileNoticeAdventureProgress_NoticeID = 14
)

var ProfileNoticeAdventureProgress_NoticeID_name = map[int32]string{
	14: "ID",
}
var ProfileNoticeAdventureProgress_NoticeID_value = map[string]int32{
	"ID": 14,
}

func (x ProfileNoticeAdventureProgress_NoticeID) Enum() *ProfileNoticeAdventureProgress_NoticeID {
	p := new(ProfileNoticeAdventureProgress_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeAdventureProgress_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeAdventureProgress_NoticeID_name, int32(x))
}
func (x ProfileNoticeAdventureProgress_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeAdventureProgress_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeAdventureProgress_NoticeID_value, data, "ProfileNoticeAdventureProgress_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeAdventureProgress_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeBonusStars/NoticeID
type ProfileNoticeBonusStars_NoticeID int32

const (
	ProfileNoticeBonusStars_ID ProfileNoticeBonusStars_NoticeID = 12
)

var ProfileNoticeBonusStars_NoticeID_name = map[int32]string{
	12: "ID",
}
var ProfileNoticeBonusStars_NoticeID_value = map[string]int32{
	"ID": 12,
}

func (x ProfileNoticeBonusStars_NoticeID) Enum() *ProfileNoticeBonusStars_NoticeID {
	p := new(ProfileNoticeBonusStars_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeBonusStars_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeBonusStars_NoticeID_name, int32(x))
}
func (x ProfileNoticeBonusStars_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeBonusStars_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeBonusStars_NoticeID_value, data, "ProfileNoticeBonusStars_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeBonusStars_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeCardBack/NoticeID
type ProfileNoticeCardBack_NoticeID int32

const (
	ProfileNoticeCardBack_ID ProfileNoticeCardBack_NoticeID = 11
)

var ProfileNoticeCardBack_NoticeID_name = map[int32]string{
	11: "ID",
}
var ProfileNoticeCardBack_NoticeID_value = map[string]int32{
	"ID": 11,
}

func (x ProfileNoticeCardBack_NoticeID) Enum() *ProfileNoticeCardBack_NoticeID {
	p := new(ProfileNoticeCardBack_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeCardBack_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeCardBack_NoticeID_name, int32(x))
}
func (x ProfileNoticeCardBack_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeCardBack_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeCardBack_NoticeID_value, data, "ProfileNoticeCardBack_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeCardBack_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/GameResult
type ProfileNoticeDisconnectedGameResult_GameResult int32

const (
	ProfileNoticeDisconnectedGameResult_GR_UNKNOWN ProfileNoticeDisconnectedGameResult_GameResult = 0
	ProfileNoticeDisconnectedGameResult_GR_PLAYING ProfileNoticeDisconnectedGameResult_GameResult = 1
	ProfileNoticeDisconnectedGameResult_GR_WINNER  ProfileNoticeDisconnectedGameResult_GameResult = 2
	ProfileNoticeDisconnectedGameResult_GR_TIE     ProfileNoticeDisconnectedGameResult_GameResult = 3
)

var ProfileNoticeDisconnectedGameResult_GameResult_name = map[int32]string{
	0: "GR_UNKNOWN",
	1: "GR_PLAYING",
	2: "GR_WINNER",
	3: "GR_TIE",
}
var ProfileNoticeDisconnectedGameResult_GameResult_value = map[string]int32{
	"GR_UNKNOWN": 0,
	"GR_PLAYING": 1,
	"GR_WINNER":  2,
	"GR_TIE":     3,
}

func (x ProfileNoticeDisconnectedGameResult_GameResult) Enum() *ProfileNoticeDisconnectedGameResult_GameResult {
	p := new(ProfileNoticeDisconnectedGameResult_GameResult)
	*p = x
	return p
}
func (x ProfileNoticeDisconnectedGameResult_GameResult) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_GameResult_name, int32(x))
}
func (x ProfileNoticeDisconnectedGameResult_GameResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeDisconnectedGameResult_GameResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeDisconnectedGameResult_GameResult_value, data, "ProfileNoticeDisconnectedGameResult_GameResult")
	if err != nil {
		return err
	}
	*x = ProfileNoticeDisconnectedGameResult_GameResult(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/NoticeID
type ProfileNoticeDisconnectedGameResult_NoticeID int32

const (
	ProfileNoticeDisconnectedGameResult_ID ProfileNoticeDisconnectedGameResult_NoticeID = 4
)

var ProfileNoticeDisconnectedGameResult_NoticeID_name = map[int32]string{
	4: "ID",
}
var ProfileNoticeDisconnectedGameResult_NoticeID_value = map[string]int32{
	"ID": 4,
}

func (x ProfileNoticeDisconnectedGameResult_NoticeID) Enum() *ProfileNoticeDisconnectedGameResult_NoticeID {
	p := new(ProfileNoticeDisconnectedGameResult_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeDisconnectedGameResult_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_NoticeID_name, int32(x))
}
func (x ProfileNoticeDisconnectedGameResult_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeDisconnectedGameResult_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeDisconnectedGameResult_NoticeID_value, data, "ProfileNoticeDisconnectedGameResult_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeDisconnectedGameResult_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/PlayerResult
type ProfileNoticeDisconnectedGameResult_PlayerResult int32

const (
	ProfileNoticeDisconnectedGameResult_PR_UNKNOWN      ProfileNoticeDisconnectedGameResult_PlayerResult = 0
	ProfileNoticeDisconnectedGameResult_PR_WON          ProfileNoticeDisconnectedGameResult_PlayerResult = 1
	ProfileNoticeDisconnectedGameResult_PR_LOST         ProfileNoticeDisconnectedGameResult_PlayerResult = 2
	ProfileNoticeDisconnectedGameResult_PR_DISCONNECTED ProfileNoticeDisconnectedGameResult_PlayerResult = 3
	ProfileNoticeDisconnectedGameResult_PR_QUIT         ProfileNoticeDisconnectedGameResult_PlayerResult = 4
)

var ProfileNoticeDisconnectedGameResult_PlayerResult_name = map[int32]string{
	0: "PR_UNKNOWN",
	1: "PR_WON",
	2: "PR_LOST",
	3: "PR_DISCONNECTED",
	4: "PR_QUIT",
}
var ProfileNoticeDisconnectedGameResult_PlayerResult_value = map[string]int32{
	"PR_UNKNOWN":      0,
	"PR_WON":          1,
	"PR_LOST":         2,
	"PR_DISCONNECTED": 3,
	"PR_QUIT":         4,
}

func (x ProfileNoticeDisconnectedGameResult_PlayerResult) Enum() *ProfileNoticeDisconnectedGameResult_PlayerResult {
	p := new(ProfileNoticeDisconnectedGameResult_PlayerResult)
	*p = x
	return p
}
func (x ProfileNoticeDisconnectedGameResult_PlayerResult) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_PlayerResult_name, int32(x))
}
func (x ProfileNoticeDisconnectedGameResult_PlayerResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeDisconnectedGameResult_PlayerResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeDisconnectedGameResult_PlayerResult_value, data, "ProfileNoticeDisconnectedGameResult_PlayerResult")
	if err != nil {
		return err
	}
	*x = ProfileNoticeDisconnectedGameResult_PlayerResult(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeGenericRewardChest/NoticeID
type ProfileNoticeGenericRewardChest_NoticeID int32

const (
	ProfileNoticeGenericRewardChest_ID ProfileNoticeGenericRewardChest_NoticeID = 20
)

var ProfileNoticeGenericRewardChest_NoticeID_name = map[int32]string{
	20: "ID",
}
var ProfileNoticeGenericRewardChest_NoticeID_value = map[string]int32{
	"ID": 20,
}

func (x ProfileNoticeGenericRewardChest_NoticeID) Enum() *ProfileNoticeGenericRewardChest_NoticeID {
	p := new(ProfileNoticeGenericRewardChest_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeGenericRewardChest_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeGenericRewardChest_NoticeID_name, int32(x))
}
func (x ProfileNoticeGenericRewardChest_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeGenericRewardChest_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeGenericRewardChest_NoticeID_value, data, "ProfileNoticeGenericRewardChest_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeGenericRewardChest_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeLevelUp/NoticeID
type ProfileNoticeLevelUp_NoticeID int32

const (
	ProfileNoticeLevelUp_ID ProfileNoticeLevelUp_NoticeID = 15
)

var ProfileNoticeLevelUp_NoticeID_name = map[int32]string{
	15: "ID",
}
var ProfileNoticeLevelUp_NoticeID_value = map[string]int32{
	"ID": 15,
}

func (x ProfileNoticeLevelUp_NoticeID) Enum() *ProfileNoticeLevelUp_NoticeID {
	p := new(ProfileNoticeLevelUp_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeLevelUp_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeLevelUp_NoticeID_name, int32(x))
}
func (x ProfileNoticeLevelUp_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeLevelUp_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeLevelUp_NoticeID_value, data, "ProfileNoticeLevelUp_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeLevelUp_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeMedal/MedalType
type ProfileNoticeMedal_MedalType int32

const (
	ProfileNoticeMedal_UNKNOWN_MEDAL  ProfileNoticeMedal_MedalType = 0
	ProfileNoticeMedal_STANDARD_MEDAL ProfileNoticeMedal_MedalType = 1
	ProfileNoticeMedal_WILD_MEDAL     ProfileNoticeMedal_MedalType = 2
)

var ProfileNoticeMedal_MedalType_name = map[int32]string{
	0: "UNKNOWN_MEDAL",
	1: "STANDARD_MEDAL",
	2: "WILD_MEDAL",
}
var ProfileNoticeMedal_MedalType_value = map[string]int32{
	"UNKNOWN_MEDAL":  0,
	"STANDARD_MEDAL": 1,
	"WILD_MEDAL":     2,
}

func (x ProfileNoticeMedal_MedalType) Enum() *ProfileNoticeMedal_MedalType {
	p := new(ProfileNoticeMedal_MedalType)
	*p = x
	return p
}
func (x ProfileNoticeMedal_MedalType) String() string {
	return proto.EnumName(ProfileNoticeMedal_MedalType_name, int32(x))
}
func (x ProfileNoticeMedal_MedalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeMedal_MedalType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeMedal_MedalType_value, data, "ProfileNoticeMedal_MedalType")
	if err != nil {
		return err
	}
	*x = ProfileNoticeMedal_MedalType(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeMedal/NoticeID
type ProfileNoticeMedal_NoticeID int32

const (
	ProfileNoticeMedal_ID ProfileNoticeMedal_NoticeID = 1
)

var ProfileNoticeMedal_NoticeID_name = map[int32]string{
	1: "ID",
}
var ProfileNoticeMedal_NoticeID_value = map[string]int32{
	"ID": 1,
}

func (x ProfileNoticeMedal_NoticeID) Enum() *ProfileNoticeMedal_NoticeID {
	p := new(ProfileNoticeMedal_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeMedal_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeMedal_NoticeID_name, int32(x))
}
func (x ProfileNoticeMedal_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeMedal_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeMedal_NoticeID_value, data, "ProfileNoticeMedal_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeMedal_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticePreconDeck/NoticeID
type ProfileNoticePreconDeck_NoticeID int32

const (
	ProfileNoticePreconDeck_ID ProfileNoticePreconDeck_NoticeID = 5
)

var ProfileNoticePreconDeck_NoticeID_name = map[int32]string{
	5: "ID",
}
var ProfileNoticePreconDeck_NoticeID_value = map[string]int32{
	"ID": 5,
}

func (x ProfileNoticePreconDeck_NoticeID) Enum() *ProfileNoticePreconDeck_NoticeID {
	p := new(ProfileNoticePreconDeck_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticePreconDeck_NoticeID) String() string {
	return proto.EnumName(ProfileNoticePreconDeck_NoticeID_name, int32(x))
}
func (x ProfileNoticePreconDeck_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticePreconDeck_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticePreconDeck_NoticeID_value, data, "ProfileNoticePreconDeck_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticePreconDeck_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticePurchase/NoticeID
type ProfileNoticePurchase_NoticeID int32

const (
	ProfileNoticePurchase_ID ProfileNoticePurchase_NoticeID = 10
)

var ProfileNoticePurchase_NoticeID_name = map[int32]string{
	10: "ID",
}
var ProfileNoticePurchase_NoticeID_value = map[string]int32{
	"ID": 10,
}

func (x ProfileNoticePurchase_NoticeID) Enum() *ProfileNoticePurchase_NoticeID {
	p := new(ProfileNoticePurchase_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticePurchase_NoticeID) String() string {
	return proto.EnumName(ProfileNoticePurchase_NoticeID_name, int32(x))
}
func (x ProfileNoticePurchase_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticePurchase_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticePurchase_NoticeID_value, data, "ProfileNoticePurchase_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticePurchase_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeRewardBooster/NoticeID
type ProfileNoticeRewardBooster_NoticeID int32

const (
	ProfileNoticeRewardBooster_ID ProfileNoticeRewardBooster_NoticeID = 2
)

var ProfileNoticeRewardBooster_NoticeID_name = map[int32]string{
	2: "ID",
}
var ProfileNoticeRewardBooster_NoticeID_value = map[string]int32{
	"ID": 2,
}

func (x ProfileNoticeRewardBooster_NoticeID) Enum() *ProfileNoticeRewardBooster_NoticeID {
	p := new(ProfileNoticeRewardBooster_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardBooster_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardBooster_NoticeID_name, int32(x))
}
func (x ProfileNoticeRewardBooster_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeRewardBooster_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardBooster_NoticeID_value, data, "ProfileNoticeRewardBooster_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardBooster_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeRewardCard/NoticeID
type ProfileNoticeRewardCard_NoticeID int32

const (
	ProfileNoticeRewardCard_ID ProfileNoticeRewardCard_NoticeID = 3
)

var ProfileNoticeRewardCard_NoticeID_name = map[int32]string{
	3: "ID",
}
var ProfileNoticeRewardCard_NoticeID_value = map[string]int32{
	"ID": 3,
}

func (x ProfileNoticeRewardCard_NoticeID) Enum() *ProfileNoticeRewardCard_NoticeID {
	p := new(ProfileNoticeRewardCard_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardCard_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardCard_NoticeID_name, int32(x))
}
func (x ProfileNoticeRewardCard_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeRewardCard_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardCard_NoticeID_value, data, "ProfileNoticeRewardCard_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardCard_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeRewardCard2x/NoticeID
type ProfileNoticeRewardCard2X_NoticeID int32

const (
	ProfileNoticeRewardCard2X_ID ProfileNoticeRewardCard2X_NoticeID = 13
)

var ProfileNoticeRewardCard2X_NoticeID_name = map[int32]string{
	13: "ID",
}
var ProfileNoticeRewardCard2X_NoticeID_value = map[string]int32{
	"ID": 13,
}

func (x ProfileNoticeRewardCard2X_NoticeID) Enum() *ProfileNoticeRewardCard2X_NoticeID {
	p := new(ProfileNoticeRewardCard2X_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardCard2X_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardCard2X_NoticeID_name, int32(x))
}
func (x ProfileNoticeRewardCard2X_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeRewardCard2X_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardCard2X_NoticeID_value, data, "ProfileNoticeRewardCard2X_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardCard2X_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeRewardDust/NoticeID
type ProfileNoticeRewardDust_NoticeID int32

const (
	ProfileNoticeRewardDust_ID ProfileNoticeRewardDust_NoticeID = 6
)

var ProfileNoticeRewardDust_NoticeID_name = map[int32]string{
	6: "ID",
}
var ProfileNoticeRewardDust_NoticeID_value = map[string]int32{
	"ID": 6,
}

func (x ProfileNoticeRewardDust_NoticeID) Enum() *ProfileNoticeRewardDust_NoticeID {
	p := new(ProfileNoticeRewardDust_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardDust_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardDust_NoticeID_name, int32(x))
}
func (x ProfileNoticeRewardDust_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeRewardDust_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardDust_NoticeID_value, data, "ProfileNoticeRewardDust_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardDust_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeRewardForge/NoticeID
type ProfileNoticeRewardForge_NoticeID int32

const (
	ProfileNoticeRewardForge_ID ProfileNoticeRewardForge_NoticeID = 8
)

var ProfileNoticeRewardForge_NoticeID_name = map[int32]string{
	8: "ID",
}
var ProfileNoticeRewardForge_NoticeID_value = map[string]int32{
	"ID": 8,
}

func (x ProfileNoticeRewardForge_NoticeID) Enum() *ProfileNoticeRewardForge_NoticeID {
	p := new(ProfileNoticeRewardForge_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardForge_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardForge_NoticeID_name, int32(x))
}
func (x ProfileNoticeRewardForge_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeRewardForge_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardForge_NoticeID_value, data, "ProfileNoticeRewardForge_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardForge_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeRewardGold/NoticeID
type ProfileNoticeRewardGold_NoticeID int32

const (
	ProfileNoticeRewardGold_ID ProfileNoticeRewardGold_NoticeID = 9
)

var ProfileNoticeRewardGold_NoticeID_name = map[int32]string{
	9: "ID",
}
var ProfileNoticeRewardGold_NoticeID_value = map[string]int32{
	"ID": 9,
}

func (x ProfileNoticeRewardGold_NoticeID) Enum() *ProfileNoticeRewardGold_NoticeID {
	p := new(ProfileNoticeRewardGold_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardGold_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardGold_NoticeID_name, int32(x))
}
func (x ProfileNoticeRewardGold_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeRewardGold_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardGold_NoticeID_value, data, "ProfileNoticeRewardGold_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardGold_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeRewardMount/NoticeID
type ProfileNoticeRewardMount_NoticeID int32

const (
	ProfileNoticeRewardMount_ID ProfileNoticeRewardMount_NoticeID = 7
)

var ProfileNoticeRewardMount_NoticeID_name = map[int32]string{
	7: "ID",
}
var ProfileNoticeRewardMount_NoticeID_value = map[string]int32{
	"ID": 7,
}

func (x ProfileNoticeRewardMount_NoticeID) Enum() *ProfileNoticeRewardMount_NoticeID {
	p := new(ProfileNoticeRewardMount_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardMount_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardMount_NoticeID_name, int32(x))
}
func (x ProfileNoticeRewardMount_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeRewardMount_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardMount_NoticeID_value, data, "ProfileNoticeRewardMount_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardMount_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeTavernBrawlRewards/NoticeID
type ProfileNoticeTavernBrawlRewards_NoticeID int32

const (
	ProfileNoticeTavernBrawlRewards_ID ProfileNoticeTavernBrawlRewards_NoticeID = 17
)

var ProfileNoticeTavernBrawlRewards_NoticeID_name = map[int32]string{
	17: "ID",
}
var ProfileNoticeTavernBrawlRewards_NoticeID_value = map[string]int32{
	"ID": 17,
}

func (x ProfileNoticeTavernBrawlRewards_NoticeID) Enum() *ProfileNoticeTavernBrawlRewards_NoticeID {
	p := new(ProfileNoticeTavernBrawlRewards_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeTavernBrawlRewards_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeTavernBrawlRewards_NoticeID_name, int32(x))
}
func (x ProfileNoticeTavernBrawlRewards_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeTavernBrawlRewards_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeTavernBrawlRewards_NoticeID_value, data, "ProfileNoticeTavernBrawlRewards_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeTavernBrawlRewards_NoticeID(value)
	return nil
}

// ref: PegasusShared.ProfileNoticeTavernBrawlTicket/NoticeID
type ProfileNoticeTavernBrawlTicket_NoticeID int32

const (
	ProfileNoticeTavernBrawlTicket_ID ProfileNoticeTavernBrawlTicket_NoticeID = 18
)

var ProfileNoticeTavernBrawlTicket_NoticeID_name = map[int32]string{
	18: "ID",
}
var ProfileNoticeTavernBrawlTicket_NoticeID_value = map[string]int32{
	"ID": 18,
}

func (x ProfileNoticeTavernBrawlTicket_NoticeID) Enum() *ProfileNoticeTavernBrawlTicket_NoticeID {
	p := new(ProfileNoticeTavernBrawlTicket_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeTavernBrawlTicket_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeTavernBrawlTicket_NoticeID_name, int32(x))
}
func (x ProfileNoticeTavernBrawlTicket_NoticeID) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ProfileNoticeTavernBrawlTicket_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeTavernBrawlTicket_NoticeID_value, data, "ProfileNoticeTavernBrawlTicket_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeTavernBrawlTicket_NoticeID(value)
	return nil
}

// ref: PegasusShared.AccountLicenseInfo
type AccountLicenseInfo struct {
	License          *int64  `protobuf:"varint,1,req,name=license" json:"license,omitempty"`
	Flags            *uint64 `protobuf:"varint,2,req,name=flags" json:"flags,omitempty"`
	CasId            *int64  `protobuf:"varint,3,req,name=cas_id" json:"cas_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AccountLicenseInfo) Reset()         { *m = AccountLicenseInfo{} }
func (m *AccountLicenseInfo) String() string { return proto.CompactTextString(m) }
func (*AccountLicenseInfo) ProtoMessage()    {}

func (m *AccountLicenseInfo) GetLicense() int64 {
	if m != nil && m.License != nil {
		return *m.License
	}
	return 0
}

func (m *AccountLicenseInfo) GetFlags() uint64 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *AccountLicenseInfo) GetCasId() int64 {
	if m != nil && m.CasId != nil {
		return *m.CasId
	}
	return 0
}

// ref: PegasusShared.AdventureProgress
type AdventureProgress struct {
	WingId           *int32  `protobuf:"varint,1,req,name=wing_id" json:"wing_id,omitempty"`
	Progress         *int32  `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	Ack              *int32  `protobuf:"varint,3,opt,name=ack,def=0" json:"ack,omitempty"`
	Flags            *uint64 `protobuf:"varint,4,req,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AdventureProgress) Reset()         { *m = AdventureProgress{} }
func (m *AdventureProgress) String() string { return proto.CompactTextString(m) }
func (*AdventureProgress) ProtoMessage()    {}

const Default_AdventureProgress_Ack int32 = 0

func (m *AdventureProgress) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *AdventureProgress) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *AdventureProgress) GetAck() int32 {
	if m != nil && m.Ack != nil {
		return *m.Ack
	}
	return Default_AdventureProgress_Ack
}

func (m *AdventureProgress) GetFlags() uint64 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

// ref: PegasusShared.ArenaSeasonSpec
type ArenaSeasonSpec struct {
	GameContentSeason      *GameContentSeasonSpec `protobuf:"bytes,1,req,name=game_content_season" json:"game_content_season,omitempty"`
	RewardPaperPrefab      *string                `protobuf:"bytes,2,opt,name=reward_paper_prefab" json:"reward_paper_prefab,omitempty"`
	RewardPaperPrefabPhone *string                `protobuf:"bytes,3,opt,name=reward_paper_prefab_phone" json:"reward_paper_prefab_phone,omitempty"`
	Strings                []*LocalizedString     `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
	XXX_unrecognized       []byte                 `json:"-"`
}

func (m *ArenaSeasonSpec) Reset()         { *m = ArenaSeasonSpec{} }
func (m *ArenaSeasonSpec) String() string { return proto.CompactTextString(m) }
func (*ArenaSeasonSpec) ProtoMessage()    {}

func (m *ArenaSeasonSpec) GetGameContentSeason() *GameContentSeasonSpec {
	if m != nil {
		return m.GameContentSeason
	}
	return nil
}

func (m *ArenaSeasonSpec) GetRewardPaperPrefab() string {
	if m != nil && m.RewardPaperPrefab != nil {
		return *m.RewardPaperPrefab
	}
	return ""
}

func (m *ArenaSeasonSpec) GetRewardPaperPrefabPhone() string {
	if m != nil && m.RewardPaperPrefabPhone != nil {
		return *m.RewardPaperPrefabPhone
	}
	return ""
}

func (m *ArenaSeasonSpec) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

// ref: PegasusShared.AssetKey
type AssetKey struct {
	Type             *AssetType `protobuf:"varint,1,req,name=type,enum=pegasusshared.AssetType" json:"type,omitempty"`
	AssetId          *int32     `protobuf:"varint,2,opt,name=asset_id" json:"asset_id,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *AssetKey) Reset()         { *m = AssetKey{} }
func (m *AssetKey) String() string { return proto.CompactTextString(m) }
func (*AssetKey) ProtoMessage()    {}

func (m *AssetKey) GetType() AssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *AssetKey) GetAssetId() int32 {
	if m != nil && m.AssetId != nil {
		return *m.AssetId
	}
	return 0
}

// ref: PegasusShared.AssetRecordInfo
type AssetRecordInfo struct {
	Asset            *AssetKey `protobuf:"bytes,1,req,name=asset" json:"asset,omitempty"`
	RecordByteSize   *uint32   `protobuf:"varint,2,req,name=record_byte_size" json:"record_byte_size,omitempty"`
	RecordHash       []byte    `protobuf:"bytes,3,req,name=record_hash" json:"record_hash,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *AssetRecordInfo) Reset()         { *m = AssetRecordInfo{} }
func (m *AssetRecordInfo) String() string { return proto.CompactTextString(m) }
func (*AssetRecordInfo) ProtoMessage()    {}

func (m *AssetRecordInfo) GetAsset() *AssetKey {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *AssetRecordInfo) GetRecordByteSize() uint32 {
	if m != nil && m.RecordByteSize != nil {
		return *m.RecordByteSize
	}
	return 0
}

func (m *AssetRecordInfo) GetRecordHash() []byte {
	if m != nil {
		return m.RecordHash
	}
	return nil
}

// ref: PegasusShared.BnetId
type BnetId struct {
	Hi               *uint64 `protobuf:"varint,1,req,name=hi" json:"hi,omitempty"`
	Lo               *uint64 `protobuf:"varint,2,req,name=lo" json:"lo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BnetId) Reset()         { *m = BnetId{} }
func (m *BnetId) String() string { return proto.CompactTextString(m) }
func (*BnetId) ProtoMessage()    {}

func (m *BnetId) GetHi() uint64 {
	if m != nil && m.Hi != nil {
		return *m.Hi
	}
	return 0
}

func (m *BnetId) GetLo() uint64 {
	if m != nil && m.Lo != nil {
		return *m.Lo
	}
	return 0
}

// ref: PegasusShared.BoosterInfo
type BoosterInfo struct {
	Type             *int32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Count            *int32 `protobuf:"varint,3,req,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BoosterInfo) Reset()         { *m = BoosterInfo{} }
func (m *BoosterInfo) String() string { return proto.CompactTextString(m) }
func (*BoosterInfo) ProtoMessage()    {}

func (m *BoosterInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BoosterInfo) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

// ref: PegasusShared.BrawlDeckValidity
type BrawlDeckValidity struct {
	BrawlId          *int64 `protobuf:"varint,1,req,name=brawl_id" json:"brawl_id,omitempty"`
	ValidDeck        *bool  `protobuf:"varint,2,req,name=valid_deck" json:"valid_deck,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BrawlDeckValidity) Reset()         { *m = BrawlDeckValidity{} }
func (m *BrawlDeckValidity) String() string { return proto.CompactTextString(m) }
func (*BrawlDeckValidity) ProtoMessage()    {}

func (m *BrawlDeckValidity) GetBrawlId() int64 {
	if m != nil && m.BrawlId != nil {
		return *m.BrawlId
	}
	return 0
}

func (m *BrawlDeckValidity) GetValidDeck() bool {
	if m != nil && m.ValidDeck != nil {
		return *m.ValidDeck
	}
	return false
}

// ref: PegasusShared.CachedCard
type CachedCard struct {
	CardId           *int64 `protobuf:"varint,1,req,name=card_id" json:"card_id,omitempty"`
	AssetCardId      *int32 `protobuf:"varint,2,req,name=asset_card_id" json:"asset_card_id,omitempty"`
	UnixTimestamp    *int32 `protobuf:"varint,3,req,name=unix_timestamp" json:"unix_timestamp,omitempty"`
	IsSeen           *bool  `protobuf:"varint,4,req,name=is_seen" json:"is_seen,omitempty"`
	Premium          *int32 `protobuf:"varint,5,req,name=premium" json:"premium,omitempty"`
	InsertSource     *int32 `protobuf:"varint,6,req,name=insert_source" json:"insert_source,omitempty"`
	InsertData       *int64 `protobuf:"varint,7,req,name=insert_data" json:"insert_data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CachedCard) Reset()         { *m = CachedCard{} }
func (m *CachedCard) String() string { return proto.CompactTextString(m) }
func (*CachedCard) ProtoMessage()    {}

func (m *CachedCard) GetCardId() int64 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

func (m *CachedCard) GetAssetCardId() int32 {
	if m != nil && m.AssetCardId != nil {
		return *m.AssetCardId
	}
	return 0
}

func (m *CachedCard) GetUnixTimestamp() int32 {
	if m != nil && m.UnixTimestamp != nil {
		return *m.UnixTimestamp
	}
	return 0
}

func (m *CachedCard) GetIsSeen() bool {
	if m != nil && m.IsSeen != nil {
		return *m.IsSeen
	}
	return false
}

func (m *CachedCard) GetPremium() int32 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

func (m *CachedCard) GetInsertSource() int32 {
	if m != nil && m.InsertSource != nil {
		return *m.InsertSource
	}
	return 0
}

func (m *CachedCard) GetInsertData() int64 {
	if m != nil && m.InsertData != nil {
		return *m.InsertData
	}
	return 0
}

// ref: PegasusShared.CachedCollection
type CachedCollection struct {
	CardCollection   []*CachedCard `protobuf:"bytes,1,rep,name=card_collection" json:"card_collection,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CachedCollection) Reset()         { *m = CachedCollection{} }
func (m *CachedCollection) String() string { return proto.CompactTextString(m) }
func (*CachedCollection) ProtoMessage()    {}

func (m *CachedCollection) GetCardCollection() []*CachedCard {
	if m != nil {
		return m.CardCollection
	}
	return nil
}

// ref: PegasusShared.CardDef
type CardDef struct {
	Asset            *int32 `protobuf:"varint,1,req,name=asset" json:"asset,omitempty"`
	Premium          *int32 `protobuf:"varint,2,opt,name=premium" json:"premium,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardDef) Reset()         { *m = CardDef{} }
func (m *CardDef) String() string { return proto.CompactTextString(m) }
func (*CardDef) ProtoMessage()    {}

func (m *CardDef) GetAsset() int32 {
	if m != nil && m.Asset != nil {
		return *m.Asset
	}
	return 0
}

func (m *CardDef) GetPremium() int32 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

// ref: PegasusShared.CardStack
type CardStack struct {
	CardDef          *CardDef `protobuf:"bytes,1,req,name=card_def" json:"card_def,omitempty"`
	LatestInsertDate *Date    `protobuf:"bytes,2,req,name=latest_insert_date" json:"latest_insert_date,omitempty"`
	Count            *int32   `protobuf:"varint,3,req,name=count" json:"count,omitempty"`
	NumSeen          *int32   `protobuf:"varint,4,req,name=num_seen" json:"num_seen,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CardStack) Reset()         { *m = CardStack{} }
func (m *CardStack) String() string { return proto.CompactTextString(m) }
func (*CardStack) ProtoMessage()    {}

func (m *CardStack) GetCardDef() *CardDef {
	if m != nil {
		return m.CardDef
	}
	return nil
}

func (m *CardStack) GetLatestInsertDate() *Date {
	if m != nil {
		return m.LatestInsertDate
	}
	return nil
}

func (m *CardStack) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CardStack) GetNumSeen() int32 {
	if m != nil && m.NumSeen != nil {
		return *m.NumSeen
	}
	return 0
}

// ref: PegasusShared.DatabaseDeckCard
type DatabaseDeckCard struct {
	AssetCardId      *int32 `protobuf:"varint,1,req,name=asset_card_id" json:"asset_card_id,omitempty"`
	Premium          *int32 `protobuf:"varint,2,req,name=premium" json:"premium,omitempty"`
	Quantity         *int32 `protobuf:"varint,3,req,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DatabaseDeckCard) Reset()         { *m = DatabaseDeckCard{} }
func (m *DatabaseDeckCard) String() string { return proto.CompactTextString(m) }
func (*DatabaseDeckCard) ProtoMessage()    {}

func (m *DatabaseDeckCard) GetAssetCardId() int32 {
	if m != nil && m.AssetCardId != nil {
		return *m.AssetCardId
	}
	return 0
}

func (m *DatabaseDeckCard) GetPremium() int32 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

func (m *DatabaseDeckCard) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

// ref: PegasusShared.DatabaseDeckContent
type DatabaseDeckContent struct {
	DeckCards        []*DatabaseDeckCard `protobuf:"bytes,1,rep,name=deck_cards" json:"deck_cards,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *DatabaseDeckContent) Reset()         { *m = DatabaseDeckContent{} }
func (m *DatabaseDeckContent) String() string { return proto.CompactTextString(m) }
func (*DatabaseDeckContent) ProtoMessage()    {}

func (m *DatabaseDeckContent) GetDeckCards() []*DatabaseDeckCard {
	if m != nil {
		return m.DeckCards
	}
	return nil
}

// ref: PegasusShared.Date
type Date struct {
	Year             *int32 `protobuf:"varint,1,req,name=year" json:"year,omitempty"`
	Month            *int32 `protobuf:"varint,2,req,name=month" json:"month,omitempty"`
	Day              *int32 `protobuf:"varint,3,req,name=day" json:"day,omitempty"`
	Hours            *int32 `protobuf:"varint,4,req,name=hours" json:"hours,omitempty"`
	Min              *int32 `protobuf:"varint,5,req,name=min" json:"min,omitempty"`
	Sec              *int32 `protobuf:"varint,6,req,name=sec" json:"sec,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Date) Reset()         { *m = Date{} }
func (m *Date) String() string { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()    {}

func (m *Date) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Date) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *Date) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *Date) GetHours() int32 {
	if m != nil && m.Hours != nil {
		return *m.Hours
	}
	return 0
}

func (m *Date) GetMin() int32 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *Date) GetSec() int32 {
	if m != nil && m.Sec != nil {
		return *m.Sec
	}
	return 0
}

// ref: PegasusShared.DeckCardData
type DeckCardData struct {
	Def              *CardDef `protobuf:"bytes,1,req,name=def" json:"def,omitempty"`
	Qty              *int32   `protobuf:"varint,3,opt,name=qty" json:"qty,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DeckCardData) Reset()         { *m = DeckCardData{} }
func (m *DeckCardData) String() string { return proto.CompactTextString(m) }
func (*DeckCardData) ProtoMessage()    {}

func (m *DeckCardData) GetDef() *CardDef {
	if m != nil {
		return m.Def
	}
	return nil
}

func (m *DeckCardData) GetQty() int32 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

// ref: PegasusShared.DeckInfo
type DeckInfo struct {
	Id               *int64          `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name             *string         `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	CardBack         *int32          `protobuf:"varint,3,req,name=card_back" json:"card_back,omitempty"`
	Hero             *int32          `protobuf:"varint,4,req,name=hero" json:"hero,omitempty"`
	DeckType         *DeckType       `protobuf:"varint,5,req,name=deck_type,enum=pegasusshared.DeckType" json:"deck_type,omitempty"`
	Validity         *uint64         `protobuf:"varint,6,req,name=validity" json:"validity,omitempty"`
	HeroPremium      *int32          `protobuf:"varint,7,req,name=hero_premium" json:"hero_premium,omitempty"`
	CardBackOverride *bool           `protobuf:"varint,8,req,name=card_back_override" json:"card_back_override,omitempty"`
	HeroOverride     *bool           `protobuf:"varint,9,req,name=hero_override" json:"hero_override,omitempty"`
	LastModified     *int64          `protobuf:"varint,10,opt,name=last_modified" json:"last_modified,omitempty"`
	SeasonId         *int32          `protobuf:"varint,11,opt,name=season_id" json:"season_id,omitempty"`
	SortOrder        *int64          `protobuf:"varint,12,opt,name=sort_order" json:"sort_order,omitempty"`
	CreateDate       *int64          `protobuf:"varint,13,opt,name=create_date" json:"create_date,omitempty"`
	SourceType       *DeckSourceType `protobuf:"varint,14,opt,name=source_type,enum=pegasusshared.DeckSourceType,def=0" json:"source_type,omitempty"`
	PastedDeckHash   *string         `protobuf:"bytes,15,opt,name=pasted_deck_hash" json:"pasted_deck_hash,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DeckInfo) Reset()         { *m = DeckInfo{} }
func (m *DeckInfo) String() string { return proto.CompactTextString(m) }
func (*DeckInfo) ProtoMessage()    {}

const Default_DeckInfo_SourceType DeckSourceType = DeckSourceType_DECK_SOURCE_TYPE_UNKNOWN

func (m *DeckInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeckInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DeckInfo) GetCardBack() int32 {
	if m != nil && m.CardBack != nil {
		return *m.CardBack
	}
	return 0
}

func (m *DeckInfo) GetHero() int32 {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return 0
}

func (m *DeckInfo) GetDeckType() DeckType {
	if m != nil && m.DeckType != nil {
		return *m.DeckType
	}
	return 0
}

func (m *DeckInfo) GetValidity() uint64 {
	if m != nil && m.Validity != nil {
		return *m.Validity
	}
	return 0
}

func (m *DeckInfo) GetHeroPremium() int32 {
	if m != nil && m.HeroPremium != nil {
		return *m.HeroPremium
	}
	return 0
}

func (m *DeckInfo) GetCardBackOverride() bool {
	if m != nil && m.CardBackOverride != nil {
		return *m.CardBackOverride
	}
	return false
}

func (m *DeckInfo) GetHeroOverride() bool {
	if m != nil && m.HeroOverride != nil {
		return *m.HeroOverride
	}
	return false
}

func (m *DeckInfo) GetLastModified() int64 {
	if m != nil && m.LastModified != nil {
		return *m.LastModified
	}
	return 0
}

func (m *DeckInfo) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *DeckInfo) GetSortOrder() int64 {
	if m != nil && m.SortOrder != nil {
		return *m.SortOrder
	}
	return 0
}

func (m *DeckInfo) GetCreateDate() int64 {
	if m != nil && m.CreateDate != nil {
		return *m.CreateDate
	}
	return 0
}

func (m *DeckInfo) GetSourceType() DeckSourceType {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return Default_DeckInfo_SourceType
}

func (m *DeckInfo) GetPastedDeckHash() string {
	if m != nil && m.PastedDeckHash != nil {
		return *m.PastedDeckHash
	}
	return ""
}

// ref: PegasusShared.DeckRulesetDbRecord
type DeckRulesetDbRecord struct {
	Id               *int32                     `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Rules            []*DeckRulesetRuleDbRecord `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *DeckRulesetDbRecord) Reset()         { *m = DeckRulesetDbRecord{} }
func (m *DeckRulesetDbRecord) String() string { return proto.CompactTextString(m) }
func (*DeckRulesetDbRecord) ProtoMessage()    {}

func (m *DeckRulesetDbRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeckRulesetDbRecord) GetRules() []*DeckRulesetRuleDbRecord {
	if m != nil {
		return m.Rules
	}
	return nil
}

// ref: PegasusShared.DeckRulesetRuleDbRecord
type DeckRulesetRuleDbRecord struct {
	Id                *int32             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	DeckRulesetId     *int32             `protobuf:"varint,2,req,name=deck_ruleset_id" json:"deck_ruleset_id,omitempty"`
	AppliesToSubsetId *int32             `protobuf:"varint,3,opt,name=applies_to_subset_id" json:"applies_to_subset_id,omitempty"`
	AppliesToIsNot    *bool              `protobuf:"varint,4,opt,name=applies_to_is_not" json:"applies_to_is_not,omitempty"`
	RuleType          *string            `protobuf:"bytes,5,req,name=rule_type" json:"rule_type,omitempty"`
	RuleIsNot         *bool              `protobuf:"varint,6,req,name=rule_is_not" json:"rule_is_not,omitempty"`
	MinValue          *int32             `protobuf:"varint,7,opt,name=min_value" json:"min_value,omitempty"`
	MaxValue          *int32             `protobuf:"varint,8,opt,name=max_value" json:"max_value,omitempty"`
	Tag               *int32             `protobuf:"varint,9,opt,name=tag" json:"tag,omitempty"`
	TagMinValue       *int32             `protobuf:"varint,10,opt,name=tag_min_value" json:"tag_min_value,omitempty"`
	TagMaxValue       *int32             `protobuf:"varint,11,opt,name=tag_max_value" json:"tag_max_value,omitempty"`
	StringValue       *string            `protobuf:"bytes,12,opt,name=string_value" json:"string_value,omitempty"`
	TargetSubsetIds   []int32            `protobuf:"varint,13,rep,name=target_subset_ids" json:"target_subset_ids,omitempty"`
	Strings           []*LocalizedString `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *DeckRulesetRuleDbRecord) Reset()         { *m = DeckRulesetRuleDbRecord{} }
func (m *DeckRulesetRuleDbRecord) String() string { return proto.CompactTextString(m) }
func (*DeckRulesetRuleDbRecord) ProtoMessage()    {}

func (m *DeckRulesetRuleDbRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetDeckRulesetId() int32 {
	if m != nil && m.DeckRulesetId != nil {
		return *m.DeckRulesetId
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetAppliesToSubsetId() int32 {
	if m != nil && m.AppliesToSubsetId != nil {
		return *m.AppliesToSubsetId
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetAppliesToIsNot() bool {
	if m != nil && m.AppliesToIsNot != nil {
		return *m.AppliesToIsNot
	}
	return false
}

func (m *DeckRulesetRuleDbRecord) GetRuleType() string {
	if m != nil && m.RuleType != nil {
		return *m.RuleType
	}
	return ""
}

func (m *DeckRulesetRuleDbRecord) GetRuleIsNot() bool {
	if m != nil && m.RuleIsNot != nil {
		return *m.RuleIsNot
	}
	return false
}

func (m *DeckRulesetRuleDbRecord) GetMinValue() int32 {
	if m != nil && m.MinValue != nil {
		return *m.MinValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetMaxValue() int32 {
	if m != nil && m.MaxValue != nil {
		return *m.MaxValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTag() int32 {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTagMinValue() int32 {
	if m != nil && m.TagMinValue != nil {
		return *m.TagMinValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTagMaxValue() int32 {
	if m != nil && m.TagMaxValue != nil {
		return *m.TagMaxValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *DeckRulesetRuleDbRecord) GetTargetSubsetIds() []int32 {
	if m != nil {
		return m.TargetSubsetIds
	}
	return nil
}

func (m *DeckRulesetRuleDbRecord) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

// ref: PegasusShared.DeckRulesetValidationResults
type DeckRulesetValidationResults struct {
	DeckRulesetId    *int32                  `protobuf:"varint,1,req,name=deck_ruleset_id,def=0" json:"deck_ruleset_id,omitempty"`
	ErrorCode        *ErrorCode              `protobuf:"varint,2,opt,name=error_code,enum=pegasusshared.ErrorCode,def=0" json:"error_code,omitempty"`
	Violations       []*DeckRulesetViolation `protobuf:"bytes,3,rep,name=violations" json:"violations,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *DeckRulesetValidationResults) Reset()         { *m = DeckRulesetValidationResults{} }
func (m *DeckRulesetValidationResults) String() string { return proto.CompactTextString(m) }
func (*DeckRulesetValidationResults) ProtoMessage()    {}

const Default_DeckRulesetValidationResults_DeckRulesetId int32 = 0
const Default_DeckRulesetValidationResults_ErrorCode ErrorCode = ErrorCode_ERROR_OK

func (m *DeckRulesetValidationResults) GetDeckRulesetId() int32 {
	if m != nil && m.DeckRulesetId != nil {
		return *m.DeckRulesetId
	}
	return Default_DeckRulesetValidationResults_DeckRulesetId
}

func (m *DeckRulesetValidationResults) GetErrorCode() ErrorCode {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Default_DeckRulesetValidationResults_ErrorCode
}

func (m *DeckRulesetValidationResults) GetViolations() []*DeckRulesetViolation {
	if m != nil {
		return m.Violations
	}
	return nil
}

// ref: PegasusShared.DeckRulesetViolation
type DeckRulesetViolation struct {
	Card             *CardDef `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	Count            *int32   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	DeckRuleId       *int32   `protobuf:"varint,100,req,name=deck_rule_id" json:"deck_rule_id,omitempty"`
	DeckRuleDesc     *string  `protobuf:"bytes,101,opt,name=deck_rule_desc" json:"deck_rule_desc,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DeckRulesetViolation) Reset()         { *m = DeckRulesetViolation{} }
func (m *DeckRulesetViolation) String() string { return proto.CompactTextString(m) }
func (*DeckRulesetViolation) ProtoMessage()    {}

func (m *DeckRulesetViolation) GetCard() *CardDef {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *DeckRulesetViolation) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *DeckRulesetViolation) GetDeckRuleId() int32 {
	if m != nil && m.DeckRuleId != nil {
		return *m.DeckRuleId
	}
	return 0
}

func (m *DeckRulesetViolation) GetDeckRuleDesc() string {
	if m != nil && m.DeckRuleDesc != nil {
		return *m.DeckRuleDesc
	}
	return ""
}

// ref: PegasusShared.FavoriteHero
type FavoriteHero struct {
	ClassId          *int32   `protobuf:"varint,1,req,name=class_id" json:"class_id,omitempty"`
	Hero             *CardDef `protobuf:"bytes,2,req,name=hero" json:"hero,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FavoriteHero) Reset()         { *m = FavoriteHero{} }
func (m *FavoriteHero) String() string { return proto.CompactTextString(m) }
func (*FavoriteHero) ProtoMessage()    {}

func (m *FavoriteHero) GetClassId() int32 {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return 0
}

func (m *FavoriteHero) GetHero() *CardDef {
	if m != nil {
		return m.Hero
	}
	return nil
}

// ref: PegasusShared.FSGConfig
type FSGConfig struct {
	FsgId                  *int64          `protobuf:"varint,1,req,name=fsg_id" json:"fsg_id,omitempty"`
	UnixStartTimeWithSlush *int64          `protobuf:"varint,2,req,name=unix_start_time_with_slush" json:"unix_start_time_with_slush,omitempty"`
	UnixEndTimeWithSlush   *int64          `protobuf:"varint,3,req,name=unix_end_time_with_slush" json:"unix_end_time_with_slush,omitempty"`
	TavernName             *string         `protobuf:"bytes,4,req,name=tavern_name" json:"tavern_name,omitempty"`
	SignData               *TavernSignData `protobuf:"bytes,5,req,name=sign_data" json:"sign_data,omitempty"`
	UnixOfficialStartTime  *int64          `protobuf:"varint,6,req,name=unix_official_start_time" json:"unix_official_start_time,omitempty"`
	PatronCount            *int64          `protobuf:"varint,7,req,name=patron_count" json:"patron_count,omitempty"`
	IsInnkeeper            *bool           `protobuf:"varint,8,opt,name=is_innkeeper" json:"is_innkeeper,omitempty"`
	IsSetupComplete        *bool           `protobuf:"varint,9,opt,name=is_setup_complete" json:"is_setup_complete,omitempty"`
	UnixOfficialEndTime    *int64          `protobuf:"varint,10,req,name=unix_official_end_time" json:"unix_official_end_time,omitempty"`
	FsgInnkeeperAccountId  *BnetId         `protobuf:"bytes,11,req,name=fsg_innkeeper_account_id" json:"fsg_innkeeper_account_id,omitempty"`
	IsLargeScaleFsg        *bool           `protobuf:"varint,12,opt,name=is_large_scale_fsg" json:"is_large_scale_fsg,omitempty"`
	FsgName                *string         `protobuf:"bytes,13,opt,name=fsg_name" json:"fsg_name,omitempty"`
	TavernId               *int64          `protobuf:"varint,14,opt,name=tavern_id" json:"tavern_id,omitempty"`
	XXX_unrecognized       []byte          `json:"-"`
}

func (m *FSGConfig) Reset()         { *m = FSGConfig{} }
func (m *FSGConfig) String() string { return proto.CompactTextString(m) }
func (*FSGConfig) ProtoMessage()    {}

func (m *FSGConfig) GetFsgId() int64 {
	if m != nil && m.FsgId != nil {
		return *m.FsgId
	}
	return 0
}

func (m *FSGConfig) GetUnixStartTimeWithSlush() int64 {
	if m != nil && m.UnixStartTimeWithSlush != nil {
		return *m.UnixStartTimeWithSlush
	}
	return 0
}

func (m *FSGConfig) GetUnixEndTimeWithSlush() int64 {
	if m != nil && m.UnixEndTimeWithSlush != nil {
		return *m.UnixEndTimeWithSlush
	}
	return 0
}

func (m *FSGConfig) GetTavernName() string {
	if m != nil && m.TavernName != nil {
		return *m.TavernName
	}
	return ""
}

func (m *FSGConfig) GetSignData() *TavernSignData {
	if m != nil {
		return m.SignData
	}
	return nil
}

func (m *FSGConfig) GetUnixOfficialStartTime() int64 {
	if m != nil && m.UnixOfficialStartTime != nil {
		return *m.UnixOfficialStartTime
	}
	return 0
}

func (m *FSGConfig) GetPatronCount() int64 {
	if m != nil && m.PatronCount != nil {
		return *m.PatronCount
	}
	return 0
}

func (m *FSGConfig) GetIsInnkeeper() bool {
	if m != nil && m.IsInnkeeper != nil {
		return *m.IsInnkeeper
	}
	return false
}

func (m *FSGConfig) GetIsSetupComplete() bool {
	if m != nil && m.IsSetupComplete != nil {
		return *m.IsSetupComplete
	}
	return false
}

func (m *FSGConfig) GetUnixOfficialEndTime() int64 {
	if m != nil && m.UnixOfficialEndTime != nil {
		return *m.UnixOfficialEndTime
	}
	return 0
}

func (m *FSGConfig) GetFsgInnkeeperAccountId() *BnetId {
	if m != nil {
		return m.FsgInnkeeperAccountId
	}
	return nil
}

func (m *FSGConfig) GetIsLargeScaleFsg() bool {
	if m != nil && m.IsLargeScaleFsg != nil {
		return *m.IsLargeScaleFsg
	}
	return false
}

func (m *FSGConfig) GetFsgName() string {
	if m != nil && m.FsgName != nil {
		return *m.FsgName
	}
	return ""
}

func (m *FSGConfig) GetTavernId() int64 {
	if m != nil && m.TavernId != nil {
		return *m.TavernId
	}
	return 0
}

// ref: PegasusShared.FSGPatron
type FSGPatron struct {
	GameAccount      *BnetId `protobuf:"bytes,1,req,name=game_account" json:"game_account,omitempty"`
	BnetAccount      *BnetId `protobuf:"bytes,2,req,name=bnet_account" json:"bnet_account,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FSGPatron) Reset()         { *m = FSGPatron{} }
func (m *FSGPatron) String() string { return proto.CompactTextString(m) }
func (*FSGPatron) ProtoMessage()    {}

func (m *FSGPatron) GetGameAccount() *BnetId {
	if m != nil {
		return m.GameAccount
	}
	return nil
}

func (m *FSGPatron) GetBnetAccount() *BnetId {
	if m != nil {
		return m.BnetAccount
	}
	return nil
}

// ref: PegasusShared.GameContentSeasonSpec
type GameContentSeasonSpec struct {
	EndSecondsFromNow                 *uint64            `protobuf:"varint,1,opt,name=end_seconds_from_now" json:"end_seconds_from_now,omitempty"`
	ScenarioId                        *int32             `protobuf:"varint,2,req,name=scenario_id" json:"scenario_id,omitempty"`
	ScenarioRecordByteSize            *uint32            `protobuf:"varint,3,req,name=scenario_record_byte_size" json:"scenario_record_byte_size,omitempty"`
	ScenarioRecordHash                []byte             `protobuf:"bytes,4,req,name=scenario_record_hash" json:"scenario_record_hash,omitempty"`
	RewardType                        *RewardType        `protobuf:"varint,5,req,name=reward_type,enum=pegasusshared.RewardType" json:"reward_type,omitempty"`
	RewardData1                       *int64             `protobuf:"varint,6,req,name=reward_data1" json:"reward_data1,omitempty"`
	RewardData2                       *int64             `protobuf:"varint,7,req,name=reward_data2" json:"reward_data2,omitempty"`
	RewardTrigger                     *RewardTrigger     `protobuf:"varint,8,opt,name=reward_trigger,enum=pegasusshared.RewardTrigger,def=0" json:"reward_trigger,omitempty"`
	FormatType                        *FormatType        `protobuf:"varint,9,opt,name=format_type,enum=pegasusshared.FormatType,def=0" json:"format_type,omitempty"`
	SeasonId                          *int32             `protobuf:"varint,11,req,name=season_id" json:"season_id,omitempty"`
	TicketType                        *int32             `protobuf:"varint,12,opt,name=ticket_type" json:"ticket_type,omitempty"`
	MaxWins                           *int32             `protobuf:"varint,13,opt,name=max_wins" json:"max_wins,omitempty"`
	MaxLosses                         *int32             `protobuf:"varint,14,opt,name=max_losses" json:"max_losses,omitempty"`
	ClosedToNewSessionsSecondsFromNow *uint64            `protobuf:"varint,15,opt,name=closed_to_new_sessions_seconds_from_now" json:"closed_to_new_sessions_seconds_from_now,omitempty"`
	MaxSessions                       *int32             `protobuf:"varint,16,opt,name=max_sessions" json:"max_sessions,omitempty"`
	FriendlyChallengeDisabled         *bool              `protobuf:"varint,17,opt,name=friendly_challenge_disabled" json:"friendly_challenge_disabled,omitempty"`
	SeasonEndSecondSpreadCount        *int32             `protobuf:"varint,18,opt,name=season_end_second_spread_count" json:"season_end_second_spread_count,omitempty"`
	FirstTimeSeenDialogId             *int32             `protobuf:"varint,19,opt,name=first_time_seen_dialog_id" json:"first_time_seen_dialog_id,omitempty"`
	RewardTriggerQuota                *int32             `protobuf:"varint,20,opt,name=reward_trigger_quota" json:"reward_trigger_quota,omitempty"`
	AdditionalAssets                  []*AssetRecordInfo `protobuf:"bytes,100,rep,name=additional_assets" json:"additional_assets,omitempty"`
	XXX_unrecognized                  []byte             `json:"-"`
}

func (m *GameContentSeasonSpec) Reset()         { *m = GameContentSeasonSpec{} }
func (m *GameContentSeasonSpec) String() string { return proto.CompactTextString(m) }
func (*GameContentSeasonSpec) ProtoMessage()    {}

const Default_GameContentSeasonSpec_RewardTrigger RewardTrigger = RewardTrigger_REWARD_TRIGGER_UNKNOWN
const Default_GameContentSeasonSpec_FormatType FormatType = FormatType_FT_UNKNOWN

func (m *GameContentSeasonSpec) GetEndSecondsFromNow() uint64 {
	if m != nil && m.EndSecondsFromNow != nil {
		return *m.EndSecondsFromNow
	}
	return 0
}

func (m *GameContentSeasonSpec) GetScenarioId() int32 {
	if m != nil && m.ScenarioId != nil {
		return *m.ScenarioId
	}
	return 0
}

func (m *GameContentSeasonSpec) GetScenarioRecordByteSize() uint32 {
	if m != nil && m.ScenarioRecordByteSize != nil {
		return *m.ScenarioRecordByteSize
	}
	return 0
}

func (m *GameContentSeasonSpec) GetScenarioRecordHash() []byte {
	if m != nil {
		return m.ScenarioRecordHash
	}
	return nil
}

func (m *GameContentSeasonSpec) GetRewardType() RewardType {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return 0
}

func (m *GameContentSeasonSpec) GetRewardData1() int64 {
	if m != nil && m.RewardData1 != nil {
		return *m.RewardData1
	}
	return 0
}

func (m *GameContentSeasonSpec) GetRewardData2() int64 {
	if m != nil && m.RewardData2 != nil {
		return *m.RewardData2
	}
	return 0
}

func (m *GameContentSeasonSpec) GetRewardTrigger() RewardTrigger {
	if m != nil && m.RewardTrigger != nil {
		return *m.RewardTrigger
	}
	return Default_GameContentSeasonSpec_RewardTrigger
}

func (m *GameContentSeasonSpec) GetFormatType() FormatType {
	if m != nil && m.FormatType != nil {
		return *m.FormatType
	}
	return Default_GameContentSeasonSpec_FormatType
}

func (m *GameContentSeasonSpec) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *GameContentSeasonSpec) GetTicketType() int32 {
	if m != nil && m.TicketType != nil {
		return *m.TicketType
	}
	return 0
}

func (m *GameContentSeasonSpec) GetMaxWins() int32 {
	if m != nil && m.MaxWins != nil {
		return *m.MaxWins
	}
	return 0
}

func (m *GameContentSeasonSpec) GetMaxLosses() int32 {
	if m != nil && m.MaxLosses != nil {
		return *m.MaxLosses
	}
	return 0
}

func (m *GameContentSeasonSpec) GetClosedToNewSessionsSecondsFromNow() uint64 {
	if m != nil && m.ClosedToNewSessionsSecondsFromNow != nil {
		return *m.ClosedToNewSessionsSecondsFromNow
	}
	return 0
}

func (m *GameContentSeasonSpec) GetMaxSessions() int32 {
	if m != nil && m.MaxSessions != nil {
		return *m.MaxSessions
	}
	return 0
}

func (m *GameContentSeasonSpec) GetFriendlyChallengeDisabled() bool {
	if m != nil && m.FriendlyChallengeDisabled != nil {
		return *m.FriendlyChallengeDisabled
	}
	return false
}

func (m *GameContentSeasonSpec) GetSeasonEndSecondSpreadCount() int32 {
	if m != nil && m.SeasonEndSecondSpreadCount != nil {
		return *m.SeasonEndSecondSpreadCount
	}
	return 0
}

func (m *GameContentSeasonSpec) GetFirstTimeSeenDialogId() int32 {
	if m != nil && m.FirstTimeSeenDialogId != nil {
		return *m.FirstTimeSeenDialogId
	}
	return 0
}

func (m *GameContentSeasonSpec) GetRewardTriggerQuota() int32 {
	if m != nil && m.RewardTriggerQuota != nil {
		return *m.RewardTriggerQuota
	}
	return 0
}

func (m *GameContentSeasonSpec) GetAdditionalAssets() []*AssetRecordInfo {
	if m != nil {
		return m.AdditionalAssets
	}
	return nil
}

// ref: PegasusShared.GameSaveDataUpdate
type GameSaveDataUpdate struct {
	EventType        *EventType         `protobuf:"varint,1,req,name=event_type,enum=pegasusshared.EventType,def=0" json:"event_type,omitempty"`
	OwnerType        *GameSaveOwnerType `protobuf:"varint,2,opt,name=owner_type,enum=pegasusshared.GameSaveOwnerType,def=0" json:"owner_type,omitempty"`
	OwnerId          *int64             `protobuf:"varint,3,opt,name=owner_id" json:"owner_id,omitempty"`
	Tuple            []*GameSaveKey     `protobuf:"bytes,4,rep,name=tuple" json:"tuple,omitempty"`
	Value            *GameSaveDataValue `protobuf:"bytes,100,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *GameSaveDataUpdate) Reset()         { *m = GameSaveDataUpdate{} }
func (m *GameSaveDataUpdate) String() string { return proto.CompactTextString(m) }
func (*GameSaveDataUpdate) ProtoMessage()    {}

const Default_GameSaveDataUpdate_EventType EventType = EventType_EVT_NONE
const Default_GameSaveDataUpdate_OwnerType GameSaveOwnerType = GameSaveOwnerType_GAME_SAVE_OWNER_TYPE_UNKNOWN

func (m *GameSaveDataUpdate) GetEventType() EventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return Default_GameSaveDataUpdate_EventType
}

func (m *GameSaveDataUpdate) GetOwnerType() GameSaveOwnerType {
	if m != nil && m.OwnerType != nil {
		return *m.OwnerType
	}
	return Default_GameSaveDataUpdate_OwnerType
}

func (m *GameSaveDataUpdate) GetOwnerId() int64 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

func (m *GameSaveDataUpdate) GetTuple() []*GameSaveKey {
	if m != nil {
		return m.Tuple
	}
	return nil
}

func (m *GameSaveDataUpdate) GetValue() *GameSaveDataValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// ref: PegasusShared.GameSaveDataValue
type GameSaveDataValue struct {
	IntValue                []int64              `protobuf:"varint,1,rep,name=int_value" json:"int_value,omitempty"`
	FloatValue              []float64            `protobuf:"fixed64,2,rep,name=float_value" json:"float_value,omitempty"`
	StringValue             []string             `protobuf:"bytes,3,rep,name=string_value" json:"string_value,omitempty"`
	MapKeys                 []int64              `protobuf:"varint,10,rep,name=map_keys" json:"map_keys,omitempty"`
	MapValues               []*GameSaveDataValue `protobuf:"bytes,11,rep,name=map_values" json:"map_values,omitempty"`
	CreateDateUnixTimestamp *int64               `protobuf:"varint,1000,opt,name=create_date_unix_timestamp" json:"create_date_unix_timestamp,omitempty"`
	ModifyDateUnixTimestamp *int64               `protobuf:"varint,1001,opt,name=modify_date_unix_timestamp" json:"modify_date_unix_timestamp,omitempty"`
	XXX_unrecognized        []byte               `json:"-"`
}

func (m *GameSaveDataValue) Reset()         { *m = GameSaveDataValue{} }
func (m *GameSaveDataValue) String() string { return proto.CompactTextString(m) }
func (*GameSaveDataValue) ProtoMessage()    {}

func (m *GameSaveDataValue) GetIntValue() []int64 {
	if m != nil {
		return m.IntValue
	}
	return nil
}

func (m *GameSaveDataValue) GetFloatValue() []float64 {
	if m != nil {
		return m.FloatValue
	}
	return nil
}

func (m *GameSaveDataValue) GetStringValue() []string {
	if m != nil {
		return m.StringValue
	}
	return nil
}

func (m *GameSaveDataValue) GetMapKeys() []int64 {
	if m != nil {
		return m.MapKeys
	}
	return nil
}

func (m *GameSaveDataValue) GetMapValues() []*GameSaveDataValue {
	if m != nil {
		return m.MapValues
	}
	return nil
}

func (m *GameSaveDataValue) GetCreateDateUnixTimestamp() int64 {
	if m != nil && m.CreateDateUnixTimestamp != nil {
		return *m.CreateDateUnixTimestamp
	}
	return 0
}

func (m *GameSaveDataValue) GetModifyDateUnixTimestamp() int64 {
	if m != nil && m.ModifyDateUnixTimestamp != nil {
		return *m.ModifyDateUnixTimestamp
	}
	return 0
}

// ref: PegasusShared.GameSaveKey
type GameSaveKey struct {
	Id               *int64  `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GameSaveKey) Reset()         { *m = GameSaveKey{} }
func (m *GameSaveKey) String() string { return proto.CompactTextString(m) }
func (*GameSaveKey) ProtoMessage()    {}

func (m *GameSaveKey) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *GameSaveKey) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// ref: PegasusShared.GPSCoords
type GPSCoords struct {
	Latitude         *float64 `protobuf:"fixed64,1,req,name=latitude" json:"latitude,omitempty"`
	Longitude        *float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	Accuracy         *float64 `protobuf:"fixed64,3,opt,name=accuracy" json:"accuracy,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GPSCoords) Reset()         { *m = GPSCoords{} }
func (m *GPSCoords) String() string { return proto.CompactTextString(m) }
func (*GPSCoords) ProtoMessage()    {}

func (m *GPSCoords) GetLatitude() float64 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *GPSCoords) GetLongitude() float64 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *GPSCoords) GetAccuracy() float64 {
	if m != nil && m.Accuracy != nil {
		return *m.Accuracy
	}
	return 0
}

// ref: PegasusShared.LocalizedString
type LocalizedString struct {
	Key              *string                 `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	DeprecatedValue  *string                 `protobuf:"bytes,2,opt,name=deprecated_value" json:"deprecated_value,omitempty"`
	DeprecatedLocale *int32                  `protobuf:"varint,3,opt,name=deprecated_locale" json:"deprecated_locale,omitempty"`
	Values           []*LocalizedStringValue `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *LocalizedString) Reset()         { *m = LocalizedString{} }
func (m *LocalizedString) String() string { return proto.CompactTextString(m) }
func (*LocalizedString) ProtoMessage()    {}

func (m *LocalizedString) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LocalizedString) GetDeprecatedValue() string {
	if m != nil && m.DeprecatedValue != nil {
		return *m.DeprecatedValue
	}
	return ""
}

func (m *LocalizedString) GetDeprecatedLocale() int32 {
	if m != nil && m.DeprecatedLocale != nil {
		return *m.DeprecatedLocale
	}
	return 0
}

func (m *LocalizedString) GetValues() []*LocalizedStringValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// ref: PegasusShared.LocalizedStringValue
type LocalizedStringValue struct {
	Locale           *int32  `protobuf:"varint,1,req,name=locale" json:"locale,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LocalizedStringValue) Reset()         { *m = LocalizedStringValue{} }
func (m *LocalizedStringValue) String() string { return proto.CompactTextString(m) }
func (*LocalizedStringValue) ProtoMessage()    {}

func (m *LocalizedStringValue) GetLocale() int32 {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return 0
}

func (m *LocalizedStringValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// ref: PegasusShared.Platform
type Platform struct {
	Os                     *int32  `protobuf:"varint,1,req,name=os" json:"os,omitempty"`
	Screen                 *int32  `protobuf:"varint,2,req,name=screen" json:"screen,omitempty"`
	Name                   *string `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	Store                  *int32  `protobuf:"varint,4,opt,name=store" json:"store,omitempty"`
	UniqueDeviceIdentifier *string `protobuf:"bytes,5,opt,name=unique_device_identifier" json:"unique_device_identifier,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *Platform) Reset()         { *m = Platform{} }
func (m *Platform) String() string { return proto.CompactTextString(m) }
func (*Platform) ProtoMessage()    {}

func (m *Platform) GetOs() int32 {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return 0
}

func (m *Platform) GetScreen() int32 {
	if m != nil && m.Screen != nil {
		return *m.Screen
	}
	return 0
}

func (m *Platform) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Platform) GetStore() int32 {
	if m != nil && m.Store != nil {
		return *m.Store
	}
	return 0
}

func (m *Platform) GetUniqueDeviceIdentifier() string {
	if m != nil && m.UniqueDeviceIdentifier != nil {
		return *m.UniqueDeviceIdentifier
	}
	return ""
}

// ref: PegasusShared.PlayerIdentity
type PlayerIdentity struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=player_id" json:"player_id,omitempty"`
	GameAccount      *BnetId `protobuf:"bytes,2,opt,name=game_account" json:"game_account,omitempty"`
	Account          *BnetId `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerIdentity) Reset()         { *m = PlayerIdentity{} }
func (m *PlayerIdentity) String() string { return proto.CompactTextString(m) }
func (*PlayerIdentity) ProtoMessage()    {}

func (m *PlayerIdentity) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerIdentity) GetGameAccount() *BnetId {
	if m != nil {
		return m.GameAccount
	}
	return nil
}

func (m *PlayerIdentity) GetAccount() *BnetId {
	if m != nil {
		return m.Account
	}
	return nil
}

// ref: PegasusShared.PlayQueueInfo
type PlayQueueInfo struct {
	GameType         *BnetGameType `protobuf:"varint,1,req,name=game_type,enum=pegasusshared.BnetGameType" json:"game_type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PlayQueueInfo) Reset()         { *m = PlayQueueInfo{} }
func (m *PlayQueueInfo) String() string { return proto.CompactTextString(m) }
func (*PlayQueueInfo) ProtoMessage()    {}

func (m *PlayQueueInfo) GetGameType() BnetGameType {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeAccountLicense
type ProfileNoticeAccountLicense struct {
	License          *int64 `protobuf:"varint,1,req,name=license" json:"license,omitempty"`
	CasId            *int64 `protobuf:"varint,2,req,name=cas_id" json:"cas_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeAccountLicense) Reset()         { *m = ProfileNoticeAccountLicense{} }
func (m *ProfileNoticeAccountLicense) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeAccountLicense) ProtoMessage()    {}

func (m *ProfileNoticeAccountLicense) GetLicense() int64 {
	if m != nil && m.License != nil {
		return *m.License
	}
	return 0
}

func (m *ProfileNoticeAccountLicense) GetCasId() int64 {
	if m != nil && m.CasId != nil {
		return *m.CasId
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeAdventureProgress
type ProfileNoticeAdventureProgress struct {
	WingId           *int32 `protobuf:"varint,1,req,name=wing_id" json:"wing_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeAdventureProgress) Reset()         { *m = ProfileNoticeAdventureProgress{} }
func (m *ProfileNoticeAdventureProgress) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeAdventureProgress) ProtoMessage()    {}

func (m *ProfileNoticeAdventureProgress) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeBonusStars
type ProfileNoticeBonusStars struct {
	StarLevel        *int32 `protobuf:"varint,1,req,name=star_level" json:"star_level,omitempty"`
	Stars            *int32 `protobuf:"varint,2,req,name=stars" json:"stars,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeBonusStars) Reset()         { *m = ProfileNoticeBonusStars{} }
func (m *ProfileNoticeBonusStars) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeBonusStars) ProtoMessage()    {}

func (m *ProfileNoticeBonusStars) GetStarLevel() int32 {
	if m != nil && m.StarLevel != nil {
		return *m.StarLevel
	}
	return 0
}

func (m *ProfileNoticeBonusStars) GetStars() int32 {
	if m != nil && m.Stars != nil {
		return *m.Stars
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeCardBack
type ProfileNoticeCardBack struct {
	CardBack         *int32 `protobuf:"varint,1,req,name=card_back" json:"card_back,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeCardBack) Reset()         { *m = ProfileNoticeCardBack{} }
func (m *ProfileNoticeCardBack) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeCardBack) ProtoMessage()    {}

func (m *ProfileNoticeCardBack) GetCardBack() int32 {
	if m != nil && m.CardBack != nil {
		return *m.CardBack
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult
type ProfileNoticeDisconnectedGameResult struct {
	GameType         *GameType                                         `protobuf:"varint,8,opt,name=game_type,enum=pegasusshared.GameType,def=0" json:"game_type,omitempty"`
	MissionId        *int32                                            `protobuf:"varint,9,opt,name=mission_id" json:"mission_id,omitempty"`
	GameResult       *ProfileNoticeDisconnectedGameResult_GameResult   `protobuf:"varint,10,opt,name=game_result,enum=pegasusshared.ProfileNoticeDisconnectedGameResult_GameResult,def=0" json:"game_result,omitempty"`
	YourResult       *ProfileNoticeDisconnectedGameResult_PlayerResult `protobuf:"varint,11,opt,name=your_result,enum=pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult,def=0" json:"your_result,omitempty"`
	OpponentResult   *ProfileNoticeDisconnectedGameResult_PlayerResult `protobuf:"varint,12,opt,name=opponent_result,enum=pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult,def=0" json:"opponent_result,omitempty"`
	FormatType       *FormatType                                       `protobuf:"varint,13,opt,name=format_type,enum=pegasusshared.FormatType,def=0" json:"format_type,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *ProfileNoticeDisconnectedGameResult) Reset()         { *m = ProfileNoticeDisconnectedGameResult{} }
func (m *ProfileNoticeDisconnectedGameResult) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeDisconnectedGameResult) ProtoMessage()    {}

const Default_ProfileNoticeDisconnectedGameResult_GameType GameType = GameType_GT_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_GameResult ProfileNoticeDisconnectedGameResult_GameResult = ProfileNoticeDisconnectedGameResult_GR_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_YourResult ProfileNoticeDisconnectedGameResult_PlayerResult = ProfileNoticeDisconnectedGameResult_PR_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_OpponentResult ProfileNoticeDisconnectedGameResult_PlayerResult = ProfileNoticeDisconnectedGameResult_PR_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_FormatType FormatType = FormatType_FT_UNKNOWN

func (m *ProfileNoticeDisconnectedGameResult) GetGameType() GameType {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return Default_ProfileNoticeDisconnectedGameResult_GameType
}

func (m *ProfileNoticeDisconnectedGameResult) GetMissionId() int32 {
	if m != nil && m.MissionId != nil {
		return *m.MissionId
	}
	return 0
}

func (m *ProfileNoticeDisconnectedGameResult) GetGameResult() ProfileNoticeDisconnectedGameResult_GameResult {
	if m != nil && m.GameResult != nil {
		return *m.GameResult
	}
	return Default_ProfileNoticeDisconnectedGameResult_GameResult
}

func (m *ProfileNoticeDisconnectedGameResult) GetYourResult() ProfileNoticeDisconnectedGameResult_PlayerResult {
	if m != nil && m.YourResult != nil {
		return *m.YourResult
	}
	return Default_ProfileNoticeDisconnectedGameResult_YourResult
}

func (m *ProfileNoticeDisconnectedGameResult) GetOpponentResult() ProfileNoticeDisconnectedGameResult_PlayerResult {
	if m != nil && m.OpponentResult != nil {
		return *m.OpponentResult
	}
	return Default_ProfileNoticeDisconnectedGameResult_OpponentResult
}

func (m *ProfileNoticeDisconnectedGameResult) GetFormatType() FormatType {
	if m != nil && m.FormatType != nil {
		return *m.FormatType
	}
	return Default_ProfileNoticeDisconnectedGameResult_FormatType
}

// ref: PegasusShared.ProfileNoticeGenericRewardChest
type ProfileNoticeGenericRewardChest struct {
	RewardChestAssetId  *int32       `protobuf:"varint,1,req,name=reward_chest_asset_id" json:"reward_chest_asset_id,omitempty"`
	RewardChest         *RewardChest `protobuf:"bytes,2,req,name=reward_chest" json:"reward_chest,omitempty"`
	RewardChestByteSize *uint32      `protobuf:"varint,3,opt,name=reward_chest_byte_size" json:"reward_chest_byte_size,omitempty"`
	RewardChestHash     []byte       `protobuf:"bytes,4,opt,name=reward_chest_hash" json:"reward_chest_hash,omitempty"`
	XXX_unrecognized    []byte       `json:"-"`
}

func (m *ProfileNoticeGenericRewardChest) Reset()         { *m = ProfileNoticeGenericRewardChest{} }
func (m *ProfileNoticeGenericRewardChest) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeGenericRewardChest) ProtoMessage()    {}

func (m *ProfileNoticeGenericRewardChest) GetRewardChestAssetId() int32 {
	if m != nil && m.RewardChestAssetId != nil {
		return *m.RewardChestAssetId
	}
	return 0
}

func (m *ProfileNoticeGenericRewardChest) GetRewardChest() *RewardChest {
	if m != nil {
		return m.RewardChest
	}
	return nil
}

func (m *ProfileNoticeGenericRewardChest) GetRewardChestByteSize() uint32 {
	if m != nil && m.RewardChestByteSize != nil {
		return *m.RewardChestByteSize
	}
	return 0
}

func (m *ProfileNoticeGenericRewardChest) GetRewardChestHash() []byte {
	if m != nil {
		return m.RewardChestHash
	}
	return nil
}

// ref: PegasusShared.ProfileNoticeLevelUp
type ProfileNoticeLevelUp struct {
	HeroClass        *int32 `protobuf:"varint,1,req,name=hero_class" json:"hero_class,omitempty"`
	NewLevel         *int32 `protobuf:"varint,2,req,name=new_level" json:"new_level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeLevelUp) Reset()         { *m = ProfileNoticeLevelUp{} }
func (m *ProfileNoticeLevelUp) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeLevelUp) ProtoMessage()    {}

func (m *ProfileNoticeLevelUp) GetHeroClass() int32 {
	if m != nil && m.HeroClass != nil {
		return *m.HeroClass
	}
	return 0
}

func (m *ProfileNoticeLevelUp) GetNewLevel() int32 {
	if m != nil && m.NewLevel != nil {
		return *m.NewLevel
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeMedal
type ProfileNoticeMedal struct {
	StarLevel        *int32                        `protobuf:"varint,1,req,name=star_level" json:"star_level,omitempty"`
	LegendRank       *int32                        `protobuf:"varint,2,opt,name=legend_rank" json:"legend_rank,omitempty"`
	BestStarLevel    *int32                        `protobuf:"varint,3,opt,name=best_star_level" json:"best_star_level,omitempty"`
	Chest            *RewardChest                  `protobuf:"bytes,4,opt,name=chest" json:"chest,omitempty"`
	MedalType        *ProfileNoticeMedal_MedalType `protobuf:"varint,5,opt,name=medal_type,enum=pegasusshared.ProfileNoticeMedal_MedalType,def=0" json:"medal_type,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *ProfileNoticeMedal) Reset()         { *m = ProfileNoticeMedal{} }
func (m *ProfileNoticeMedal) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeMedal) ProtoMessage()    {}

const Default_ProfileNoticeMedal_MedalType ProfileNoticeMedal_MedalType = ProfileNoticeMedal_UNKNOWN_MEDAL

func (m *ProfileNoticeMedal) GetStarLevel() int32 {
	if m != nil && m.StarLevel != nil {
		return *m.StarLevel
	}
	return 0
}

func (m *ProfileNoticeMedal) GetLegendRank() int32 {
	if m != nil && m.LegendRank != nil {
		return *m.LegendRank
	}
	return 0
}

func (m *ProfileNoticeMedal) GetBestStarLevel() int32 {
	if m != nil && m.BestStarLevel != nil {
		return *m.BestStarLevel
	}
	return 0
}

func (m *ProfileNoticeMedal) GetChest() *RewardChest {
	if m != nil {
		return m.Chest
	}
	return nil
}

func (m *ProfileNoticeMedal) GetMedalType() ProfileNoticeMedal_MedalType {
	if m != nil && m.MedalType != nil {
		return *m.MedalType
	}
	return Default_ProfileNoticeMedal_MedalType
}

// ref: PegasusShared.ProfileNoticePreconDeck
type ProfileNoticePreconDeck struct {
	Deck             *int64 `protobuf:"varint,1,req,name=deck" json:"deck,omitempty"`
	Hero             *int32 `protobuf:"varint,2,req,name=hero" json:"hero,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticePreconDeck) Reset()         { *m = ProfileNoticePreconDeck{} }
func (m *ProfileNoticePreconDeck) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticePreconDeck) ProtoMessage()    {}

func (m *ProfileNoticePreconDeck) GetDeck() int64 {
	if m != nil && m.Deck != nil {
		return *m.Deck
	}
	return 0
}

func (m *ProfileNoticePreconDeck) GetHero() int32 {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return 0
}

// ref: PegasusShared.ProfileNoticePurchase
type ProfileNoticePurchase struct {
	ProductId        *string `protobuf:"bytes,1,req,name=product_id" json:"product_id,omitempty"`
	Data             *int64  `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
	Currency         *int32  `protobuf:"varint,3,opt,name=currency" json:"currency,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProfileNoticePurchase) Reset()         { *m = ProfileNoticePurchase{} }
func (m *ProfileNoticePurchase) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticePurchase) ProtoMessage()    {}

func (m *ProfileNoticePurchase) GetProductId() string {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return ""
}

func (m *ProfileNoticePurchase) GetData() int64 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

func (m *ProfileNoticePurchase) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardBooster
type ProfileNoticeRewardBooster struct {
	BoosterType      *int32 `protobuf:"varint,1,req,name=booster_type" json:"booster_type,omitempty"`
	BoosterCount     *int32 `protobuf:"varint,2,req,name=booster_count" json:"booster_count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardBooster) Reset()         { *m = ProfileNoticeRewardBooster{} }
func (m *ProfileNoticeRewardBooster) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardBooster) ProtoMessage()    {}

func (m *ProfileNoticeRewardBooster) GetBoosterType() int32 {
	if m != nil && m.BoosterType != nil {
		return *m.BoosterType
	}
	return 0
}

func (m *ProfileNoticeRewardBooster) GetBoosterCount() int32 {
	if m != nil && m.BoosterCount != nil {
		return *m.BoosterCount
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardCard
type ProfileNoticeRewardCard struct {
	Card             *CardDef `protobuf:"bytes,1,req,name=card" json:"card,omitempty"`
	Quantity         *int32   `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProfileNoticeRewardCard) Reset()         { *m = ProfileNoticeRewardCard{} }
func (m *ProfileNoticeRewardCard) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardCard) ProtoMessage()    {}

func (m *ProfileNoticeRewardCard) GetCard() *CardDef {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *ProfileNoticeRewardCard) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardCard2x
type ProfileNoticeRewardCard2X struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardCard2X) Reset()         { *m = ProfileNoticeRewardCard2X{} }
func (m *ProfileNoticeRewardCard2X) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardCard2X) ProtoMessage()    {}

// ref: PegasusShared.ProfileNoticeRewardDust
type ProfileNoticeRewardDust struct {
	Amount           *int32 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardDust) Reset()         { *m = ProfileNoticeRewardDust{} }
func (m *ProfileNoticeRewardDust) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardDust) ProtoMessage()    {}

func (m *ProfileNoticeRewardDust) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardForge
type ProfileNoticeRewardForge struct {
	Quantity         *int32 `protobuf:"varint,1,req,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardForge) Reset()         { *m = ProfileNoticeRewardForge{} }
func (m *ProfileNoticeRewardForge) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardForge) ProtoMessage()    {}

func (m *ProfileNoticeRewardForge) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardGold
type ProfileNoticeRewardGold struct {
	Amount           *int32 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardGold) Reset()         { *m = ProfileNoticeRewardGold{} }
func (m *ProfileNoticeRewardGold) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardGold) ProtoMessage()    {}

func (m *ProfileNoticeRewardGold) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardMount
type ProfileNoticeRewardMount struct {
	MountId          *int32 `protobuf:"varint,1,req,name=mount_id" json:"mount_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardMount) Reset()         { *m = ProfileNoticeRewardMount{} }
func (m *ProfileNoticeRewardMount) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardMount) ProtoMessage()    {}

func (m *ProfileNoticeRewardMount) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeTavernBrawlRewards
type ProfileNoticeTavernBrawlRewards struct {
	RewardChest      *RewardChest `protobuf:"bytes,1,req,name=reward_chest" json:"reward_chest,omitempty"`
	NumWins          *int32       `protobuf:"varint,2,req,name=num_wins" json:"num_wins,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ProfileNoticeTavernBrawlRewards) Reset()         { *m = ProfileNoticeTavernBrawlRewards{} }
func (m *ProfileNoticeTavernBrawlRewards) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeTavernBrawlRewards) ProtoMessage()    {}

func (m *ProfileNoticeTavernBrawlRewards) GetRewardChest() *RewardChest {
	if m != nil {
		return m.RewardChest
	}
	return nil
}

func (m *ProfileNoticeTavernBrawlRewards) GetNumWins() int32 {
	if m != nil && m.NumWins != nil {
		return *m.NumWins
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeTavernBrawlTicket
type ProfileNoticeTavernBrawlTicket struct {
	TicketType       *int32 `protobuf:"varint,1,req,name=ticket_type" json:"ticket_type,omitempty"`
	Quantity         *int32 `protobuf:"varint,2,req,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeTavernBrawlTicket) Reset()         { *m = ProfileNoticeTavernBrawlTicket{} }
func (m *ProfileNoticeTavernBrawlTicket) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeTavernBrawlTicket) ProtoMessage()    {}

func (m *ProfileNoticeTavernBrawlTicket) GetTicketType() int32 {
	if m != nil && m.TicketType != nil {
		return *m.TicketType
	}
	return 0
}

func (m *ProfileNoticeTavernBrawlTicket) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

// ref: PegasusShared.RewardBag
type RewardBag struct {
	RewardBooster     *ProfileNoticeRewardBooster `protobuf:"bytes,1,opt,name=reward_booster" json:"reward_booster,omitempty"`
	RewardCard        *ProfileNoticeRewardCard    `protobuf:"bytes,2,opt,name=reward_card" json:"reward_card,omitempty"`
	RewardDust        *ProfileNoticeRewardDust    `protobuf:"bytes,3,opt,name=reward_dust" json:"reward_dust,omitempty"`
	RewardGold        *ProfileNoticeRewardGold    `protobuf:"bytes,4,opt,name=reward_gold" json:"reward_gold,omitempty"`
	RewardCardBack    *ProfileNoticeCardBack      `protobuf:"bytes,5,opt,name=reward_card_back" json:"reward_card_back,omitempty"`
	RewardArenaTicket *ProfileNoticeRewardForge   `protobuf:"bytes,6,opt,name=reward_arena_ticket" json:"reward_arena_ticket,omitempty"`
	XXX_unrecognized  []byte                      `json:"-"`
}

func (m *RewardBag) Reset()         { *m = RewardBag{} }
func (m *RewardBag) String() string { return proto.CompactTextString(m) }
func (*RewardBag) ProtoMessage()    {}

func (m *RewardBag) GetRewardBooster() *ProfileNoticeRewardBooster {
	if m != nil {
		return m.RewardBooster
	}
	return nil
}

func (m *RewardBag) GetRewardCard() *ProfileNoticeRewardCard {
	if m != nil {
		return m.RewardCard
	}
	return nil
}

func (m *RewardBag) GetRewardDust() *ProfileNoticeRewardDust {
	if m != nil {
		return m.RewardDust
	}
	return nil
}

func (m *RewardBag) GetRewardGold() *ProfileNoticeRewardGold {
	if m != nil {
		return m.RewardGold
	}
	return nil
}

func (m *RewardBag) GetRewardCardBack() *ProfileNoticeCardBack {
	if m != nil {
		return m.RewardCardBack
	}
	return nil
}

func (m *RewardBag) GetRewardArenaTicket() *ProfileNoticeRewardForge {
	if m != nil {
		return m.RewardArenaTicket
	}
	return nil
}

// ref: PegasusShared.RewardChest
type RewardChest struct {
	Bag1             *RewardBag   `protobuf:"bytes,1,opt,name=bag1" json:"bag1,omitempty"`
	Bag2             *RewardBag   `protobuf:"bytes,2,opt,name=bag2" json:"bag2,omitempty"`
	Bag3             *RewardBag   `protobuf:"bytes,3,opt,name=bag3" json:"bag3,omitempty"`
	Bag4             *RewardBag   `protobuf:"bytes,4,opt,name=bag4" json:"bag4,omitempty"`
	Bag5             *RewardBag   `protobuf:"bytes,5,opt,name=bag5" json:"bag5,omitempty"`
	Bag              []*RewardBag `protobuf:"bytes,6,rep,name=bag" json:"bag,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RewardChest) Reset()         { *m = RewardChest{} }
func (m *RewardChest) String() string { return proto.CompactTextString(m) }
func (*RewardChest) ProtoMessage()    {}

func (m *RewardChest) GetBag1() *RewardBag {
	if m != nil {
		return m.Bag1
	}
	return nil
}

func (m *RewardChest) GetBag2() *RewardBag {
	if m != nil {
		return m.Bag2
	}
	return nil
}

func (m *RewardChest) GetBag3() *RewardBag {
	if m != nil {
		return m.Bag3
	}
	return nil
}

func (m *RewardChest) GetBag4() *RewardBag {
	if m != nil {
		return m.Bag4
	}
	return nil
}

func (m *RewardChest) GetBag5() *RewardBag {
	if m != nil {
		return m.Bag5
	}
	return nil
}

func (m *RewardChest) GetBag() []*RewardBag {
	if m != nil {
		return m.Bag
	}
	return nil
}

// ref: PegasusShared.RewardChestDbRecord
type RewardChestDbRecord struct {
	Id               *int32             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Strings          []*LocalizedString `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RewardChestDbRecord) Reset()         { *m = RewardChestDbRecord{} }
func (m *RewardChestDbRecord) String() string { return proto.CompactTextString(m) }
func (*RewardChestDbRecord) ProtoMessage()    {}

func (m *RewardChestDbRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RewardChestDbRecord) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

// ref: PegasusShared.ScenarioDbRecord
type ScenarioDbRecord struct {
	Id                            *int32             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	NoteDesc                      *string            `protobuf:"bytes,2,opt,name=note_desc" json:"note_desc,omitempty"`
	NumPlayers                    *int32             `protobuf:"varint,3,req,name=num_players" json:"num_players,omitempty"`
	Player1HeroCardId             *int64             `protobuf:"varint,4,req,name=player1_hero_card_id" json:"player1_hero_card_id,omitempty"`
	Player2HeroCardId             *int64             `protobuf:"varint,5,req,name=player2_hero_card_id" json:"player2_hero_card_id,omitempty"`
	IsExpert                      *bool              `protobuf:"varint,6,req,name=is_expert" json:"is_expert,omitempty"`
	AdventureId                   *int32             `protobuf:"varint,7,req,name=adventure_id" json:"adventure_id,omitempty"`
	AdventureModeId               *int32             `protobuf:"varint,8,opt,name=adventure_mode_id" json:"adventure_mode_id,omitempty"`
	WingId                        *int32             `protobuf:"varint,9,req,name=wing_id" json:"wing_id,omitempty"`
	SortOrder                     *int32             `protobuf:"varint,10,req,name=sort_order" json:"sort_order,omitempty"`
	ClientPlayer2HeroCardId       *int64             `protobuf:"varint,11,opt,name=client_player2_hero_card_id" json:"client_player2_hero_card_id,omitempty"`
	TavernBrawlTexture            *string            `protobuf:"bytes,12,opt,name=tavern_brawl_texture" json:"tavern_brawl_texture,omitempty"`
	TavernBrawlTexturePhone       *string            `protobuf:"bytes,13,opt,name=tavern_brawl_texture_phone" json:"tavern_brawl_texture_phone,omitempty"`
	TavernBrawlTexturePhoneOffset *Vector2           `protobuf:"bytes,14,opt,name=tavern_brawl_texture_phone_offset" json:"tavern_brawl_texture_phone_offset,omitempty"`
	IsCoop                        *bool              `protobuf:"varint,15,opt,name=is_coop" json:"is_coop,omitempty"`
	DeckRulesetId                 *int32             `protobuf:"varint,16,opt,name=deck_ruleset_id" json:"deck_ruleset_id,omitempty"`
	RuleType                      *RuleType          `protobuf:"varint,17,opt,name=rule_type,enum=pegasusshared.RuleType,def=0" json:"rule_type,omitempty"`
	Strings                       []*LocalizedString `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
	XXX_unrecognized              []byte             `json:"-"`
}

func (m *ScenarioDbRecord) Reset()         { *m = ScenarioDbRecord{} }
func (m *ScenarioDbRecord) String() string { return proto.CompactTextString(m) }
func (*ScenarioDbRecord) ProtoMessage()    {}

const Default_ScenarioDbRecord_RuleType RuleType = RuleType_RULE_NONE

func (m *ScenarioDbRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ScenarioDbRecord) GetNoteDesc() string {
	if m != nil && m.NoteDesc != nil {
		return *m.NoteDesc
	}
	return ""
}

func (m *ScenarioDbRecord) GetNumPlayers() int32 {
	if m != nil && m.NumPlayers != nil {
		return *m.NumPlayers
	}
	return 0
}

func (m *ScenarioDbRecord) GetPlayer1HeroCardId() int64 {
	if m != nil && m.Player1HeroCardId != nil {
		return *m.Player1HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetPlayer2HeroCardId() int64 {
	if m != nil && m.Player2HeroCardId != nil {
		return *m.Player2HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetIsExpert() bool {
	if m != nil && m.IsExpert != nil {
		return *m.IsExpert
	}
	return false
}

func (m *ScenarioDbRecord) GetAdventureId() int32 {
	if m != nil && m.AdventureId != nil {
		return *m.AdventureId
	}
	return 0
}

func (m *ScenarioDbRecord) GetAdventureModeId() int32 {
	if m != nil && m.AdventureModeId != nil {
		return *m.AdventureModeId
	}
	return 0
}

func (m *ScenarioDbRecord) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *ScenarioDbRecord) GetSortOrder() int32 {
	if m != nil && m.SortOrder != nil {
		return *m.SortOrder
	}
	return 0
}

func (m *ScenarioDbRecord) GetClientPlayer2HeroCardId() int64 {
	if m != nil && m.ClientPlayer2HeroCardId != nil {
		return *m.ClientPlayer2HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetTavernBrawlTexture() string {
	if m != nil && m.TavernBrawlTexture != nil {
		return *m.TavernBrawlTexture
	}
	return ""
}

func (m *ScenarioDbRecord) GetTavernBrawlTexturePhone() string {
	if m != nil && m.TavernBrawlTexturePhone != nil {
		return *m.TavernBrawlTexturePhone
	}
	return ""
}

func (m *ScenarioDbRecord) GetTavernBrawlTexturePhoneOffset() *Vector2 {
	if m != nil {
		return m.TavernBrawlTexturePhoneOffset
	}
	return nil
}

func (m *ScenarioDbRecord) GetIsCoop() bool {
	if m != nil && m.IsCoop != nil {
		return *m.IsCoop
	}
	return false
}

func (m *ScenarioDbRecord) GetDeckRulesetId() int32 {
	if m != nil && m.DeckRulesetId != nil {
		return *m.DeckRulesetId
	}
	return 0
}

func (m *ScenarioDbRecord) GetRuleType() RuleType {
	if m != nil && m.RuleType != nil {
		return *m.RuleType
	}
	return Default_ScenarioDbRecord_RuleType
}

func (m *ScenarioDbRecord) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

// ref: PegasusShared.SubsetCardListDbRecord
type SubsetCardListDbRecord struct {
	SubsetId         *int32  `protobuf:"varint,1,req,name=subset_id" json:"subset_id,omitempty"`
	CardIds          []int32 `protobuf:"varint,2,rep,name=card_ids" json:"card_ids,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SubsetCardListDbRecord) Reset()         { *m = SubsetCardListDbRecord{} }
func (m *SubsetCardListDbRecord) String() string { return proto.CompactTextString(m) }
func (*SubsetCardListDbRecord) ProtoMessage()    {}

func (m *SubsetCardListDbRecord) GetSubsetId() int32 {
	if m != nil && m.SubsetId != nil {
		return *m.SubsetId
	}
	return 0
}

func (m *SubsetCardListDbRecord) GetCardIds() []int32 {
	if m != nil {
		return m.CardIds
	}
	return nil
}

// ref: PegasusShared.TavernBrawlPlayerRecord
type TavernBrawlPlayerRecord struct {
	RewardProgress         *int32                    `protobuf:"varint,1,req,name=reward_progress" json:"reward_progress,omitempty"`
	GamesPlayed            *int32                    `protobuf:"varint,2,opt,name=games_played" json:"games_played,omitempty"`
	GamesWon               *int32                    `protobuf:"varint,3,req,name=games_won" json:"games_won,omitempty"`
	WinStreak              *int32                    `protobuf:"varint,4,opt,name=win_streak" json:"win_streak,omitempty"`
	SessionStatus          *TavernBrawlStatus        `protobuf:"varint,5,opt,name=session_status,enum=pegasusshared.TavernBrawlStatus,def=0" json:"session_status,omitempty"`
	NumTicketsOwned        *int32                    `protobuf:"varint,6,opt,name=num_tickets_owned" json:"num_tickets_owned,omitempty"`
	Session                *TavernBrawlPlayerSession `protobuf:"bytes,7,opt,name=session" json:"session,omitempty"`
	NumSessionsPurchasable *int32                    `protobuf:"varint,8,opt,name=num_sessions_purchasable" json:"num_sessions_purchasable,omitempty"`
	BrawlType              *BrawlType                `protobuf:"varint,9,opt,name=brawl_type,enum=pegasusshared.BrawlType,def=0" json:"brawl_type,omitempty"`
	XXX_unrecognized       []byte                    `json:"-"`
}

func (m *TavernBrawlPlayerRecord) Reset()         { *m = TavernBrawlPlayerRecord{} }
func (m *TavernBrawlPlayerRecord) String() string { return proto.CompactTextString(m) }
func (*TavernBrawlPlayerRecord) ProtoMessage()    {}

const Default_TavernBrawlPlayerRecord_SessionStatus TavernBrawlStatus = TavernBrawlStatus_TB_STATUS_INVALID
const Default_TavernBrawlPlayerRecord_BrawlType BrawlType = BrawlType_BRAWL_TYPE_UNKNOWN

func (m *TavernBrawlPlayerRecord) GetRewardProgress() int32 {
	if m != nil && m.RewardProgress != nil {
		return *m.RewardProgress
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetGamesPlayed() int32 {
	if m != nil && m.GamesPlayed != nil {
		return *m.GamesPlayed
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetGamesWon() int32 {
	if m != nil && m.GamesWon != nil {
		return *m.GamesWon
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetWinStreak() int32 {
	if m != nil && m.WinStreak != nil {
		return *m.WinStreak
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetSessionStatus() TavernBrawlStatus {
	if m != nil && m.SessionStatus != nil {
		return *m.SessionStatus
	}
	return Default_TavernBrawlPlayerRecord_SessionStatus
}

func (m *TavernBrawlPlayerRecord) GetNumTicketsOwned() int32 {
	if m != nil && m.NumTicketsOwned != nil {
		return *m.NumTicketsOwned
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetSession() *TavernBrawlPlayerSession {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *TavernBrawlPlayerRecord) GetNumSessionsPurchasable() int32 {
	if m != nil && m.NumSessionsPurchasable != nil {
		return *m.NumSessionsPurchasable
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetBrawlType() BrawlType {
	if m != nil && m.BrawlType != nil {
		return *m.BrawlType
	}
	return Default_TavernBrawlPlayerRecord_BrawlType
}

// ref: PegasusShared.TavernBrawlPlayerSession
type TavernBrawlPlayerSession struct {
	ErrorCode        *ErrorCode   `protobuf:"varint,1,opt,name=error_code,enum=pegasusshared.ErrorCode,def=0" json:"error_code,omitempty"`
	SeasonId         *int32       `protobuf:"varint,2,req,name=season_id" json:"season_id,omitempty"`
	Wins             *int32       `protobuf:"varint,3,req,name=wins" json:"wins,omitempty"`
	Losses           *int32       `protobuf:"varint,4,req,name=losses" json:"losses,omitempty"`
	Chest            *RewardChest `protobuf:"bytes,5,opt,name=chest" json:"chest,omitempty"`
	DeckLocked       *bool        `protobuf:"varint,6,req,name=deck_locked" json:"deck_locked,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TavernBrawlPlayerSession) Reset()         { *m = TavernBrawlPlayerSession{} }
func (m *TavernBrawlPlayerSession) String() string { return proto.CompactTextString(m) }
func (*TavernBrawlPlayerSession) ProtoMessage()    {}

const Default_TavernBrawlPlayerSession_ErrorCode ErrorCode = ErrorCode_ERROR_OK

func (m *TavernBrawlPlayerSession) GetErrorCode() ErrorCode {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Default_TavernBrawlPlayerSession_ErrorCode
}

func (m *TavernBrawlPlayerSession) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetWins() int32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetLosses() int32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetChest() *RewardChest {
	if m != nil {
		return m.Chest
	}
	return nil
}

func (m *TavernBrawlPlayerSession) GetDeckLocked() bool {
	if m != nil && m.DeckLocked != nil {
		return *m.DeckLocked
	}
	return false
}

// ref: PegasusShared.TavernSignData
type TavernSignData struct {
	Sign             *int32          `protobuf:"varint,1,req,name=sign" json:"sign,omitempty"`
	Background       *int32          `protobuf:"varint,2,req,name=background" json:"background,omitempty"`
	Major            *int32          `protobuf:"varint,3,req,name=major" json:"major,omitempty"`
	Minor            *int32          `protobuf:"varint,4,req,name=minor" json:"minor,omitempty"`
	SignType         *TavernSignType `protobuf:"varint,5,req,name=sign_type,enum=pegasusshared.TavernSignType" json:"sign_type,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *TavernSignData) Reset()         { *m = TavernSignData{} }
func (m *TavernSignData) String() string { return proto.CompactTextString(m) }
func (*TavernSignData) ProtoMessage()    {}

func (m *TavernSignData) GetSign() int32 {
	if m != nil && m.Sign != nil {
		return *m.Sign
	}
	return 0
}

func (m *TavernSignData) GetBackground() int32 {
	if m != nil && m.Background != nil {
		return *m.Background
	}
	return 0
}

func (m *TavernSignData) GetMajor() int32 {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return 0
}

func (m *TavernSignData) GetMinor() int32 {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return 0
}

func (m *TavernSignData) GetSignType() TavernSignType {
	if m != nil && m.SignType != nil {
		return *m.SignType
	}
	return 0
}

// ref: PegasusShared.Vector2
type Vector2 struct {
	X                *float32 `protobuf:"fixed32,1,req,name=x,def=0" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,2,req,name=y,def=0" json:"y,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Vector2) Reset()         { *m = Vector2{} }
func (m *Vector2) String() string { return proto.CompactTextString(m) }
func (*Vector2) ProtoMessage()    {}

const Default_Vector2_X float32 = 0
const Default_Vector2_Y float32 = 0

func (m *Vector2) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return Default_Vector2_X
}

func (m *Vector2) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return Default_Vector2_Y
}

func init() {
	proto.RegisterEnum("pegasusshared.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("pegasusshared.BattlePayProvider", BattlePayProvider_name, BattlePayProvider_value)
	proto.RegisterEnum("pegasusshared.BnetGameType", BnetGameType_name, BnetGameType_value)
	proto.RegisterEnum("pegasusshared.BrawlType", BrawlType_name, BrawlType_value)
	proto.RegisterEnum("pegasusshared.DatabaseAction", DatabaseAction_name, DatabaseAction_value)
	proto.RegisterEnum("pegasusshared.DatabaseResult", DatabaseResult_name, DatabaseResult_value)
	proto.RegisterEnum("pegasusshared.DeckSourceType", DeckSourceType_name, DeckSourceType_value)
	proto.RegisterEnum("pegasusshared.DeckType", DeckType_name, DeckType_value)
	proto.RegisterEnum("pegasusshared.DraftSlotType", DraftSlotType_name, DraftSlotType_value)
	proto.RegisterEnum("pegasusshared.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("pegasusshared.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("pegasusshared.FormatType", FormatType_name, FormatType_value)
	proto.RegisterEnum("pegasusshared.GameSaveOwnerType", GameSaveOwnerType_name, GameSaveOwnerType_value)
	proto.RegisterEnum("pegasusshared.GameType", GameType_name, GameType_value)
	proto.RegisterEnum("pegasusshared.RecruitAFriendState", RecruitAFriendState_name, RecruitAFriendState_value)
	proto.RegisterEnum("pegasusshared.ReturningPlayerStatus", ReturningPlayerStatus_name, ReturningPlayerStatus_value)
	proto.RegisterEnum("pegasusshared.RewardTrigger", RewardTrigger_name, RewardTrigger_value)
	proto.RegisterEnum("pegasusshared.RewardType", RewardType_name, RewardType_value)
	proto.RegisterEnum("pegasusshared.RuleType", RuleType_name, RuleType_value)
	proto.RegisterEnum("pegasusshared.TavernBrawlStatus", TavernBrawlStatus_name, TavernBrawlStatus_value)
	proto.RegisterEnum("pegasusshared.TavernSignType", TavernSignType_name, TavernSignType_value)
	proto.RegisterEnum("pegasusshared.AccountLicenseInfo_Flags", AccountLicenseInfo_Flags_name, AccountLicenseInfo_Flags_value)
	proto.RegisterEnum("pegasusshared.AdventureProgress_Flags", AdventureProgress_Flags_name, AdventureProgress_Flags_value)
	proto.RegisterEnum("pegasusshared.DeckInfo_ValidityFlags", DeckInfo_ValidityFlags_name, DeckInfo_ValidityFlags_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeAccountLicense_NoticeID", ProfileNoticeAccountLicense_NoticeID_name, ProfileNoticeAccountLicense_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeAdventureProgress_NoticeID", ProfileNoticeAdventureProgress_NoticeID_name, ProfileNoticeAdventureProgress_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeBonusStars_NoticeID", ProfileNoticeBonusStars_NoticeID_name, ProfileNoticeBonusStars_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeCardBack_NoticeID", ProfileNoticeCardBack_NoticeID_name, ProfileNoticeCardBack_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeDisconnectedGameResult_GameResult", ProfileNoticeDisconnectedGameResult_GameResult_name, ProfileNoticeDisconnectedGameResult_GameResult_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeDisconnectedGameResult_NoticeID", ProfileNoticeDisconnectedGameResult_NoticeID_name, ProfileNoticeDisconnectedGameResult_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult", ProfileNoticeDisconnectedGameResult_PlayerResult_name, ProfileNoticeDisconnectedGameResult_PlayerResult_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeGenericRewardChest_NoticeID", ProfileNoticeGenericRewardChest_NoticeID_name, ProfileNoticeGenericRewardChest_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeLevelUp_NoticeID", ProfileNoticeLevelUp_NoticeID_name, ProfileNoticeLevelUp_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeMedal_MedalType", ProfileNoticeMedal_MedalType_name, ProfileNoticeMedal_MedalType_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeMedal_NoticeID", ProfileNoticeMedal_NoticeID_name, ProfileNoticeMedal_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticePreconDeck_NoticeID", ProfileNoticePreconDeck_NoticeID_name, ProfileNoticePreconDeck_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticePurchase_NoticeID", ProfileNoticePurchase_NoticeID_name, ProfileNoticePurchase_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeRewardBooster_NoticeID", ProfileNoticeRewardBooster_NoticeID_name, ProfileNoticeRewardBooster_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeRewardCard_NoticeID", ProfileNoticeRewardCard_NoticeID_name, ProfileNoticeRewardCard_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeRewardCard2X_NoticeID", ProfileNoticeRewardCard2X_NoticeID_name, ProfileNoticeRewardCard2X_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeRewardDust_NoticeID", ProfileNoticeRewardDust_NoticeID_name, ProfileNoticeRewardDust_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeRewardForge_NoticeID", ProfileNoticeRewardForge_NoticeID_name, ProfileNoticeRewardForge_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeRewardGold_NoticeID", ProfileNoticeRewardGold_NoticeID_name, ProfileNoticeRewardGold_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeRewardMount_NoticeID", ProfileNoticeRewardMount_NoticeID_name, ProfileNoticeRewardMount_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeTavernBrawlRewards_NoticeID", ProfileNoticeTavernBrawlRewards_NoticeID_name, ProfileNoticeTavernBrawlRewards_NoticeID_value)
	proto.RegisterEnum("pegasusshared.ProfileNoticeTavernBrawlTicket_NoticeID", ProfileNoticeTavernBrawlTicket_NoticeID_name, ProfileNoticeTavernBrawlTicket_NoticeID_value)
}
