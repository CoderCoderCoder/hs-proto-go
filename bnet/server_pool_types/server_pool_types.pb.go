// Code generated by protoc-gen-go.
// source: github.com/HearthSim/hs-proto-go/bnet/server_pool_types/server_pool_types.proto
// DO NOT EDIT!

/*
Package server_pool_types is a generated protocol buffer package.

It is generated from these files:
	github.com/HearthSim/hs-proto-go/bnet/server_pool_types/server_pool_types.proto

It has these top-level messages:
	GetLoadRequest
	ServerState
	ServerInfo
	PoolStateRequest
	PoolStateResponse
*/
package server_pool_types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import attribute "github.com/HearthSim/hs-proto-go/bnet/attribute"
import rpc "github.com/HearthSim/hs-proto-go/bnet/rpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetLoadRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GetLoadRequest) Reset()                    { *m = GetLoadRequest{} }
func (m *GetLoadRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLoadRequest) ProtoMessage()               {}
func (*GetLoadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerState struct {
	CurrentLoad      *float32 `protobuf:"fixed32,1,opt,name=current_load,json=currentLoad,def=1" json:"current_load,omitempty"`
	GameCount        *uint32  `protobuf:"varint,2,opt,name=game_count,json=gameCount,def=0" json:"game_count,omitempty"`
	PlayerCount      *uint32  `protobuf:"varint,3,opt,name=player_count,json=playerCount,def=0" json:"player_count,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ServerState) Reset()                    { *m = ServerState{} }
func (m *ServerState) String() string            { return proto.CompactTextString(m) }
func (*ServerState) ProtoMessage()               {}
func (*ServerState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_ServerState_CurrentLoad float32 = 1
const Default_ServerState_GameCount uint32 = 0
const Default_ServerState_PlayerCount uint32 = 0

func (m *ServerState) GetCurrentLoad() float32 {
	if m != nil && m.CurrentLoad != nil {
		return *m.CurrentLoad
	}
	return Default_ServerState_CurrentLoad
}

func (m *ServerState) GetGameCount() uint32 {
	if m != nil && m.GameCount != nil {
		return *m.GameCount
	}
	return Default_ServerState_GameCount
}

func (m *ServerState) GetPlayerCount() uint32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return Default_ServerState_PlayerCount
}

type ServerInfo struct {
	Host             *rpc.ProcessId         `protobuf:"bytes,1,req,name=host" json:"host,omitempty"`
	Replace          *bool                  `protobuf:"varint,2,opt,name=replace,def=0" json:"replace,omitempty"`
	State            *ServerState           `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Attribute        []*attribute.Attribute `protobuf:"bytes,4,rep,name=attribute" json:"attribute,omitempty"`
	ProgramId        *uint32                `protobuf:"fixed32,5,opt,name=program_id,json=programId" json:"program_id,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *ServerInfo) Reset()                    { *m = ServerInfo{} }
func (m *ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()               {}
func (*ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_ServerInfo_Replace bool = false

func (m *ServerInfo) GetHost() *rpc.ProcessId {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *ServerInfo) GetReplace() bool {
	if m != nil && m.Replace != nil {
		return *m.Replace
	}
	return Default_ServerInfo_Replace
}

func (m *ServerInfo) GetState() *ServerState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ServerInfo) GetAttribute() []*attribute.Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *ServerInfo) GetProgramId() uint32 {
	if m != nil && m.ProgramId != nil {
		return *m.ProgramId
	}
	return 0
}

type PoolStateRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *PoolStateRequest) Reset()                    { *m = PoolStateRequest{} }
func (m *PoolStateRequest) String() string            { return proto.CompactTextString(m) }
func (*PoolStateRequest) ProtoMessage()               {}
func (*PoolStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PoolStateResponse struct {
	Info             []*ServerInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PoolStateResponse) Reset()                    { *m = PoolStateResponse{} }
func (m *PoolStateResponse) String() string            { return proto.CompactTextString(m) }
func (*PoolStateResponse) ProtoMessage()               {}
func (*PoolStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PoolStateResponse) GetInfo() []*ServerInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*GetLoadRequest)(nil), "server_pool_types.GetLoadRequest")
	proto.RegisterType((*ServerState)(nil), "server_pool_types.ServerState")
	proto.RegisterType((*ServerInfo)(nil), "server_pool_types.ServerInfo")
	proto.RegisterType((*PoolStateRequest)(nil), "server_pool_types.PoolStateRequest")
	proto.RegisterType((*PoolStateResponse)(nil), "server_pool_types.PoolStateResponse")
}

func init() {
	proto.RegisterFile("github.com/HearthSim/hs-proto-go/bnet/server_pool_types/server_pool_types.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0x59, 0xc7, 0x26, 0xf5, 0xa8, 0x0d, 0xc9, 0xd2, 0x83, 0x08, 0xa4, 0x15, 0xa2, 0x07,
	0x5d, 0x22, 0x37, 0x6a, 0x4f, 0xbe, 0x94, 0x52, 0x68, 0x6b, 0x28, 0x34, 0xac, 0x1f, 0x40, 0xac,
	0xa5, 0xb1, 0x24, 0x90, 0x34, 0xdb, 0xdd, 0x55, 0x21, 0xf4, 0x4d, 0xfb, 0x34, 0x65, 0x57, 0x72,
	0x1d, 0x30, 0x81, 0x1c, 0x04, 0xcb, 0x37, 0xff, 0xcc, 0x3f, 0xf3, 0x0b, 0x7e, 0x56, 0x8d, 0xad,
	0x87, 0x5d, 0x5a, 0x50, 0xb7, 0xfa, 0x8e, 0x52, 0xdb, 0x7a, 0xdb, 0x74, 0xab, 0xda, 0xdc, 0x2a,
	0x4d, 0x96, 0x6e, 0x2b, 0x5a, 0xed, 0x7a, 0xb4, 0x2b, 0x83, 0xfa, 0x37, 0xea, 0x5c, 0x11, 0xb5,
	0xb9, 0x7d, 0x50, 0x68, 0x4e, 0x49, 0xea, 0x3b, 0xf8, 0xd5, 0x49, 0xe1, 0xfa, 0xd3, 0xf3, 0x3c,
	0xa4, 0xb5, 0xba, 0xd9, 0x0d, 0x16, 0x8f, 0xaf, 0x71, 0xe6, 0xf5, 0x87, 0xe7, 0x0d, 0xd0, 0xaa,
	0x70, 0xdf, 0xd8, 0x14, 0x5f, 0xc2, 0xc5, 0x37, 0xb4, 0x3f, 0x48, 0x96, 0x02, 0x7f, 0x0d, 0x68,
	0x6c, 0xfc, 0x07, 0x82, 0xad, 0x5f, 0x6e, 0x6b, 0xa5, 0x45, 0xfe, 0x0e, 0x5e, 0x16, 0x83, 0xd6,
	0xd8, 0xdb, 0xbc, 0x25, 0x59, 0x86, 0x2c, 0x62, 0xc9, 0x6c, 0xcd, 0xee, 0x44, 0x30, 0x61, 0xd7,
	0xcb, 0x23, 0x80, 0x4a, 0x76, 0x98, 0x17, 0x34, 0xf4, 0x36, 0x9c, 0x45, 0x2c, 0x79, 0xb5, 0x66,
	0xef, 0xc5, 0xd2, 0xc1, 0x2f, 0x8e, 0xb9, 0x39, 0xaa, 0x95, 0x0f, 0xa8, 0x27, 0xcd, 0xd9, 0x41,
	0x13, 0x8c, 0xd8, 0xab, 0xe2, 0xbf, 0x0c, 0x60, 0x74, 0xdf, 0xf4, 0x7b, 0xe2, 0x31, 0xcc, 0x6b,
	0x32, 0x36, 0x64, 0xd1, 0x2c, 0x09, 0xb2, 0x8b, 0xd4, 0xed, 0x7d, 0xaf, 0xa9, 0x40, 0x63, 0x36,
	0xa5, 0xf0, 0x35, 0xfe, 0x16, 0xce, 0x35, 0xaa, 0x56, 0x16, 0xe8, 0x7d, 0x5f, 0xac, 0x17, 0x7b,
	0xd9, 0x1a, 0x14, 0x07, 0xca, 0x3f, 0xc2, 0xc2, 0xb8, 0x53, 0xbc, 0x65, 0x90, 0xbd, 0x49, 0x4f,
	0x7f, 0xca, 0xa3, 0x83, 0xc5, 0x28, 0xe6, 0x19, 0x2c, 0xff, 0x07, 0x1c, 0xce, 0xa3, 0xb3, 0x24,
	0xc8, 0x5e, 0xa7, 0xc7, 0xc8, 0x3f, 0x1f, 0x5e, 0xe2, 0x28, 0xe3, 0x37, 0x00, 0x4a, 0x53, 0xa5,
	0x65, 0x97, 0x37, 0x65, 0xb8, 0x88, 0x58, 0x72, 0x2e, 0x96, 0x13, 0xd9, 0x94, 0x31, 0x87, 0xcb,
	0x7b, 0xa2, 0x76, 0xb4, 0x99, 0xd2, 0xfe, 0x0a, 0x57, 0x8f, 0x98, 0x51, 0xd4, 0x1b, 0xe4, 0x77,
	0x30, 0x6f, 0xfa, 0x3d, 0x85, 0xcc, 0xdb, 0xde, 0x3c, 0xb9, 0xb0, 0xcb, 0x48, 0x78, 0xe9, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xc6, 0x22, 0xbb, 0xa2, 0x02, 0x00, 0x00,
}
