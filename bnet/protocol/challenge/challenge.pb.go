// Code generated by protoc-gen-go.
// source: bnet/protocol/challenge/challenge.proto
// DO NOT EDIT!

/*
Package bnet_protocol_challenge is a generated protocol buffer package.

It is generated from these files:
	bnet/protocol/challenge/challenge.proto

It has these top-level messages:
	Challenge
	ChallengeAnsweredRequest
	ChallengeAnsweredResponse
	ChallengeCancelledRequest
	ChallengeExternalRequest
	ChallengeExternalResult
	ChallengePickedRequest
	ChallengePickedResponse
	ChallengeResultRequest
	ChallengeUserRequest
	SendChallengeToUserRequest
	SendChallengeToUserResponse
*/
package bnet_protocol_challenge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bnet_protocol "bnet/protocol"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Challenge struct {
	Type             *uint32 `protobuf:"fixed32,1,req,name=type" json:"type,omitempty"`
	Info             *string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Answer           *string `protobuf:"bytes,3,opt,name=answer" json:"answer,omitempty"`
	Retries          *uint32 `protobuf:"varint,4,opt,name=retries" json:"retries,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Challenge) Reset()                    { *m = Challenge{} }
func (m *Challenge) String() string            { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()               {}
func (*Challenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Challenge) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Challenge) GetInfo() string {
	if m != nil && m.Info != nil {
		return *m.Info
	}
	return ""
}

func (m *Challenge) GetAnswer() string {
	if m != nil && m.Answer != nil {
		return *m.Answer
	}
	return ""
}

func (m *Challenge) GetRetries() uint32 {
	if m != nil && m.Retries != nil {
		return *m.Retries
	}
	return 0
}

type ChallengeAnsweredRequest struct {
	Answer           *string `protobuf:"bytes,1,req,name=answer" json:"answer,omitempty"`
	Data             []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Id               *uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChallengeAnsweredRequest) Reset()                    { *m = ChallengeAnsweredRequest{} }
func (m *ChallengeAnsweredRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeAnsweredRequest) ProtoMessage()               {}
func (*ChallengeAnsweredRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChallengeAnsweredRequest) GetAnswer() string {
	if m != nil && m.Answer != nil {
		return *m.Answer
	}
	return ""
}

func (m *ChallengeAnsweredRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChallengeAnsweredRequest) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type ChallengeAnsweredResponse struct {
	Data             []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	DoRetry          *bool  `protobuf:"varint,2,opt,name=do_retry,json=doRetry" json:"do_retry,omitempty"`
	RecordNotFound   *bool  `protobuf:"varint,3,opt,name=record_not_found,json=recordNotFound" json:"record_not_found,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChallengeAnsweredResponse) Reset()                    { *m = ChallengeAnsweredResponse{} }
func (m *ChallengeAnsweredResponse) String() string            { return proto.CompactTextString(m) }
func (*ChallengeAnsweredResponse) ProtoMessage()               {}
func (*ChallengeAnsweredResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChallengeAnsweredResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChallengeAnsweredResponse) GetDoRetry() bool {
	if m != nil && m.DoRetry != nil {
		return *m.DoRetry
	}
	return false
}

func (m *ChallengeAnsweredResponse) GetRecordNotFound() bool {
	if m != nil && m.RecordNotFound != nil {
		return *m.RecordNotFound
	}
	return false
}

type ChallengeCancelledRequest struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChallengeCancelledRequest) Reset()                    { *m = ChallengeCancelledRequest{} }
func (m *ChallengeCancelledRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeCancelledRequest) ProtoMessage()               {}
func (*ChallengeCancelledRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChallengeCancelledRequest) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

type ChallengeExternalRequest struct {
	RequestToken     *string `protobuf:"bytes,1,opt,name=request_token,json=requestToken" json:"request_token,omitempty"`
	PayloadType      *string `protobuf:"bytes,2,opt,name=payload_type,json=payloadType" json:"payload_type,omitempty"`
	Payload          []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChallengeExternalRequest) Reset()                    { *m = ChallengeExternalRequest{} }
func (m *ChallengeExternalRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeExternalRequest) ProtoMessage()               {}
func (*ChallengeExternalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChallengeExternalRequest) GetRequestToken() string {
	if m != nil && m.RequestToken != nil {
		return *m.RequestToken
	}
	return ""
}

func (m *ChallengeExternalRequest) GetPayloadType() string {
	if m != nil && m.PayloadType != nil {
		return *m.PayloadType
	}
	return ""
}

func (m *ChallengeExternalRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ChallengeExternalResult struct {
	RequestToken     *string `protobuf:"bytes,1,opt,name=request_token,json=requestToken" json:"request_token,omitempty"`
	Passed           *bool   `protobuf:"varint,2,opt,name=passed,def=1" json:"passed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChallengeExternalResult) Reset()                    { *m = ChallengeExternalResult{} }
func (m *ChallengeExternalResult) String() string            { return proto.CompactTextString(m) }
func (*ChallengeExternalResult) ProtoMessage()               {}
func (*ChallengeExternalResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

const Default_ChallengeExternalResult_Passed bool = true

func (m *ChallengeExternalResult) GetRequestToken() string {
	if m != nil && m.RequestToken != nil {
		return *m.RequestToken
	}
	return ""
}

func (m *ChallengeExternalResult) GetPassed() bool {
	if m != nil && m.Passed != nil {
		return *m.Passed
	}
	return Default_ChallengeExternalResult_Passed
}

type ChallengePickedRequest struct {
	Challenge            *uint32 `protobuf:"fixed32,1,req,name=challenge" json:"challenge,omitempty"`
	Id                   *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	NewChallengeProtocol *bool   `protobuf:"varint,3,opt,name=new_challenge_protocol,json=newChallengeProtocol,def=0" json:"new_challenge_protocol,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *ChallengePickedRequest) Reset()                    { *m = ChallengePickedRequest{} }
func (m *ChallengePickedRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengePickedRequest) ProtoMessage()               {}
func (*ChallengePickedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

const Default_ChallengePickedRequest_NewChallengeProtocol bool = false

func (m *ChallengePickedRequest) GetChallenge() uint32 {
	if m != nil && m.Challenge != nil {
		return *m.Challenge
	}
	return 0
}

func (m *ChallengePickedRequest) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ChallengePickedRequest) GetNewChallengeProtocol() bool {
	if m != nil && m.NewChallengeProtocol != nil {
		return *m.NewChallengeProtocol
	}
	return Default_ChallengePickedRequest_NewChallengeProtocol
}

type ChallengePickedResponse struct {
	Data             []byte `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChallengePickedResponse) Reset()                    { *m = ChallengePickedResponse{} }
func (m *ChallengePickedResponse) String() string            { return proto.CompactTextString(m) }
func (*ChallengePickedResponse) ProtoMessage()               {}
func (*ChallengePickedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChallengePickedResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ChallengeResultRequest struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type             *uint32 `protobuf:"fixed32,2,opt,name=type" json:"type,omitempty"`
	ErrorId          *uint32 `protobuf:"varint,3,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	Answer           []byte  `protobuf:"bytes,4,opt,name=answer" json:"answer,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChallengeResultRequest) Reset()                    { *m = ChallengeResultRequest{} }
func (m *ChallengeResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeResultRequest) ProtoMessage()               {}
func (*ChallengeResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChallengeResultRequest) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ChallengeResultRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ChallengeResultRequest) GetErrorId() uint32 {
	if m != nil && m.ErrorId != nil {
		return *m.ErrorId
	}
	return 0
}

func (m *ChallengeResultRequest) GetAnswer() []byte {
	if m != nil {
		return m.Answer
	}
	return nil
}

type ChallengeUserRequest struct {
	Challenges       []*Challenge                   `protobuf:"bytes,1,rep,name=challenges" json:"challenges,omitempty"`
	Context          *uint32                        `protobuf:"fixed32,2,req,name=context" json:"context,omitempty"`
	Id               *uint32                        `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Deadline         *uint64                        `protobuf:"varint,4,opt,name=deadline" json:"deadline,omitempty"`
	Attributes       []*bnet_protocol.AttributeA29E `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty"`
	GameAccountId    *bnet_protocol.EntityId        `protobuf:"bytes,6,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *ChallengeUserRequest) Reset()                    { *m = ChallengeUserRequest{} }
func (m *ChallengeUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeUserRequest) ProtoMessage()               {}
func (*ChallengeUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ChallengeUserRequest) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *ChallengeUserRequest) GetContext() uint32 {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return 0
}

func (m *ChallengeUserRequest) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ChallengeUserRequest) GetDeadline() uint64 {
	if m != nil && m.Deadline != nil {
		return *m.Deadline
	}
	return 0
}

func (m *ChallengeUserRequest) GetAttributes() []*bnet_protocol.AttributeA29E {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ChallengeUserRequest) GetGameAccountId() *bnet_protocol.EntityId {
	if m != nil {
		return m.GameAccountId
	}
	return nil
}

type SendChallengeToUserRequest struct {
	PeerId           *bnet_protocol.ProcessId       `protobuf:"bytes,1,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	GameAccountId    *bnet_protocol.EntityId        `protobuf:"bytes,2,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
	Challenges       []*Challenge                   `protobuf:"bytes,3,rep,name=challenges" json:"challenges,omitempty"`
	Context          *uint32                        `protobuf:"fixed32,4,req,name=context" json:"context,omitempty"`
	Timeout          *uint64                        `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
	Attributes       []*bnet_protocol.AttributeA29E `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *SendChallengeToUserRequest) Reset()                    { *m = SendChallengeToUserRequest{} }
func (m *SendChallengeToUserRequest) String() string            { return proto.CompactTextString(m) }
func (*SendChallengeToUserRequest) ProtoMessage()               {}
func (*SendChallengeToUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SendChallengeToUserRequest) GetPeerId() *bnet_protocol.ProcessId {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *SendChallengeToUserRequest) GetGameAccountId() *bnet_protocol.EntityId {
	if m != nil {
		return m.GameAccountId
	}
	return nil
}

func (m *SendChallengeToUserRequest) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *SendChallengeToUserRequest) GetContext() uint32 {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return 0
}

func (m *SendChallengeToUserRequest) GetTimeout() uint64 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func (m *SendChallengeToUserRequest) GetAttributes() []*bnet_protocol.AttributeA29E {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type SendChallengeToUserResponse struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SendChallengeToUserResponse) Reset()                    { *m = SendChallengeToUserResponse{} }
func (m *SendChallengeToUserResponse) String() string            { return proto.CompactTextString(m) }
func (*SendChallengeToUserResponse) ProtoMessage()               {}
func (*SendChallengeToUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SendChallengeToUserResponse) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Challenge)(nil), "bnet.protocol.challenge.Challenge")
	proto.RegisterType((*ChallengeAnsweredRequest)(nil), "bnet.protocol.challenge.ChallengeAnsweredRequest")
	proto.RegisterType((*ChallengeAnsweredResponse)(nil), "bnet.protocol.challenge.ChallengeAnsweredResponse")
	proto.RegisterType((*ChallengeCancelledRequest)(nil), "bnet.protocol.challenge.ChallengeCancelledRequest")
	proto.RegisterType((*ChallengeExternalRequest)(nil), "bnet.protocol.challenge.ChallengeExternalRequest")
	proto.RegisterType((*ChallengeExternalResult)(nil), "bnet.protocol.challenge.ChallengeExternalResult")
	proto.RegisterType((*ChallengePickedRequest)(nil), "bnet.protocol.challenge.ChallengePickedRequest")
	proto.RegisterType((*ChallengePickedResponse)(nil), "bnet.protocol.challenge.ChallengePickedResponse")
	proto.RegisterType((*ChallengeResultRequest)(nil), "bnet.protocol.challenge.ChallengeResultRequest")
	proto.RegisterType((*ChallengeUserRequest)(nil), "bnet.protocol.challenge.ChallengeUserRequest")
	proto.RegisterType((*SendChallengeToUserRequest)(nil), "bnet.protocol.challenge.SendChallengeToUserRequest")
	proto.RegisterType((*SendChallengeToUserResponse)(nil), "bnet.protocol.challenge.SendChallengeToUserResponse")
}

func init() { proto.RegisterFile("bnet/protocol/challenge/challenge.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0x51, 0x4b, 0xdc, 0x4c,
	0x14, 0x25, 0x31, 0x6e, 0x76, 0xaf, 0xbb, 0x7e, 0x1f, 0x41, 0x34, 0x5a, 0x0b, 0xdb, 0xf4, 0xa1,
	0x0b, 0xc5, 0x95, 0xfa, 0x56, 0x4b, 0x29, 0x56, 0x2c, 0xec, 0x4b, 0x91, 0xa9, 0xed, 0x53, 0x21,
	0x8c, 0x99, 0xab, 0x0d, 0xc6, 0x99, 0xed, 0xcc, 0x04, 0x5d, 0xe8, 0x5b, 0xff, 0x48, 0xff, 0x4d,
	0xff, 0x56, 0xc9, 0x24, 0x99, 0xc4, 0xb0, 0x0b, 0x95, 0xbe, 0xcd, 0xbd, 0x39, 0x39, 0xe7, 0xcc,
	0x3d, 0x77, 0xe0, 0xc5, 0x25, 0x47, 0x7d, 0x38, 0x97, 0x42, 0x8b, 0x44, 0x64, 0x87, 0xc9, 0x37,
	0x9a, 0x65, 0xc8, 0xaf, 0xb1, 0x39, 0x4d, 0xcd, 0xc7, 0x60, 0xa7, 0x00, 0x4e, 0x6b, 0xe0, 0xd4,
	0x7e, 0xde, 0xdb, 0x7f, 0xc8, 0x60, 0x11, 0xe6, 0x10, 0x21, 0x0c, 0x4e, 0x6b, 0x68, 0x10, 0x80,
	0xa7, 0x17, 0x73, 0x0c, 0x9d, 0xb1, 0x3b, 0xf1, 0x89, 0x39, 0x17, 0xbd, 0x94, 0x5f, 0x89, 0xd0,
	0x1d, 0x3b, 0x93, 0x01, 0x31, 0xe7, 0x60, 0x1b, 0x7a, 0x94, 0xab, 0x3b, 0x94, 0xe1, 0x9a, 0xe9,
	0x56, 0x55, 0x10, 0x82, 0x2f, 0x51, 0xcb, 0x14, 0x55, 0xe8, 0x8d, 0x9d, 0xc9, 0x88, 0xd4, 0x65,
	0xf4, 0x05, 0x42, 0x2b, 0x73, 0x62, 0xc0, 0xc8, 0x08, 0x7e, 0xcf, 0x51, 0xe9, 0x16, 0x5b, 0xa1,
	0xdb, 0xb0, 0x05, 0xe0, 0x31, 0xaa, 0xa9, 0x51, 0x1e, 0x12, 0x73, 0x0e, 0x36, 0xc1, 0x4d, 0x99,
	0x51, 0x1d, 0x11, 0x37, 0x65, 0x91, 0x86, 0xdd, 0x25, 0xbc, 0x6a, 0x2e, 0xb8, 0x42, 0x4b, 0xe0,
	0xb4, 0x08, 0x76, 0xa1, 0xcf, 0x44, 0x5c, 0xd8, 0x5a, 0x18, 0xe2, 0x3e, 0xf1, 0x99, 0x20, 0x45,
	0x19, 0x4c, 0xe0, 0x7f, 0x89, 0x89, 0x90, 0x2c, 0xe6, 0x42, 0xc7, 0x57, 0x22, 0xe7, 0xa5, 0x52,
	0x9f, 0x6c, 0x96, 0xfd, 0x8f, 0x42, 0x7f, 0x28, 0xba, 0xd1, 0xcb, 0x96, 0xea, 0x29, 0xe5, 0x09,
	0x66, 0x59, 0x73, 0x9d, 0xd2, 0xa2, 0x63, 0x2d, 0xfe, 0x68, 0x5d, 0xfd, 0xec, 0x5e, 0xa3, 0xe4,
	0x34, 0xab, 0xb1, 0xcf, 0x61, 0x24, 0xcb, 0x63, 0xac, 0xc5, 0x0d, 0x72, 0xf3, 0xdb, 0x80, 0x0c,
	0xab, 0xe6, 0x45, 0xd1, 0x0b, 0x9e, 0xc1, 0x70, 0x4e, 0x17, 0x99, 0xa0, 0x2c, 0x36, 0xe9, 0x94,
	0x49, 0x6c, 0x54, 0xbd, 0x8b, 0x22, 0xa4, 0x10, 0xfc, 0xaa, 0x34, 0x8e, 0x87, 0xa4, 0x2e, 0xa3,
	0xaf, 0xb0, 0xb3, 0x44, 0x5d, 0xe5, 0xd9, 0x5f, 0x8a, 0xef, 0x43, 0x6f, 0x4e, 0x95, 0x42, 0x56,
	0x4e, 0xeb, 0xd8, 0xd3, 0x32, 0x47, 0x52, 0xf5, 0xa2, 0x9f, 0x0e, 0x6c, 0x5b, 0xfa, 0xf3, 0x34,
	0xb9, 0x69, 0xc6, 0xb0, 0x0f, 0x03, 0xbb, 0x83, 0xd5, 0x42, 0x35, 0x8d, 0x6a, 0x48, 0x6e, 0x3d,
	0xa4, 0xe0, 0x0d, 0x6c, 0x73, 0xbc, 0x8b, 0x2d, 0x20, 0xae, 0xd7, 0xb4, 0x4c, 0xe0, 0x78, 0xfd,
	0x8a, 0x66, 0x0a, 0xc9, 0x16, 0xc7, 0xbb, 0x46, 0xaf, 0x82, 0x44, 0x07, 0xad, 0x3b, 0xd6, 0x26,
	0x56, 0xaf, 0x40, 0x24, 0x5a, 0x9e, 0xcb, 0x51, 0xac, 0x88, 0xce, 0xbe, 0x87, 0xc2, 0x67, 0xfd,
	0x1e, 0x76, 0xa1, 0x8f, 0x52, 0x0a, 0x19, 0xdb, 0x3d, 0xf4, 0x4d, 0x3d, 0x63, 0xad, 0x45, 0xf6,
	0x8c, 0x5c, 0x55, 0x45, 0xbf, 0x5c, 0xd8, 0xb2, 0x8a, 0x9f, 0x15, 0xca, 0x5a, 0xef, 0x3d, 0x80,
	0xbd, 0xb1, 0x0a, 0x9d, 0xf1, 0xda, 0x64, 0xe3, 0x28, 0x9a, 0xae, 0x78, 0xc8, 0xd3, 0xc6, 0x74,
	0xeb, 0xaf, 0x22, 0xfa, 0x44, 0x70, 0x8d, 0xf7, 0x3a, 0x74, 0xcd, 0x94, 0xeb, 0xb2, 0xfb, 0x56,
	0x82, 0x3d, 0xe8, 0x33, 0xa4, 0x2c, 0x4b, 0x39, 0x1a, 0x83, 0x1e, 0xb1, 0x75, 0xf0, 0x16, 0x80,
	0x6a, 0x2d, 0xd3, 0xcb, 0x5c, 0xa3, 0x0a, 0xd7, 0x8d, 0x93, 0xa7, 0x1d, 0x27, 0x27, 0x35, 0x20,
	0xa6, 0x47, 0xaf, 0x91, 0xb4, 0x7e, 0x08, 0xde, 0xc1, 0x7f, 0xd7, 0xf4, 0x16, 0x63, 0x9a, 0x24,
	0x22, 0xe7, 0xba, 0x98, 0x4d, 0x6f, 0xec, 0x4c, 0x36, 0x8e, 0x76, 0x3a, 0x1c, 0x67, 0x5c, 0xa7,
	0x7a, 0x31, 0x63, 0x64, 0x54, 0xe0, 0x4f, 0x4a, 0xf8, 0x8c, 0x45, 0xbf, 0x5d, 0xd8, 0xfb, 0x84,
	0x9c, 0xd9, 0x3b, 0x5e, 0x88, 0xf6, 0xa0, 0x5e, 0x81, 0x3f, 0x47, 0x34, 0x33, 0x77, 0x0c, 0x6f,
	0xd8, 0xe1, 0x3d, 0x97, 0x22, 0x41, 0xa5, 0x66, 0x8c, 0xf4, 0x0a, 0xe0, 0x8c, 0x2d, 0xb3, 0xe4,
	0x3e, 0xc6, 0x52, 0x27, 0x9c, 0xb5, 0x7f, 0x0d, 0xc7, 0x7b, 0x18, 0x4e, 0x08, 0xbe, 0x4e, 0x6f,
	0x51, 0xe4, 0x3a, 0x5c, 0x37, 0x59, 0xd4, 0x65, 0x27, 0x8a, 0xde, 0x23, 0xa3, 0x88, 0x0e, 0xe0,
	0xc9, 0xd2, 0x41, 0x56, 0x0f, 0xa2, 0xb3, 0xe2, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x31, 0xf4,
	0xe6, 0xab, 0x60, 0x06, 0x00, 0x00,
}
