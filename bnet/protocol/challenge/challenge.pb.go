// Code generated by protoc-gen-go.
// source: bnet/protocol/challenge/challenge.proto
// DO NOT EDIT!

/*
Package bnet_protocol_challenge is a generated protocol buffer package.

It is generated from these files:
	bnet/protocol/challenge/challenge.proto

It has these top-level messages:
	Challenge
	ChallengeAnsweredRequest
	ChallengeAnsweredResponse
	ChallengeCancelledRequest
	ChallengeExternalRequest
	ChallengeExternalResult
	ChallengePickedRequest
	ChallengePickedResponse
	ChallengeResultRequest
	ChallengeUserRequest
	SendChallengeToUserRequest
	SendChallengeToUserResponse
*/
package bnet_protocol_challenge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bnet_protocol "bnet/protocol"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ref: bnet.protocol.challenge.Challenge
type Challenge struct {
	Type    uint32 `protobuf:"fixed32,1,opt,name=type" json:"type,omitempty"`
	Info    string `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Answer  string `protobuf:"bytes,3,opt,name=answer" json:"answer,omitempty"`
	Retries uint32 `protobuf:"varint,4,opt,name=retries" json:"retries,omitempty"`
}

func (m *Challenge) Reset()                    { *m = Challenge{} }
func (m *Challenge) String() string            { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()               {}
func (*Challenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Challenge) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Challenge) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Challenge) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func (m *Challenge) GetRetries() uint32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

// ref: bnet.protocol.challenge.ChallengeAnsweredRequest
type ChallengeAnsweredRequest struct {
	Answer string `protobuf:"bytes,1,opt,name=answer" json:"answer,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Id     uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *ChallengeAnsweredRequest) Reset()                    { *m = ChallengeAnsweredRequest{} }
func (m *ChallengeAnsweredRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeAnsweredRequest) ProtoMessage()               {}
func (*ChallengeAnsweredRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ChallengeAnsweredRequest) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func (m *ChallengeAnsweredRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChallengeAnsweredRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// ref: bnet.protocol.challenge.ChallengeAnsweredResponse
type ChallengeAnsweredResponse struct {
	Data           []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	DoRetry        bool   `protobuf:"varint,2,opt,name=do_retry,json=doRetry" json:"do_retry,omitempty"`
	RecordNotFound bool   `protobuf:"varint,3,opt,name=record_not_found,json=recordNotFound" json:"record_not_found,omitempty"`
}

func (m *ChallengeAnsweredResponse) Reset()                    { *m = ChallengeAnsweredResponse{} }
func (m *ChallengeAnsweredResponse) String() string            { return proto.CompactTextString(m) }
func (*ChallengeAnsweredResponse) ProtoMessage()               {}
func (*ChallengeAnsweredResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChallengeAnsweredResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChallengeAnsweredResponse) GetDoRetry() bool {
	if m != nil {
		return m.DoRetry
	}
	return false
}

func (m *ChallengeAnsweredResponse) GetRecordNotFound() bool {
	if m != nil {
		return m.RecordNotFound
	}
	return false
}

// ref: bnet.protocol.challenge.ChallengeCancelledRequest
type ChallengeCancelledRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ChallengeCancelledRequest) Reset()                    { *m = ChallengeCancelledRequest{} }
func (m *ChallengeCancelledRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeCancelledRequest) ProtoMessage()               {}
func (*ChallengeCancelledRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChallengeCancelledRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// ref: bnet.protocol.challenge.ChallengeExternalRequest
type ChallengeExternalRequest struct {
	RequestToken string `protobuf:"bytes,1,opt,name=request_token,json=requestToken" json:"request_token,omitempty"`
	PayloadType  string `protobuf:"bytes,2,opt,name=payload_type,json=payloadType" json:"payload_type,omitempty"`
	Payload      []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ChallengeExternalRequest) Reset()                    { *m = ChallengeExternalRequest{} }
func (m *ChallengeExternalRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeExternalRequest) ProtoMessage()               {}
func (*ChallengeExternalRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChallengeExternalRequest) GetRequestToken() string {
	if m != nil {
		return m.RequestToken
	}
	return ""
}

func (m *ChallengeExternalRequest) GetPayloadType() string {
	if m != nil {
		return m.PayloadType
	}
	return ""
}

func (m *ChallengeExternalRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// ref: bnet.protocol.challenge.ChallengeExternalResult
type ChallengeExternalResult struct {
	RequestToken string `protobuf:"bytes,1,opt,name=request_token,json=requestToken" json:"request_token,omitempty"`
	Passed       bool   `protobuf:"varint,2,opt,name=passed" json:"passed,omitempty"`
}

func (m *ChallengeExternalResult) Reset()                    { *m = ChallengeExternalResult{} }
func (m *ChallengeExternalResult) String() string            { return proto.CompactTextString(m) }
func (*ChallengeExternalResult) ProtoMessage()               {}
func (*ChallengeExternalResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChallengeExternalResult) GetRequestToken() string {
	if m != nil {
		return m.RequestToken
	}
	return ""
}

func (m *ChallengeExternalResult) GetPassed() bool {
	if m != nil {
		return m.Passed
	}
	return false
}

// ref: bnet.protocol.challenge.ChallengePickedRequest
type ChallengePickedRequest struct {
	Challenge            uint32 `protobuf:"fixed32,1,opt,name=challenge" json:"challenge,omitempty"`
	Id                   uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	NewChallengeProtocol bool   `protobuf:"varint,3,opt,name=new_challenge_protocol,json=newChallengeProtocol" json:"new_challenge_protocol,omitempty"`
}

func (m *ChallengePickedRequest) Reset()                    { *m = ChallengePickedRequest{} }
func (m *ChallengePickedRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengePickedRequest) ProtoMessage()               {}
func (*ChallengePickedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ChallengePickedRequest) GetChallenge() uint32 {
	if m != nil {
		return m.Challenge
	}
	return 0
}

func (m *ChallengePickedRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChallengePickedRequest) GetNewChallengeProtocol() bool {
	if m != nil {
		return m.NewChallengeProtocol
	}
	return false
}

// ref: bnet.protocol.challenge.ChallengePickedResponse
type ChallengePickedResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ChallengePickedResponse) Reset()                    { *m = ChallengePickedResponse{} }
func (m *ChallengePickedResponse) String() string            { return proto.CompactTextString(m) }
func (*ChallengePickedResponse) ProtoMessage()               {}
func (*ChallengePickedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChallengePickedResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ref: bnet.protocol.challenge.ChallengeResultRequest
type ChallengeResultRequest struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type    uint32 `protobuf:"fixed32,2,opt,name=type" json:"type,omitempty"`
	ErrorId uint32 `protobuf:"varint,3,opt,name=error_id,json=errorId" json:"error_id,omitempty"`
	Answer  []byte `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (m *ChallengeResultRequest) Reset()                    { *m = ChallengeResultRequest{} }
func (m *ChallengeResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeResultRequest) ProtoMessage()               {}
func (*ChallengeResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChallengeResultRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChallengeResultRequest) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChallengeResultRequest) GetErrorId() uint32 {
	if m != nil {
		return m.ErrorId
	}
	return 0
}

func (m *ChallengeResultRequest) GetAnswer() []byte {
	if m != nil {
		return m.Answer
	}
	return nil
}

// ref: bnet.protocol.challenge.ChallengeUserRequest
type ChallengeUserRequest struct {
	Challenges    []*Challenge               `protobuf:"bytes,1,rep,name=challenges" json:"challenges,omitempty"`
	Context       uint32                     `protobuf:"fixed32,2,opt,name=context" json:"context,omitempty"`
	Id            uint32                     `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Deadline      uint64                     `protobuf:"varint,4,opt,name=deadline" json:"deadline,omitempty"`
	Attributes    []*bnet_protocol.Attribute `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty"`
	GameAccountId *bnet_protocol.EntityId    `protobuf:"bytes,6,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
}

func (m *ChallengeUserRequest) Reset()                    { *m = ChallengeUserRequest{} }
func (m *ChallengeUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ChallengeUserRequest) ProtoMessage()               {}
func (*ChallengeUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ChallengeUserRequest) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *ChallengeUserRequest) GetContext() uint32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *ChallengeUserRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChallengeUserRequest) GetDeadline() uint64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *ChallengeUserRequest) GetAttributes() []*bnet_protocol.Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ChallengeUserRequest) GetGameAccountId() *bnet_protocol.EntityId {
	if m != nil {
		return m.GameAccountId
	}
	return nil
}

// ref: bnet.protocol.challenge.SendChallengeToUserRequest
type SendChallengeToUserRequest struct {
	PeerId        *bnet_protocol.ProcessId   `protobuf:"bytes,1,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
	GameAccountId *bnet_protocol.EntityId    `protobuf:"bytes,2,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
	Challenges    []*Challenge               `protobuf:"bytes,3,rep,name=challenges" json:"challenges,omitempty"`
	Context       uint32                     `protobuf:"fixed32,4,opt,name=context" json:"context,omitempty"`
	Timeout       uint64                     `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
	Attributes    []*bnet_protocol.Attribute `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *SendChallengeToUserRequest) Reset()                    { *m = SendChallengeToUserRequest{} }
func (m *SendChallengeToUserRequest) String() string            { return proto.CompactTextString(m) }
func (*SendChallengeToUserRequest) ProtoMessage()               {}
func (*SendChallengeToUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SendChallengeToUserRequest) GetPeerId() *bnet_protocol.ProcessId {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *SendChallengeToUserRequest) GetGameAccountId() *bnet_protocol.EntityId {
	if m != nil {
		return m.GameAccountId
	}
	return nil
}

func (m *SendChallengeToUserRequest) GetChallenges() []*Challenge {
	if m != nil {
		return m.Challenges
	}
	return nil
}

func (m *SendChallengeToUserRequest) GetContext() uint32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *SendChallengeToUserRequest) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *SendChallengeToUserRequest) GetAttributes() []*bnet_protocol.Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// ref: bnet.protocol.challenge.SendChallengeToUserResponse
type SendChallengeToUserResponse struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SendChallengeToUserResponse) Reset()                    { *m = SendChallengeToUserResponse{} }
func (m *SendChallengeToUserResponse) String() string            { return proto.CompactTextString(m) }
func (*SendChallengeToUserResponse) ProtoMessage()               {}
func (*SendChallengeToUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SendChallengeToUserResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Challenge)(nil), "bnet.protocol.challenge.Challenge")
	proto.RegisterType((*ChallengeAnsweredRequest)(nil), "bnet.protocol.challenge.ChallengeAnsweredRequest")
	proto.RegisterType((*ChallengeAnsweredResponse)(nil), "bnet.protocol.challenge.ChallengeAnsweredResponse")
	proto.RegisterType((*ChallengeCancelledRequest)(nil), "bnet.protocol.challenge.ChallengeCancelledRequest")
	proto.RegisterType((*ChallengeExternalRequest)(nil), "bnet.protocol.challenge.ChallengeExternalRequest")
	proto.RegisterType((*ChallengeExternalResult)(nil), "bnet.protocol.challenge.ChallengeExternalResult")
	proto.RegisterType((*ChallengePickedRequest)(nil), "bnet.protocol.challenge.ChallengePickedRequest")
	proto.RegisterType((*ChallengePickedResponse)(nil), "bnet.protocol.challenge.ChallengePickedResponse")
	proto.RegisterType((*ChallengeResultRequest)(nil), "bnet.protocol.challenge.ChallengeResultRequest")
	proto.RegisterType((*ChallengeUserRequest)(nil), "bnet.protocol.challenge.ChallengeUserRequest")
	proto.RegisterType((*SendChallengeToUserRequest)(nil), "bnet.protocol.challenge.SendChallengeToUserRequest")
	proto.RegisterType((*SendChallengeToUserResponse)(nil), "bnet.protocol.challenge.SendChallengeToUserResponse")
}

func init() { proto.RegisterFile("bnet/protocol/challenge/challenge.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x51, 0x4f, 0xdb, 0x3a,
	0x14, 0xbe, 0x09, 0xa5, 0x29, 0x87, 0x96, 0x8b, 0x2c, 0x54, 0x02, 0x97, 0x87, 0xde, 0xdc, 0x87,
	0x5b, 0x69, 0xa2, 0x68, 0x6c, 0x8f, 0x93, 0x26, 0x86, 0x40, 0xea, 0xcb, 0x84, 0x3c, 0xc6, 0x6b,
	0x64, 0xe2, 0x03, 0x8b, 0x08, 0x76, 0x67, 0xbb, 0x82, 0x4a, 0xfc, 0x9b, 0xfd, 0x9b, 0xfd, 0xaa,
	0x29, 0x8e, 0xe3, 0x86, 0xa8, 0x48, 0x43, 0xda, 0x9b, 0xcf, 0xc9, 0x97, 0xef, 0xfb, 0xce, 0xf9,
	0x6c, 0xf8, 0xff, 0x5a, 0xa0, 0x39, 0x9a, 0x29, 0x69, 0x64, 0x26, 0x8b, 0xa3, 0xec, 0x1b, 0x2b,
	0x0a, 0x14, 0xb7, 0xb8, 0x3c, 0x4d, 0xec, 0x47, 0xb2, 0x5b, 0x02, 0x27, 0x35, 0x70, 0xe2, 0x3f,
	0xef, 0x1f, 0x3c, 0x67, 0xf0, 0x08, 0x7b, 0x48, 0x10, 0x36, 0x4e, 0x6b, 0x28, 0x21, 0xd0, 0x31,
	0x8b, 0x19, 0xc6, 0xc1, 0x28, 0x18, 0x47, 0xd4, 0x9e, 0xcb, 0x5e, 0x2e, 0x6e, 0x64, 0x1c, 0x8e,
	0x82, 0xf1, 0x06, 0xb5, 0x67, 0x32, 0x84, 0x2e, 0x13, 0xfa, 0x01, 0x55, 0xbc, 0x66, 0xbb, 0xae,
	0x22, 0x31, 0x44, 0x0a, 0x8d, 0xca, 0x51, 0xc7, 0x9d, 0x51, 0x30, 0x1e, 0xd0, 0xba, 0x4c, 0xae,
	0x20, 0xf6, 0x32, 0x27, 0x16, 0x8c, 0x9c, 0xe2, 0xf7, 0x39, 0x6a, 0xd3, 0x60, 0x0b, 0x9e, 0xb1,
	0x11, 0xe8, 0x70, 0x66, 0x98, 0x55, 0xee, 0x53, 0x7b, 0x26, 0x5b, 0x10, 0xe6, 0xdc, 0xaa, 0x0e,
	0x68, 0x98, 0xf3, 0xc4, 0xc0, 0xde, 0x0a, 0x5e, 0x3d, 0x93, 0x42, 0xa3, 0x27, 0x08, 0x1a, 0x04,
	0x7b, 0xd0, 0xe3, 0x32, 0x2d, 0x6d, 0x2d, 0x2c, 0x71, 0x8f, 0x46, 0x5c, 0xd2, 0xb2, 0x24, 0x63,
	0xd8, 0x56, 0x98, 0x49, 0xc5, 0x53, 0x21, 0x4d, 0x7a, 0x23, 0xe7, 0xa2, 0x52, 0xea, 0xd1, 0xad,
	0xaa, 0xff, 0x59, 0x9a, 0xf3, 0xb2, 0x9b, 0xbc, 0x69, 0xa8, 0x9e, 0x32, 0x91, 0x61, 0x51, 0x2c,
	0xc7, 0xa9, 0x2c, 0x06, 0xde, 0xe2, 0x53, 0x63, 0xf4, 0xb3, 0x47, 0x83, 0x4a, 0xb0, 0xa2, 0xc6,
	0xfe, 0x07, 0x03, 0x55, 0x1d, 0x53, 0x23, 0xef, 0x50, 0xb8, 0x0d, 0xf4, 0x5d, 0xf3, 0xb2, 0xec,
	0x91, 0x7f, 0xa1, 0x3f, 0x63, 0x8b, 0x42, 0x32, 0x9e, 0xda, 0x74, 0xaa, 0x24, 0x36, 0x5d, 0xef,
	0xb2, 0x0c, 0x29, 0x86, 0xc8, 0x95, 0xd6, 0x71, 0x9f, 0xd6, 0x65, 0x72, 0x05, 0xbb, 0x2b, 0xd4,
	0xf5, 0xbc, 0xf8, 0x4d, 0xf1, 0x21, 0x74, 0x67, 0x4c, 0x6b, 0xe4, 0x6e, 0x5b, 0xae, 0x4a, 0x9e,
	0x60, 0xe8, 0x79, 0x2f, 0xf2, 0xec, 0x6e, 0x39, 0xff, 0x01, 0x6c, 0xf8, 0xcb, 0xe7, 0x6e, 0xd2,
	0xb2, 0xe1, 0xb6, 0x13, 0xd6, 0xdb, 0x21, 0xef, 0x61, 0x28, 0xf0, 0x21, 0xf5, 0x80, 0xb4, 0xbe,
	0x9f, 0x6e, 0xf5, 0x3b, 0x02, 0x1f, 0x96, 0x42, 0xee, 0x5b, 0x72, 0xd8, 0x98, 0xaa, 0x56, 0x7f,
	0x39, 0xf4, 0x44, 0x36, 0xcc, 0x56, 0xc3, 0xbf, 0x10, 0x96, 0x7f, 0x01, 0x61, 0xe3, 0x05, 0xec,
	0x41, 0x0f, 0x95, 0x92, 0x2a, 0xf5, 0x37, 0x2f, 0xb2, 0xf5, 0x94, 0x37, 0xae, 0x6e, 0xc7, 0xca,
	0xb9, 0x2a, 0xf9, 0x11, 0xc2, 0x8e, 0x57, 0xfc, 0xaa, 0x51, 0xd5, 0x7a, 0xe7, 0x00, 0x7e, 0x54,
	0x1d, 0x07, 0xa3, 0xb5, 0xf1, 0xe6, 0x71, 0x32, 0x79, 0xe1, 0xe9, 0x4e, 0x3c, 0xc5, 0xa7, 0x70,
	0xfb, 0x2f, 0xda, 0xf8, 0xb3, 0x0c, 0x3c, 0x93, 0xc2, 0xe0, 0xa3, 0x71, 0x56, 0xeb, 0xb2, 0xfd,
	0x42, 0xc8, 0x3e, 0xf4, 0x38, 0x32, 0x5e, 0xe4, 0x02, 0xad, 0xc9, 0x0e, 0xf5, 0x35, 0xf9, 0x00,
	0xc0, 0x8c, 0x51, 0xf9, 0xf5, 0xdc, 0xa0, 0x8e, 0xd7, 0xad, 0x9b, 0xb8, 0xe5, 0xe6, 0xa4, 0x06,
	0x54, 0x1e, 0x96, 0x78, 0xf2, 0x11, 0xfe, 0xbe, 0x65, 0xf7, 0x98, 0xb2, 0x2c, 0x93, 0x73, 0x61,
	0xca, 0xf5, 0x74, 0x47, 0xc1, 0x78, 0xf3, 0x78, 0xb7, 0x45, 0x71, 0x26, 0x4c, 0x6e, 0x16, 0x53,
	0x4e, 0x07, 0x25, 0xfe, 0xa4, 0x82, 0x4f, 0x79, 0xf2, 0x33, 0x84, 0xfd, 0x2f, 0x28, 0xb8, 0x1f,
	0xf3, 0x52, 0x36, 0x77, 0xf5, 0x16, 0xa2, 0x19, 0xa2, 0x5d, 0x7b, 0x60, 0x79, 0xdb, 0xd6, 0x2e,
	0x94, 0xcc, 0x50, 0xeb, 0x29, 0xa7, 0xdd, 0x12, 0x38, 0xe5, 0xab, 0x2c, 0x85, 0xaf, 0xb1, 0xd4,
	0xca, 0x67, 0xed, 0x4f, 0xe4, 0xd3, 0x79, 0x9e, 0x4f, 0x0c, 0x91, 0xc9, 0xef, 0x51, 0xce, 0x4d,
	0xbc, 0x6e, 0xe3, 0xa8, 0xcb, 0x56, 0x1a, 0xdd, 0xd7, 0xa5, 0x91, 0x1c, 0xc2, 0x3f, 0x2b, 0x77,
	0xe9, 0x9e, 0x45, 0xeb, 0xa2, 0x5f, 0x77, 0x2d, 0xe5, 0xbb, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x41, 0x5e, 0x6f, 0x6b, 0x60, 0x06, 0x00, 0x00,
}
