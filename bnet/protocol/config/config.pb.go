// Code generated by protoc-gen-go.
// source: bnet/protocol/config/config.proto
// DO NOT EDIT!

/*
Package bnet_protocol_config is a generated protocol buffer package.

It is generated from these files:
	bnet/protocol/config/config.proto

It has these top-level messages:
	RPCMeterConfig
	RPCMethodConfig
*/
package bnet_protocol_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCMeterConfig struct {
	Method           []*RPCMethodConfig `protobuf:"bytes,1,rep,name=method" json:"method,omitempty"`
	IncomePerSecond  *uint32            `protobuf:"varint,2,opt,name=income_per_second,json=incomePerSecond,def=1" json:"income_per_second,omitempty"`
	InitialBalance   *uint32            `protobuf:"varint,3,opt,name=initial_balance,json=initialBalance" json:"initial_balance,omitempty"`
	CapBalance       *uint32            `protobuf:"varint,4,opt,name=cap_balance,json=capBalance" json:"cap_balance,omitempty"`
	StartupPeriod    *float32           `protobuf:"fixed32,5,opt,name=startup_period,json=startupPeriod,def=0" json:"startup_period,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RPCMeterConfig) Reset()                    { *m = RPCMeterConfig{} }
func (m *RPCMeterConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCMeterConfig) ProtoMessage()               {}
func (*RPCMeterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_RPCMeterConfig_IncomePerSecond uint32 = 1
const Default_RPCMeterConfig_StartupPeriod float32 = 0

func (m *RPCMeterConfig) GetMethod() []*RPCMethodConfig {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *RPCMeterConfig) GetIncomePerSecond() uint32 {
	if m != nil && m.IncomePerSecond != nil {
		return *m.IncomePerSecond
	}
	return Default_RPCMeterConfig_IncomePerSecond
}

func (m *RPCMeterConfig) GetInitialBalance() uint32 {
	if m != nil && m.InitialBalance != nil {
		return *m.InitialBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetCapBalance() uint32 {
	if m != nil && m.CapBalance != nil {
		return *m.CapBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetStartupPeriod() float32 {
	if m != nil && m.StartupPeriod != nil {
		return *m.StartupPeriod
	}
	return Default_RPCMeterConfig_StartupPeriod
}

type RPCMethodConfig struct {
	ServiceName        *string  `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	MethodName         *string  `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	FixedCallCost      *uint32  `protobuf:"varint,3,opt,name=fixed_call_cost,json=fixedCallCost,def=1" json:"fixed_call_cost,omitempty"`
	FixedPacketSize    *uint32  `protobuf:"varint,4,opt,name=fixed_packet_size,json=fixedPacketSize,def=0" json:"fixed_packet_size,omitempty"`
	VariableMultiplier *float32 `protobuf:"fixed32,5,opt,name=variable_multiplier,json=variableMultiplier,def=0" json:"variable_multiplier,omitempty"`
	Multiplier         *float32 `protobuf:"fixed32,6,opt,name=multiplier,def=1" json:"multiplier,omitempty"`
	RateLimitCount     *uint32  `protobuf:"varint,7,opt,name=rate_limit_count,json=rateLimitCount" json:"rate_limit_count,omitempty"`
	RateLimitSeconds   *uint32  `protobuf:"varint,8,opt,name=rate_limit_seconds,json=rateLimitSeconds" json:"rate_limit_seconds,omitempty"`
	MaxPacketSize      *uint32  `protobuf:"varint,9,opt,name=max_packet_size,json=maxPacketSize" json:"max_packet_size,omitempty"`
	MaxEncodedSize     *uint32  `protobuf:"varint,10,opt,name=max_encoded_size,json=maxEncodedSize" json:"max_encoded_size,omitempty"`
	Timeout            *float32 `protobuf:"fixed32,11,opt,name=timeout" json:"timeout,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *RPCMethodConfig) Reset()                    { *m = RPCMethodConfig{} }
func (m *RPCMethodConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCMethodConfig) ProtoMessage()               {}
func (*RPCMethodConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_RPCMethodConfig_FixedCallCost uint32 = 1
const Default_RPCMethodConfig_FixedPacketSize uint32 = 0
const Default_RPCMethodConfig_VariableMultiplier float32 = 0
const Default_RPCMethodConfig_Multiplier float32 = 1

func (m *RPCMethodConfig) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *RPCMethodConfig) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *RPCMethodConfig) GetFixedCallCost() uint32 {
	if m != nil && m.FixedCallCost != nil {
		return *m.FixedCallCost
	}
	return Default_RPCMethodConfig_FixedCallCost
}

func (m *RPCMethodConfig) GetFixedPacketSize() uint32 {
	if m != nil && m.FixedPacketSize != nil {
		return *m.FixedPacketSize
	}
	return Default_RPCMethodConfig_FixedPacketSize
}

func (m *RPCMethodConfig) GetVariableMultiplier() float32 {
	if m != nil && m.VariableMultiplier != nil {
		return *m.VariableMultiplier
	}
	return Default_RPCMethodConfig_VariableMultiplier
}

func (m *RPCMethodConfig) GetMultiplier() float32 {
	if m != nil && m.Multiplier != nil {
		return *m.Multiplier
	}
	return Default_RPCMethodConfig_Multiplier
}

func (m *RPCMethodConfig) GetRateLimitCount() uint32 {
	if m != nil && m.RateLimitCount != nil {
		return *m.RateLimitCount
	}
	return 0
}

func (m *RPCMethodConfig) GetRateLimitSeconds() uint32 {
	if m != nil && m.RateLimitSeconds != nil {
		return *m.RateLimitSeconds
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxPacketSize() uint32 {
	if m != nil && m.MaxPacketSize != nil {
		return *m.MaxPacketSize
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxEncodedSize() uint32 {
	if m != nil && m.MaxEncodedSize != nil {
		return *m.MaxEncodedSize
	}
	return 0
}

func (m *RPCMethodConfig) GetTimeout() float32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

func init() {
	proto.RegisterType((*RPCMeterConfig)(nil), "bnet.protocol.config.RPCMeterConfig")
	proto.RegisterType((*RPCMethodConfig)(nil), "bnet.protocol.config.RPCMethodConfig")
}

func init() { proto.RegisterFile("bnet/protocol/config/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0x16, 0x36, 0x76, 0x4a, 0x9b, 0x62, 0xb8, 0xc8, 0x1d, 0xed, 0x24, 0x20, 0x48,
	0x90, 0xb1, 0x5d, 0x4e, 0xe2, 0x86, 0x88, 0x3b, 0x86, 0xaa, 0xec, 0x01, 0x2c, 0xd7, 0x39, 0x63,
	0x16, 0xfe, 0x13, 0x39, 0xee, 0x54, 0xf5, 0x11, 0x79, 0x1c, 0x9e, 0x00, 0xd9, 0x27, 0x2d, 0x05,
	0xed, 0xaa, 0xea, 0xef, 0xfb, 0x9d, 0xf8, 0x7c, 0x36, 0x2c, 0xd7, 0x16, 0xc3, 0x45, 0xe7, 0x5d,
	0x70, 0xd2, 0xe9, 0x0b, 0xe9, 0xec, 0x9d, 0xfa, 0x31, 0xfc, 0x54, 0x09, 0xb3, 0x57, 0x51, 0xa9,
	0xf6, 0x4a, 0x45, 0xd9, 0xf9, 0xef, 0x0c, 0x66, 0xcd, 0xaa, 0xbe, 0xc1, 0x80, 0xbe, 0x4e, 0x88,
	0x7d, 0x86, 0x13, 0x83, 0xe1, 0xde, 0xb5, 0x45, 0xb6, 0x18, 0x97, 0x93, 0xab, 0x37, 0xd5, 0x63,
	0x93, 0x15, 0x4d, 0xdd, 0xbb, 0x96, 0xc6, 0x9a, 0x61, 0x88, 0x7d, 0x84, 0x17, 0xca, 0x4a, 0x67,
	0x90, 0x77, 0xe8, 0x79, 0x8f, 0xd2, 0xd9, 0xb6, 0x18, 0x2d, 0xb2, 0x72, 0x7a, 0x9d, 0x5d, 0x36,
	0x39, 0x65, 0x2b, 0xf4, 0xb7, 0x29, 0x61, 0xef, 0x20, 0x57, 0x56, 0x05, 0x25, 0x34, 0x5f, 0x0b,
	0x2d, 0xac, 0xc4, 0x62, 0x1c, 0xe5, 0x66, 0x36, 0xe0, 0x2f, 0x44, 0xd9, 0x6b, 0x98, 0x48, 0xd1,
	0x1d, 0xa4, 0x27, 0x49, 0x02, 0x29, 0xba, 0xbd, 0x50, 0xc2, 0xac, 0x0f, 0xc2, 0x87, 0x4d, 0x17,
	0x4f, 0x56, 0xae, 0x2d, 0x9e, 0x2e, 0xb2, 0x72, 0x74, 0x9d, 0x7d, 0x6a, 0xa6, 0x43, 0xb0, 0x4a,
	0xfc, 0xfc, 0xd7, 0x18, 0xf2, 0xff, 0xd6, 0x67, 0x4b, 0x78, 0xde, 0xa3, 0x7f, 0x50, 0x12, 0xb9,
	0x15, 0x06, 0x8b, 0x6c, 0x91, 0x95, 0x67, 0xcd, 0x64, 0x60, 0xdf, 0x85, 0x49, 0x1b, 0x50, 0x47,
	0x32, 0x46, 0xc9, 0x00, 0x42, 0x49, 0x78, 0x0f, 0xf9, 0x9d, 0xda, 0x62, 0xcb, 0xa5, 0xd0, 0x9a,
	0x4b, 0xd7, 0x07, 0xea, 0x12, 0x8b, 0x4f, 0x53, 0x52, 0x0b, 0xad, 0x6b, 0xd7, 0x87, 0x78, 0x4b,
	0xa4, 0x76, 0x42, 0xfe, 0xc4, 0xc0, 0x7b, 0xb5, 0x1b, 0x3a, 0xc5, 0x7d, 0xe9, 0x33, 0xab, 0x14,
	0xdd, 0xaa, 0x1d, 0xb2, 0x2b, 0x78, 0xf9, 0x20, 0xbc, 0x12, 0x6b, 0x8d, 0xdc, 0x6c, 0x74, 0x50,
	0x9d, 0x56, 0xe8, 0xff, 0x16, 0x64, 0xfb, 0xf4, 0xe6, 0x10, 0xb2, 0x25, 0xc0, 0x91, 0x7a, 0x42,
	0xea, 0x65, 0x73, 0x04, 0x59, 0x09, 0x73, 0x2f, 0x02, 0x72, 0xad, 0x8c, 0x0a, 0x5c, 0xba, 0x8d,
	0x0d, 0xc5, 0x29, 0xdd, 0x7e, 0xe4, 0xdf, 0x22, 0xae, 0x23, 0x65, 0x1f, 0x80, 0x1d, 0x99, 0xf4,
	0xaa, 0x7d, 0xf1, 0x2c, 0xb9, 0xf3, 0x83, 0x4b, 0x6f, 0xda, 0xb3, 0xb7, 0x90, 0x1b, 0xb1, 0xfd,
	0xa7, 0xdb, 0x59, 0x52, 0xa7, 0x46, 0x6c, 0x8f, 0x6a, 0x95, 0x30, 0x8f, 0x1e, 0x5a, 0xe9, 0x5a,
	0x6c, 0x49, 0x04, 0x3a, 0xdf, 0x88, 0xed, 0x57, 0xc2, 0xc9, 0x2c, 0xe0, 0x34, 0x28, 0x83, 0x6e,
	0x13, 0x8a, 0x49, 0x6c, 0xd2, 0xec, 0xff, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x0b, 0x3b,
	0x14, 0xfb, 0x02, 0x00, 0x00,
}
