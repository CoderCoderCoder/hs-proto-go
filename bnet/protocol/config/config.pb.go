// Code generated by protoc-gen-go.
// source: bnet/protocol/config/config.proto
// DO NOT EDIT!

/*
Package bnet_protocol_config is a generated protocol buffer package.

It is generated from these files:
	bnet/protocol/config/config.proto

It has these top-level messages:
	RPCMeterConfig
	RPCMethodConfig
*/
package bnet_protocol_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ref: bnet.protocol.config.RPCMeterConfig
type RPCMeterConfig struct {
	Method          []*RPCMethodConfig `protobuf:"bytes,1,rep,name=method" json:"method,omitempty"`
	IncomePerSecond uint32             `protobuf:"varint,2,opt,name=income_per_second,json=incomePerSecond" json:"income_per_second,omitempty"`
	InitialBalance  uint32             `protobuf:"varint,3,opt,name=initial_balance,json=initialBalance" json:"initial_balance,omitempty"`
	CapBalance      uint32             `protobuf:"varint,4,opt,name=cap_balance,json=capBalance" json:"cap_balance,omitempty"`
	StartupPeriod   float32            `protobuf:"fixed32,5,opt,name=startup_period,json=startupPeriod" json:"startup_period,omitempty"`
}

func (m *RPCMeterConfig) Reset()                    { *m = RPCMeterConfig{} }
func (m *RPCMeterConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCMeterConfig) ProtoMessage()               {}
func (*RPCMeterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RPCMeterConfig) GetMethod() []*RPCMethodConfig {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *RPCMeterConfig) GetIncomePerSecond() uint32 {
	if m != nil {
		return m.IncomePerSecond
	}
	return 0
}

func (m *RPCMeterConfig) GetInitialBalance() uint32 {
	if m != nil {
		return m.InitialBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetCapBalance() uint32 {
	if m != nil {
		return m.CapBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetStartupPeriod() float32 {
	if m != nil {
		return m.StartupPeriod
	}
	return 0
}

// ref: bnet.protocol.config.RPCMethodConfig
type RPCMethodConfig struct {
	ServiceName        string  `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	MethodName         string  `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	FixedCallCost      uint32  `protobuf:"varint,3,opt,name=fixed_call_cost,json=fixedCallCost" json:"fixed_call_cost,omitempty"`
	FixedPacketSize    uint32  `protobuf:"varint,4,opt,name=fixed_packet_size,json=fixedPacketSize" json:"fixed_packet_size,omitempty"`
	VariableMultiplier float32 `protobuf:"fixed32,5,opt,name=variable_multiplier,json=variableMultiplier" json:"variable_multiplier,omitempty"`
	Multiplier         float32 `protobuf:"fixed32,6,opt,name=multiplier" json:"multiplier,omitempty"`
	RateLimitCount     uint32  `protobuf:"varint,7,opt,name=rate_limit_count,json=rateLimitCount" json:"rate_limit_count,omitempty"`
	RateLimitSeconds   uint32  `protobuf:"varint,8,opt,name=rate_limit_seconds,json=rateLimitSeconds" json:"rate_limit_seconds,omitempty"`
	MaxPacketSize      uint32  `protobuf:"varint,9,opt,name=max_packet_size,json=maxPacketSize" json:"max_packet_size,omitempty"`
	MaxEncodedSize     uint32  `protobuf:"varint,10,opt,name=max_encoded_size,json=maxEncodedSize" json:"max_encoded_size,omitempty"`
	Timeout            float32 `protobuf:"fixed32,11,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *RPCMethodConfig) Reset()                    { *m = RPCMethodConfig{} }
func (m *RPCMethodConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCMethodConfig) ProtoMessage()               {}
func (*RPCMethodConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RPCMethodConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RPCMethodConfig) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *RPCMethodConfig) GetFixedCallCost() uint32 {
	if m != nil {
		return m.FixedCallCost
	}
	return 0
}

func (m *RPCMethodConfig) GetFixedPacketSize() uint32 {
	if m != nil {
		return m.FixedPacketSize
	}
	return 0
}

func (m *RPCMethodConfig) GetVariableMultiplier() float32 {
	if m != nil {
		return m.VariableMultiplier
	}
	return 0
}

func (m *RPCMethodConfig) GetMultiplier() float32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *RPCMethodConfig) GetRateLimitCount() uint32 {
	if m != nil {
		return m.RateLimitCount
	}
	return 0
}

func (m *RPCMethodConfig) GetRateLimitSeconds() uint32 {
	if m != nil {
		return m.RateLimitSeconds
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxPacketSize() uint32 {
	if m != nil {
		return m.MaxPacketSize
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxEncodedSize() uint32 {
	if m != nil {
		return m.MaxEncodedSize
	}
	return 0
}

func (m *RPCMethodConfig) GetTimeout() float32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func init() {
	proto.RegisterType((*RPCMeterConfig)(nil), "bnet.protocol.config.RPCMeterConfig")
	proto.RegisterType((*RPCMethodConfig)(nil), "bnet.protocol.config.RPCMethodConfig")
}

func init() { proto.RegisterFile("bnet/protocol/config/config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x49, 0x0b, 0x1d, 0x3b, 0xa5, 0x1f, 0x18, 0x2e, 0x7c, 0x05, 0xdd, 0xa4, 0x41, 0x84,
	0x50, 0x2a, 0xc1, 0x13, 0xb0, 0x88, 0x3b, 0x86, 0xaa, 0xec, 0x01, 0x2c, 0xd7, 0x39, 0x63, 0x16,
	0xfe, 0x88, 0x1c, 0x77, 0xaa, 0xf6, 0x70, 0x3c, 0x13, 0x8f, 0x80, 0xe2, 0x93, 0x54, 0x01, 0x71,
	0x15, 0xe5, 0x77, 0x7e, 0x27, 0x27, 0x7f, 0x1f, 0xc3, 0xc5, 0xde, 0x61, 0xdc, 0x36, 0xc1, 0x47,
	0xaf, 0xbc, 0xd9, 0x2a, 0xef, 0xee, 0xf4, 0x8f, 0xfe, 0x51, 0x24, 0xcc, 0x5e, 0x77, 0x4a, 0x31,
	0x28, 0x05, 0xd5, 0x2e, 0x7f, 0x67, 0xb0, 0xac, 0x76, 0xe5, 0x0d, 0x46, 0x0c, 0x65, 0x42, 0xec,
	0x0b, 0xcc, 0x2c, 0xc6, 0x7b, 0x5f, 0xf3, 0x6c, 0x33, 0xcd, 0xe7, 0x9f, 0xae, 0x8a, 0xff, 0x75,
	0x16, 0xd4, 0x75, 0xef, 0x6b, 0x6a, 0xbb, 0x9e, 0xac, 0x9f, 0x54, 0x7d, 0x23, 0xfb, 0x00, 0x2f,
	0xb5, 0x53, 0xde, 0xa2, 0x68, 0x30, 0x88, 0x16, 0x95, 0x77, 0x35, 0x9f, 0x6c, 0xb2, 0x7c, 0x51,
	0xad, 0xa8, 0xb0, 0xc3, 0x70, 0x9b, 0x30, 0x7b, 0x0f, 0x2b, 0xed, 0x74, 0xd4, 0xd2, 0x88, 0xbd,
	0x34, 0xd2, 0x29, 0xe4, 0xd3, 0x64, 0x2e, 0x7b, 0x7c, 0x4d, 0x94, 0xbd, 0x85, 0xb9, 0x92, 0xcd,
	0x49, 0x7a, 0x9a, 0x24, 0x50, 0xb2, 0x19, 0x84, 0x2b, 0x58, 0xb6, 0x51, 0x86, 0x78, 0x68, 0xba,
	0xb1, 0xda, 0xd7, 0xfc, 0xd9, 0x26, 0xcb, 0x27, 0xd5, 0xa2, 0xa7, 0xbb, 0x04, 0x2f, 0x7f, 0x4d,
	0x61, 0xf5, 0xcf, 0xcf, 0xb3, 0x0b, 0x78, 0xd1, 0x62, 0x78, 0xd0, 0x0a, 0x85, 0x93, 0x16, 0x79,
	0xb6, 0xc9, 0xf2, 0xf3, 0x6a, 0xde, 0xb3, 0xef, 0xd2, 0xa6, 0xf1, 0x94, 0x8e, 0x8c, 0x49, 0x32,
	0x80, 0x50, 0x12, 0xde, 0xc1, 0xea, 0x4e, 0x1f, 0xb1, 0x16, 0x4a, 0x1a, 0x23, 0x94, 0x6f, 0x63,
	0x1f, 0x64, 0x91, 0x70, 0x29, 0x8d, 0x29, 0x7d, 0x1b, 0xbb, 0xc3, 0x21, 0xaf, 0x91, 0xea, 0x27,
	0x46, 0xd1, 0xea, 0xc7, 0x21, 0x0d, 0x7d, 0x60, 0x97, 0xf8, 0xad, 0x7e, 0x44, 0xb6, 0x85, 0x57,
	0x0f, 0x32, 0x68, 0xb9, 0x37, 0x28, 0xec, 0xc1, 0x44, 0xdd, 0x18, 0x8d, 0xa1, 0xcf, 0xc5, 0x86,
	0xd2, 0xcd, 0xa9, 0xc2, 0xde, 0x00, 0x8c, 0xbc, 0x59, 0xf2, 0x46, 0x84, 0xe5, 0xb0, 0x0e, 0x32,
	0xa2, 0x30, 0xda, 0xea, 0x28, 0x94, 0x3f, 0xb8, 0xc8, 0xcf, 0xe8, 0xb8, 0x3b, 0xfe, 0xad, 0xc3,
	0x65, 0x47, 0xd9, 0x47, 0x60, 0x23, 0x93, 0x76, 0xd8, 0xf2, 0xe7, 0xc9, 0x5d, 0x9f, 0x5c, 0x5a,
	0x62, 0xdb, 0x85, 0xb7, 0xf2, 0xf8, 0x57, 0xa4, 0x73, 0x0a, 0x6f, 0xe5, 0x71, 0x14, 0x28, 0x87,
	0x75, 0xe7, 0xa1, 0x53, 0xbe, 0xc6, 0x9a, 0x44, 0xa0, 0xf9, 0x56, 0x1e, 0xbf, 0x12, 0x4e, 0x26,
	0x87, 0xb3, 0xa8, 0x2d, 0xfa, 0x43, 0xe4, 0xf3, 0x14, 0x63, 0x78, 0xdd, 0xcf, 0xd2, 0x55, 0xfc,
	0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0xac, 0x72, 0x19, 0x48, 0xf5, 0x02, 0x00, 0x00,
}
