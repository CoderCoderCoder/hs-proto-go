// Code generated by protoc-gen-go.
// source: bnet/protocol/channel_extracted/channel_extracted.proto
// DO NOT EDIT!

package bnet_protocol_channel_extracted

import proto "github.com/golang/protobuf/proto"
import json "encoding/json"
import math "math"
import bnet_protocol_chat "github.com/HearthSim/hs-proto-go/bnet/protocol/chat"
import bnet_protocol_friends "github.com/HearthSim/hs-proto-go/bnet/protocol/friends"
import bnet_protocol_presence "github.com/HearthSim/hs-proto-go/bnet/protocol/presence"
import bnet_protocol "github.com/HearthSim/hs-proto-go/bnet/protocol"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

// ref: bnet.protocol.channel.ChannelState/Types/PrivacyLevel
type ChannelState_PrivacyLevel int32

const (
	ChannelState_PRIVACY_LEVEL_OPEN                       ChannelState_PrivacyLevel = 1
	ChannelState_PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND ChannelState_PrivacyLevel = 2
	ChannelState_PRIVACY_LEVEL_OPEN_INVITATION            ChannelState_PrivacyLevel = 3
	ChannelState_PRIVACY_LEVEL_CLOSED                     ChannelState_PrivacyLevel = 4
)

var ChannelState_PrivacyLevel_name = map[int32]string{
	1: "PRIVACY_LEVEL_OPEN",
	2: "PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND",
	3: "PRIVACY_LEVEL_OPEN_INVITATION",
	4: "PRIVACY_LEVEL_CLOSED",
}
var ChannelState_PrivacyLevel_value = map[string]int32{
	"PRIVACY_LEVEL_OPEN":                       1,
	"PRIVACY_LEVEL_OPEN_INVITATION_AND_FRIEND": 2,
	"PRIVACY_LEVEL_OPEN_INVITATION":            3,
	"PRIVACY_LEVEL_CLOSED":                     4,
}

func (x ChannelState_PrivacyLevel) Enum() *ChannelState_PrivacyLevel {
	p := new(ChannelState_PrivacyLevel)
	*p = x
	return p
}
func (x ChannelState_PrivacyLevel) String() string {
	return proto.EnumName(ChannelState_PrivacyLevel_name, int32(x))
}
func (x ChannelState_PrivacyLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *ChannelState_PrivacyLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChannelState_PrivacyLevel_value, data, "ChannelState_PrivacyLevel")
	if err != nil {
		return err
	}
	*x = ChannelState_PrivacyLevel(value)
	return nil
}

// ref: bnet.protocol.channel.ChannelDescription
type ChannelDescription struct {
	ChannelId        *bnet_protocol.EntityId `protobuf:"bytes,1,req,name=channel_id" json:"channel_id,omitempty"`
	CurrentMembers   *uint32                 `protobuf:"varint,2,opt,name=current_members" json:"current_members,omitempty"`
	State            *ChannelState           `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ChannelDescription) Reset()         { *m = ChannelDescription{} }
func (m *ChannelDescription) String() string { return proto.CompactTextString(m) }
func (*ChannelDescription) ProtoMessage()    {}

func (m *ChannelDescription) GetChannelId() *bnet_protocol.EntityId {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *ChannelDescription) GetCurrentMembers() uint32 {
	if m != nil && m.CurrentMembers != nil {
		return *m.CurrentMembers
	}
	return 0
}

func (m *ChannelDescription) GetState() *ChannelState {
	if m != nil {
		return m.State
	}
	return nil
}

// ref: bnet.protocol.channel_invitation.ChannelInvitation
type ChannelInvitation struct {
	ChannelDescription *ChannelDescription `protobuf:"bytes,1,req,name=channel_description" json:"channel_description,omitempty"`
	Reserved           *bool               `protobuf:"varint,2,opt,name=reserved,def=0" json:"reserved,omitempty"`
	Rejoin             *bool               `protobuf:"varint,3,opt,name=rejoin,def=0" json:"rejoin,omitempty"`
	ServiceType        *uint32             `protobuf:"varint,4,req,name=service_type" json:"service_type,omitempty"`
	XXX_unrecognized   []byte              `json:"-"`
}

func (m *ChannelInvitation) Reset()         { *m = ChannelInvitation{} }
func (m *ChannelInvitation) String() string { return proto.CompactTextString(m) }
func (*ChannelInvitation) ProtoMessage()    {}

const Default_ChannelInvitation_Reserved bool = false
const Default_ChannelInvitation_Rejoin bool = false

func (m *ChannelInvitation) GetChannelDescription() *ChannelDescription {
	if m != nil {
		return m.ChannelDescription
	}
	return nil
}

func (m *ChannelInvitation) GetReserved() bool {
	if m != nil && m.Reserved != nil {
		return *m.Reserved
	}
	return Default_ChannelInvitation_Reserved
}

func (m *ChannelInvitation) GetRejoin() bool {
	if m != nil && m.Rejoin != nil {
		return *m.Rejoin
	}
	return Default_ChannelInvitation_Rejoin
}

func (m *ChannelInvitation) GetServiceType() uint32 {
	if m != nil && m.ServiceType != nil {
		return *m.ServiceType
	}
	return 0
}

// ref: bnet.protocol.channel.ChannelState
type ChannelState struct {
	MaxMembers          *uint32                              `protobuf:"varint,1,opt,name=max_members" json:"max_members,omitempty"`
	MinMembers          *uint32                              `protobuf:"varint,2,opt,name=min_members" json:"min_members,omitempty"`
	Attribute           []*bnet_protocol.Attribute           `protobuf:"bytes,3,rep,name=attribute" json:"attribute,omitempty"`
	Invitation          []*Invitation                        `protobuf:"bytes,4,rep,name=invitation" json:"invitation,omitempty"`
	MaxInvitations      *uint32                              `protobuf:"varint,5,opt,name=max_invitations" json:"max_invitations,omitempty"`
	Reason              *uint32                              `protobuf:"varint,6,opt,name=reason" json:"reason,omitempty"`
	PrivacyLevel        *ChannelState_PrivacyLevel           `protobuf:"varint,7,opt,name=privacy_level,enum=bnet.protocol.channel_extracted.ChannelState_PrivacyLevel,def=1" json:"privacy_level,omitempty"`
	Name                *string                              `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	DelegateName        *string                              `protobuf:"bytes,9,opt,name=delegate_name" json:"delegate_name,omitempty"`
	ChannelType         *string                              `protobuf:"bytes,10,opt,name=channel_type,def=default" json:"channel_type,omitempty"`
	Program             *uint32                              `protobuf:"fixed32,11,opt,name=program,def=0" json:"program,omitempty"`
	AllowOfflineMembers *bool                                `protobuf:"varint,12,opt,name=allow_offline_members,def=0" json:"allow_offline_members,omitempty"`
	SubscribeToPresence *bool                                `protobuf:"varint,13,opt,name=subscribe_to_presence,def=1" json:"subscribe_to_presence,omitempty"`
	Chat                *bnet_protocol_chat.ChannelState     `protobuf:"bytes,100,opt,name=chat" json:"chat,omitempty"`
	Presence            *bnet_protocol_presence.ChannelState `protobuf:"bytes,101,opt,name=presence" json:"presence,omitempty"`
	XXX_unrecognized    []byte                               `json:"-"`
}

func (m *ChannelState) Reset()         { *m = ChannelState{} }
func (m *ChannelState) String() string { return proto.CompactTextString(m) }
func (*ChannelState) ProtoMessage()    {}

const Default_ChannelState_PrivacyLevel ChannelState_PrivacyLevel = ChannelState_PRIVACY_LEVEL_OPEN
const Default_ChannelState_ChannelType string = "default"
const Default_ChannelState_Program uint32 = 0
const Default_ChannelState_AllowOfflineMembers bool = false
const Default_ChannelState_SubscribeToPresence bool = true

func (m *ChannelState) GetMaxMembers() uint32 {
	if m != nil && m.MaxMembers != nil {
		return *m.MaxMembers
	}
	return 0
}

func (m *ChannelState) GetMinMembers() uint32 {
	if m != nil && m.MinMembers != nil {
		return *m.MinMembers
	}
	return 0
}

func (m *ChannelState) GetAttribute() []*bnet_protocol.Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *ChannelState) GetInvitation() []*Invitation {
	if m != nil {
		return m.Invitation
	}
	return nil
}

func (m *ChannelState) GetMaxInvitations() uint32 {
	if m != nil && m.MaxInvitations != nil {
		return *m.MaxInvitations
	}
	return 0
}

func (m *ChannelState) GetReason() uint32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return 0
}

func (m *ChannelState) GetPrivacyLevel() ChannelState_PrivacyLevel {
	if m != nil && m.PrivacyLevel != nil {
		return *m.PrivacyLevel
	}
	return Default_ChannelState_PrivacyLevel
}

func (m *ChannelState) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ChannelState) GetDelegateName() string {
	if m != nil && m.DelegateName != nil {
		return *m.DelegateName
	}
	return ""
}

func (m *ChannelState) GetChannelType() string {
	if m != nil && m.ChannelType != nil {
		return *m.ChannelType
	}
	return Default_ChannelState_ChannelType
}

func (m *ChannelState) GetProgram() uint32 {
	if m != nil && m.Program != nil {
		return *m.Program
	}
	return Default_ChannelState_Program
}

func (m *ChannelState) GetAllowOfflineMembers() bool {
	if m != nil && m.AllowOfflineMembers != nil {
		return *m.AllowOfflineMembers
	}
	return Default_ChannelState_AllowOfflineMembers
}

func (m *ChannelState) GetSubscribeToPresence() bool {
	if m != nil && m.SubscribeToPresence != nil {
		return *m.SubscribeToPresence
	}
	return Default_ChannelState_SubscribeToPresence
}

func (m *ChannelState) GetChat() *bnet_protocol_chat.ChannelState {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *ChannelState) GetPresence() *bnet_protocol_presence.ChannelState {
	if m != nil {
		return m.Presence
	}
	return nil
}

// ref: bnet.protocol.invitation.Invitation
type Invitation struct {
	Id                *uint64                                 `protobuf:"fixed64,1,req,name=id" json:"id,omitempty"`
	InviterIdentity   *bnet_protocol.Identity                 `protobuf:"bytes,2,req,name=inviter_identity" json:"inviter_identity,omitempty"`
	InviteeIdentity   *bnet_protocol.Identity                 `protobuf:"bytes,3,req,name=invitee_identity" json:"invitee_identity,omitempty"`
	InviterName       *string                                 `protobuf:"bytes,4,opt,name=inviter_name" json:"inviter_name,omitempty"`
	InviteeName       *string                                 `protobuf:"bytes,5,opt,name=invitee_name" json:"invitee_name,omitempty"`
	InvitationMessage *string                                 `protobuf:"bytes,6,opt,name=invitation_message" json:"invitation_message,omitempty"`
	CreationTime      *uint64                                 `protobuf:"varint,7,opt,name=creation_time" json:"creation_time,omitempty"`
	ExpirationTime    *uint64                                 `protobuf:"varint,8,opt,name=expiration_time" json:"expiration_time,omitempty"`
	FriendInvite      *bnet_protocol_friends.FriendInvitation `protobuf:"bytes,103,opt,name=friend_invite" json:"friend_invite,omitempty"`
	ChannelInvitation *ChannelInvitation                      `protobuf:"bytes,105,opt,name=channel_invitation" json:"channel_invitation,omitempty"`
	XXX_unrecognized  []byte                                  `json:"-"`
}

func (m *Invitation) Reset()         { *m = Invitation{} }
func (m *Invitation) String() string { return proto.CompactTextString(m) }
func (*Invitation) ProtoMessage()    {}

func (m *Invitation) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Invitation) GetInviterIdentity() *bnet_protocol.Identity {
	if m != nil {
		return m.InviterIdentity
	}
	return nil
}

func (m *Invitation) GetInviteeIdentity() *bnet_protocol.Identity {
	if m != nil {
		return m.InviteeIdentity
	}
	return nil
}

func (m *Invitation) GetInviterName() string {
	if m != nil && m.InviterName != nil {
		return *m.InviterName
	}
	return ""
}

func (m *Invitation) GetInviteeName() string {
	if m != nil && m.InviteeName != nil {
		return *m.InviteeName
	}
	return ""
}

func (m *Invitation) GetInvitationMessage() string {
	if m != nil && m.InvitationMessage != nil {
		return *m.InvitationMessage
	}
	return ""
}

func (m *Invitation) GetCreationTime() uint64 {
	if m != nil && m.CreationTime != nil {
		return *m.CreationTime
	}
	return 0
}

func (m *Invitation) GetExpirationTime() uint64 {
	if m != nil && m.ExpirationTime != nil {
		return *m.ExpirationTime
	}
	return 0
}

func (m *Invitation) GetFriendInvite() *bnet_protocol_friends.FriendInvitation {
	if m != nil {
		return m.FriendInvite
	}
	return nil
}

func (m *Invitation) GetChannelInvitation() *ChannelInvitation {
	if m != nil {
		return m.ChannelInvitation
	}
	return nil
}

// ref: bnet.protocol.friends.InvitationNotification
type InvitationNotification struct {
	Invitation       *Invitation             `protobuf:"bytes,1,req,name=invitation" json:"invitation,omitempty"`
	GameAccountId    *bnet_protocol.EntityId `protobuf:"bytes,2,opt,name=game_account_id" json:"game_account_id,omitempty"`
	Reason           *uint32                 `protobuf:"varint,3,opt,name=reason,def=0" json:"reason,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *InvitationNotification) Reset()         { *m = InvitationNotification{} }
func (m *InvitationNotification) String() string { return proto.CompactTextString(m) }
func (*InvitationNotification) ProtoMessage()    {}

const Default_InvitationNotification_Reason uint32 = 0

func (m *InvitationNotification) GetInvitation() *Invitation {
	if m != nil {
		return m.Invitation
	}
	return nil
}

func (m *InvitationNotification) GetGameAccountId() *bnet_protocol.EntityId {
	if m != nil {
		return m.GameAccountId
	}
	return nil
}

func (m *InvitationNotification) GetReason() uint32 {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return Default_InvitationNotification_Reason
}

// ref: bnet.protocol.friends.SubscribeToFriendsResponse
type SubscribeToFriendsResponse struct {
	MaxFriends             *uint32                         `protobuf:"varint,1,opt,name=max_friends" json:"max_friends,omitempty"`
	MaxReceivedInvitations *uint32                         `protobuf:"varint,2,opt,name=max_received_invitations" json:"max_received_invitations,omitempty"`
	MaxSentInvitations     *uint32                         `protobuf:"varint,3,opt,name=max_sent_invitations" json:"max_sent_invitations,omitempty"`
	Role                   []*bnet_protocol.Role           `protobuf:"bytes,4,rep,name=role" json:"role,omitempty"`
	Friends                []*bnet_protocol_friends.Friend `protobuf:"bytes,5,rep,name=friends" json:"friends,omitempty"`
	SentInvitations        []*Invitation                   `protobuf:"bytes,6,rep,name=sent_invitations" json:"sent_invitations,omitempty"`
	ReceivedInvitations    []*Invitation                   `protobuf:"bytes,7,rep,name=received_invitations" json:"received_invitations,omitempty"`
	XXX_unrecognized       []byte                          `json:"-"`
}

func (m *SubscribeToFriendsResponse) Reset()         { *m = SubscribeToFriendsResponse{} }
func (m *SubscribeToFriendsResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeToFriendsResponse) ProtoMessage()    {}

func (m *SubscribeToFriendsResponse) GetMaxFriends() uint32 {
	if m != nil && m.MaxFriends != nil {
		return *m.MaxFriends
	}
	return 0
}

func (m *SubscribeToFriendsResponse) GetMaxReceivedInvitations() uint32 {
	if m != nil && m.MaxReceivedInvitations != nil {
		return *m.MaxReceivedInvitations
	}
	return 0
}

func (m *SubscribeToFriendsResponse) GetMaxSentInvitations() uint32 {
	if m != nil && m.MaxSentInvitations != nil {
		return *m.MaxSentInvitations
	}
	return 0
}

func (m *SubscribeToFriendsResponse) GetRole() []*bnet_protocol.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *SubscribeToFriendsResponse) GetFriends() []*bnet_protocol_friends.Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *SubscribeToFriendsResponse) GetSentInvitations() []*Invitation {
	if m != nil {
		return m.SentInvitations
	}
	return nil
}

func (m *SubscribeToFriendsResponse) GetReceivedInvitations() []*Invitation {
	if m != nil {
		return m.ReceivedInvitations
	}
	return nil
}

func init() {
	proto.RegisterEnum("bnet.protocol.channel_extracted.ChannelState_PrivacyLevel", ChannelState_PrivacyLevel_name, ChannelState_PrivacyLevel_value)
}
