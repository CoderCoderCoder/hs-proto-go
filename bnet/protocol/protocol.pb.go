// Code generated by protoc-gen-go.
// source: bnet/protocol/protocol.proto
// DO NOT EDIT!

/*
Package bnet_protocol is a generated protocol buffer package.

It is generated from these files:
	bnet/protocol/protocol.proto

It has these top-level messages:
	AccountInfo
	Address
	Attribute
	ContentHandle
	EntityId
	ErrorInfo
	Header
	Identity
	NoData
	NORESPONSE
	ObjectAddress
	Path
	Privilege
	ProcessId
	Role
	RoleSet
	RoleSetConfig
	Variant
*/
package bnet_protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ref: bnet.protocol.AccountInfo
type AccountInfo struct {
	AccountPaid  bool   `protobuf:"varint,1,opt,name=account_paid,json=accountPaid" json:"account_paid,omitempty"`
	CountryId    uint32 `protobuf:"fixed32,2,opt,name=country_id,json=countryId" json:"country_id,omitempty"`
	BattleTag    string `protobuf:"bytes,3,opt,name=battle_tag,json=battleTag" json:"battle_tag,omitempty"`
	ManualReview bool   `protobuf:"varint,4,opt,name=manual_review,json=manualReview" json:"manual_review,omitempty"`
}

func (m *AccountInfo) Reset()                    { *m = AccountInfo{} }
func (m *AccountInfo) String() string            { return proto.CompactTextString(m) }
func (*AccountInfo) ProtoMessage()               {}
func (*AccountInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountInfo) GetAccountPaid() bool {
	if m != nil {
		return m.AccountPaid
	}
	return false
}

func (m *AccountInfo) GetCountryId() uint32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *AccountInfo) GetBattleTag() string {
	if m != nil {
		return m.BattleTag
	}
	return ""
}

func (m *AccountInfo) GetManualReview() bool {
	if m != nil {
		return m.ManualReview
	}
	return false
}

// ref: bnet.protocol.Address
type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port    uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// ref: bnet.protocol.attribute.Attribute
type Attribute struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *Variant `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribute) GetValue() *Variant {
	if m != nil {
		return m.Value
	}
	return nil
}

// ref: bnet.protocol.ContentHandle
type ContentHandle struct {
	Region   uint32 `protobuf:"fixed32,1,opt,name=region" json:"region,omitempty"`
	Usage    uint32 `protobuf:"fixed32,2,opt,name=usage" json:"usage,omitempty"`
	Hash     []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	ProtoUrl string `protobuf:"bytes,4,opt,name=proto_url,json=protoUrl" json:"proto_url,omitempty"`
}

func (m *ContentHandle) Reset()                    { *m = ContentHandle{} }
func (m *ContentHandle) String() string            { return proto.CompactTextString(m) }
func (*ContentHandle) ProtoMessage()               {}
func (*ContentHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ContentHandle) GetRegion() uint32 {
	if m != nil {
		return m.Region
	}
	return 0
}

func (m *ContentHandle) GetUsage() uint32 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *ContentHandle) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ContentHandle) GetProtoUrl() string {
	if m != nil {
		return m.ProtoUrl
	}
	return ""
}

// ref: bnet.protocol.EntityId
type EntityId struct {
	High uint64 `protobuf:"fixed64,1,opt,name=high" json:"high,omitempty"`
	Low  uint64 `protobuf:"fixed64,2,opt,name=low" json:"low,omitempty"`
}

func (m *EntityId) Reset()                    { *m = EntityId{} }
func (m *EntityId) String() string            { return proto.CompactTextString(m) }
func (*EntityId) ProtoMessage()               {}
func (*EntityId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EntityId) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *EntityId) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

// ref: bnet.protocol.ErrorInfo
type ErrorInfo struct {
	ObjectAddress *ObjectAddress `protobuf:"bytes,1,opt,name=object_address,json=objectAddress" json:"object_address,omitempty"`
	Status        uint32         `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	ServiceHash   uint32         `protobuf:"varint,3,opt,name=service_hash,json=serviceHash" json:"service_hash,omitempty"`
	MethodId      uint32         `protobuf:"varint,4,opt,name=method_id,json=methodId" json:"method_id,omitempty"`
}

func (m *ErrorInfo) Reset()                    { *m = ErrorInfo{} }
func (m *ErrorInfo) String() string            { return proto.CompactTextString(m) }
func (*ErrorInfo) ProtoMessage()               {}
func (*ErrorInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ErrorInfo) GetObjectAddress() *ObjectAddress {
	if m != nil {
		return m.ObjectAddress
	}
	return nil
}

func (m *ErrorInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ErrorInfo) GetServiceHash() uint32 {
	if m != nil {
		return m.ServiceHash
	}
	return 0
}

func (m *ErrorInfo) GetMethodId() uint32 {
	if m != nil {
		return m.MethodId
	}
	return 0
}

// ref: bnet.protocol.Header
type Header struct {
	ServiceId uint32       `protobuf:"varint,1,opt,name=service_id,json=serviceId" json:"service_id,omitempty"`
	MethodId  uint32       `protobuf:"varint,2,opt,name=method_id,json=methodId" json:"method_id,omitempty"`
	Token     uint32       `protobuf:"varint,3,opt,name=token" json:"token,omitempty"`
	ObjectId  uint64       `protobuf:"varint,4,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
	Size      uint32       `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Status    uint32       `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	Error     []*ErrorInfo `protobuf:"bytes,7,rep,name=error" json:"error,omitempty"`
	Timeout   uint64       `protobuf:"varint,8,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Header) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *Header) GetMethodId() uint32 {
	if m != nil {
		return m.MethodId
	}
	return 0
}

func (m *Header) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *Header) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *Header) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Header) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Header) GetError() []*ErrorInfo {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Header) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// ref: bnet.protocol.Identity
type Identity struct {
	AccountId     *EntityId `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	GameAccountId *EntityId `protobuf:"bytes,2,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Identity) GetAccountId() *EntityId {
	if m != nil {
		return m.AccountId
	}
	return nil
}

func (m *Identity) GetGameAccountId() *EntityId {
	if m != nil {
		return m.GameAccountId
	}
	return nil
}

// ref: bnet.protocol.NoData
type NoData struct {
}

func (m *NoData) Reset()                    { *m = NoData{} }
func (m *NoData) String() string            { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()               {}
func (*NoData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// ref: bnet.protocol.NORESPONSE
type NORESPONSE struct {
}

func (m *NORESPONSE) Reset()                    { *m = NORESPONSE{} }
func (m *NORESPONSE) String() string            { return proto.CompactTextString(m) }
func (*NORESPONSE) ProtoMessage()               {}
func (*NORESPONSE) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// ref: bnet.protocol.ObjectAddress
type ObjectAddress struct {
	Host     *ProcessId `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	ObjectId uint64     `protobuf:"varint,2,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
}

func (m *ObjectAddress) Reset()                    { *m = ObjectAddress{} }
func (m *ObjectAddress) String() string            { return proto.CompactTextString(m) }
func (*ObjectAddress) ProtoMessage()               {}
func (*ObjectAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ObjectAddress) GetHost() *ProcessId {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *ObjectAddress) GetObjectId() uint64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

// ref: bnet.protocol.Path
type Path struct {
	Ordinal []uint32 `protobuf:"varint,1,rep,packed,name=ordinal" json:"ordinal,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Path) GetOrdinal() []uint32 {
	if m != nil {
		return m.Ordinal
	}
	return nil
}

// ref: bnet.protocol.Privilege
type Privilege struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Privilege) Reset()                    { *m = Privilege{} }
func (m *Privilege) String() string            { return proto.CompactTextString(m) }
func (*Privilege) ProtoMessage()               {}
func (*Privilege) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Privilege) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Privilege) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// ref: bnet.protocol.ProcessId
type ProcessId struct {
	Label uint32 `protobuf:"varint,1,opt,name=label" json:"label,omitempty"`
	Epoch uint32 `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *ProcessId) Reset()                    { *m = ProcessId{} }
func (m *ProcessId) String() string            { return proto.CompactTextString(m) }
func (*ProcessId) ProtoMessage()               {}
func (*ProcessId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ProcessId) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *ProcessId) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// ref: bnet.protocol.Role
type Role struct {
	Id             uint32       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name           string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Privilege      []string     `protobuf:"bytes,3,rep,name=privilege" json:"privilege,omitempty"`
	AssignableRole []uint32     `protobuf:"varint,4,rep,packed,name=assignable_role,json=assignableRole" json:"assignable_role,omitempty"`
	Required       bool         `protobuf:"varint,5,opt,name=required" json:"required,omitempty"`
	Unique         bool         `protobuf:"varint,6,opt,name=unique" json:"unique,omitempty"`
	RelegationRole uint32       `protobuf:"varint,7,opt,name=relegation_role,json=relegationRole" json:"relegation_role,omitempty"`
	Attribute      []*Attribute `protobuf:"bytes,8,rep,name=attribute" json:"attribute,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Role) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetPrivilege() []string {
	if m != nil {
		return m.Privilege
	}
	return nil
}

func (m *Role) GetAssignableRole() []uint32 {
	if m != nil {
		return m.AssignableRole
	}
	return nil
}

func (m *Role) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *Role) GetUnique() bool {
	if m != nil {
		return m.Unique
	}
	return false
}

func (m *Role) GetRelegationRole() uint32 {
	if m != nil {
		return m.RelegationRole
	}
	return 0
}

func (m *Role) GetAttribute() []*Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

// ref: bnet.protocol.RoleSet
type RoleSet struct {
	Program     string       `protobuf:"bytes,1,opt,name=program" json:"program,omitempty"`
	Service     string       `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Subtype     string       `protobuf:"bytes,3,opt,name=subtype" json:"subtype,omitempty"`
	Role        []*Role      `protobuf:"bytes,4,rep,name=role" json:"role,omitempty"`
	DefaultRole []uint32     `protobuf:"varint,5,rep,packed,name=default_role,json=defaultRole" json:"default_role,omitempty"`
	MaxMembers  int32        `protobuf:"varint,6,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	Attribute   []*Attribute `protobuf:"bytes,7,rep,name=attribute" json:"attribute,omitempty"`
}

func (m *RoleSet) Reset()                    { *m = RoleSet{} }
func (m *RoleSet) String() string            { return proto.CompactTextString(m) }
func (*RoleSet) ProtoMessage()               {}
func (*RoleSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RoleSet) GetProgram() string {
	if m != nil {
		return m.Program
	}
	return ""
}

func (m *RoleSet) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *RoleSet) GetSubtype() string {
	if m != nil {
		return m.Subtype
	}
	return ""
}

func (m *RoleSet) GetRole() []*Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *RoleSet) GetDefaultRole() []uint32 {
	if m != nil {
		return m.DefaultRole
	}
	return nil
}

func (m *RoleSet) GetMaxMembers() int32 {
	if m != nil {
		return m.MaxMembers
	}
	return 0
}

func (m *RoleSet) GetAttribute() []*Attribute {
	if m != nil {
		return m.Attribute
	}
	return nil
}

// ref: bnet.protocol.RoleSetConfig
type RoleSetConfig struct {
	Privilege []*Privilege `protobuf:"bytes,1,rep,name=privilege" json:"privilege,omitempty"`
	RoleSet   *RoleSet     `protobuf:"bytes,2,opt,name=role_set,json=roleSet" json:"role_set,omitempty"`
}

func (m *RoleSetConfig) Reset()                    { *m = RoleSetConfig{} }
func (m *RoleSetConfig) String() string            { return proto.CompactTextString(m) }
func (*RoleSetConfig) ProtoMessage()               {}
func (*RoleSetConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RoleSetConfig) GetPrivilege() []*Privilege {
	if m != nil {
		return m.Privilege
	}
	return nil
}

func (m *RoleSetConfig) GetRoleSet() *RoleSet {
	if m != nil {
		return m.RoleSet
	}
	return nil
}

// ref: bnet.protocol.attribute.Variant
type Variant struct {
	BoolValue     bool      `protobuf:"varint,2,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	IntValue      int64     `protobuf:"varint,3,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	FloatValue    float64   `protobuf:"fixed64,4,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	StringValue   string    `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BlobValue     []byte    `protobuf:"bytes,6,opt,name=blob_value,json=blobValue,proto3" json:"blob_value,omitempty"`
	MessageValue  []byte    `protobuf:"bytes,7,opt,name=message_value,json=messageValue,proto3" json:"message_value,omitempty"`
	FourccValue   string    `protobuf:"bytes,8,opt,name=fourcc_value,json=fourccValue" json:"fourcc_value,omitempty"`
	UintValue     uint64    `protobuf:"varint,9,opt,name=uint_value,json=uintValue" json:"uint_value,omitempty"`
	EntityidValue *EntityId `protobuf:"bytes,10,opt,name=entityid_value,json=entityidValue" json:"entityid_value,omitempty"`
}

func (m *Variant) Reset()                    { *m = Variant{} }
func (m *Variant) String() string            { return proto.CompactTextString(m) }
func (*Variant) ProtoMessage()               {}
func (*Variant) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Variant) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *Variant) GetIntValue() int64 {
	if m != nil {
		return m.IntValue
	}
	return 0
}

func (m *Variant) GetFloatValue() float64 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *Variant) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *Variant) GetBlobValue() []byte {
	if m != nil {
		return m.BlobValue
	}
	return nil
}

func (m *Variant) GetMessageValue() []byte {
	if m != nil {
		return m.MessageValue
	}
	return nil
}

func (m *Variant) GetFourccValue() string {
	if m != nil {
		return m.FourccValue
	}
	return ""
}

func (m *Variant) GetUintValue() uint64 {
	if m != nil {
		return m.UintValue
	}
	return 0
}

func (m *Variant) GetEntityidValue() *EntityId {
	if m != nil {
		return m.EntityidValue
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountInfo)(nil), "bnet.protocol.AccountInfo")
	proto.RegisterType((*Address)(nil), "bnet.protocol.Address")
	proto.RegisterType((*Attribute)(nil), "bnet.protocol.Attribute")
	proto.RegisterType((*ContentHandle)(nil), "bnet.protocol.ContentHandle")
	proto.RegisterType((*EntityId)(nil), "bnet.protocol.EntityId")
	proto.RegisterType((*ErrorInfo)(nil), "bnet.protocol.ErrorInfo")
	proto.RegisterType((*Header)(nil), "bnet.protocol.Header")
	proto.RegisterType((*Identity)(nil), "bnet.protocol.Identity")
	proto.RegisterType((*NoData)(nil), "bnet.protocol.NoData")
	proto.RegisterType((*NORESPONSE)(nil), "bnet.protocol.NORESPONSE")
	proto.RegisterType((*ObjectAddress)(nil), "bnet.protocol.ObjectAddress")
	proto.RegisterType((*Path)(nil), "bnet.protocol.Path")
	proto.RegisterType((*Privilege)(nil), "bnet.protocol.Privilege")
	proto.RegisterType((*ProcessId)(nil), "bnet.protocol.ProcessId")
	proto.RegisterType((*Role)(nil), "bnet.protocol.Role")
	proto.RegisterType((*RoleSet)(nil), "bnet.protocol.RoleSet")
	proto.RegisterType((*RoleSetConfig)(nil), "bnet.protocol.RoleSetConfig")
	proto.RegisterType((*Variant)(nil), "bnet.protocol.Variant")
}

func init() { proto.RegisterFile("bnet/protocol/protocol.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x8e, 0xdc, 0x44,
	0x10, 0x66, 0x7e, 0x6d, 0x97, 0xd7, 0x9b, 0xc8, 0x44, 0xc1, 0x82, 0xa0, 0x0c, 0xe6, 0xc0, 0x48,
	0x44, 0x0b, 0x0c, 0x82, 0x48, 0x1c, 0x40, 0x21, 0xac, 0xb4, 0x73, 0xc8, 0xee, 0xaa, 0x17, 0x72,
	0xe0, 0x62, 0xf5, 0x8c, 0x6b, 0x3d, 0x0d, 0x1e, 0xf7, 0xa4, 0xdd, 0xde, 0x24, 0x1c, 0xb8, 0xc0,
	0x99, 0x0b, 0x2f, 0xc1, 0xdb, 0xf0, 0x2c, 0xbc, 0x01, 0xea, 0xea, 0xb6, 0xe7, 0x47, 0x0b, 0x88,
	0x5b, 0xd5, 0xd7, 0x5f, 0x57, 0x75, 0x7d, 0x5d, 0x5d, 0x0d, 0x0f, 0x16, 0x15, 0xea, 0x8f, 0x36,
	0x4a, 0x6a, 0xb9, 0x94, 0x65, 0x67, 0x9c, 0x90, 0x11, 0x47, 0x66, 0xf5, 0xa4, 0x05, 0xd3, 0xdf,
	0x7b, 0x10, 0x3e, 0x59, 0x2e, 0x65, 0x53, 0xe9, 0x79, 0x75, 0x2d, 0xe3, 0xf7, 0xe0, 0x88, 0x5b,
	0x37, 0xdb, 0x70, 0x91, 0x27, 0xbd, 0x49, 0x6f, 0xea, 0xb3, 0xd0, 0x61, 0x97, 0x5c, 0xe4, 0xf1,
	0xbb, 0x00, 0xe4, 0xa8, 0xd7, 0x99, 0xc8, 0x93, 0xfe, 0xa4, 0x37, 0xf5, 0x58, 0xe0, 0x90, 0x39,
	0x2d, 0x2f, 0xb8, 0xd6, 0x25, 0x66, 0x9a, 0x17, 0xc9, 0x60, 0xd2, 0x9b, 0x06, 0x2c, 0xb0, 0xc8,
	0xb7, 0xbc, 0x88, 0xdf, 0x87, 0x68, 0xcd, 0xab, 0x86, 0x97, 0x99, 0xc2, 0x1b, 0x81, 0x2f, 0x93,
	0x21, 0x65, 0x38, 0xb2, 0x20, 0x23, 0x2c, 0x7d, 0x0c, 0xde, 0x93, 0x3c, 0x57, 0x58, 0xd7, 0x71,
	0x02, 0x1e, 0xb7, 0x26, 0x9d, 0x25, 0x60, 0xad, 0x1b, 0xc7, 0x30, 0xdc, 0x48, 0xa5, 0xe9, 0x04,
	0x11, 0x23, 0x3b, 0x7d, 0x06, 0xc1, 0x13, 0xad, 0x95, 0x58, 0x34, 0x1a, 0x0d, 0xa1, 0xe2, 0x6b,
	0x74, 0xfb, 0xc8, 0x8e, 0x1f, 0xc1, 0xe8, 0x86, 0x97, 0x0d, 0xd2, 0xae, 0x70, 0x76, 0xff, 0x64,
	0x4f, 0x8e, 0x93, 0xe7, 0x5c, 0x09, 0x5e, 0x69, 0x66, 0x49, 0x69, 0x05, 0xd1, 0x53, 0x59, 0x69,
	0xac, 0xf4, 0x19, 0xaf, 0xf2, 0x12, 0xe3, 0xfb, 0x30, 0x56, 0x58, 0x08, 0x59, 0x51, 0x50, 0x8f,
	0x39, 0x2f, 0xbe, 0x07, 0xa3, 0xa6, 0xe6, 0x05, 0x3a, 0x39, 0xac, 0x63, 0x0e, 0xb0, 0xe2, 0xf5,
	0x8a, 0x44, 0x38, 0x62, 0x64, 0xc7, 0xef, 0x40, 0x40, 0xd9, 0xb2, 0x46, 0x95, 0x54, 0x7b, 0xc0,
	0x7c, 0x02, 0xbe, 0x53, 0x65, 0xfa, 0x31, 0xf8, 0xa7, 0x95, 0x16, 0xda, 0xe8, 0x68, 0x36, 0x8b,
	0x62, 0x45, 0x89, 0xc6, 0x8c, 0xec, 0xf8, 0x2e, 0x0c, 0x4a, 0xf9, 0x92, 0x92, 0x8c, 0x99, 0x31,
	0xd3, 0x3f, 0x7a, 0x10, 0x9c, 0x2a, 0x25, 0x15, 0xdd, 0xde, 0x53, 0x38, 0x96, 0x8b, 0x1f, 0x70,
	0xa9, 0xb3, 0x5d, 0xcd, 0xc2, 0xd9, 0x83, 0x83, 0x32, 0x2f, 0x88, 0xe4, 0x24, 0x66, 0x91, 0xdc,
	0x75, 0x4d, 0x8d, 0xb5, 0xe6, 0xba, 0xa9, 0x9d, 0xb2, 0xce, 0x33, 0xad, 0x51, 0xa3, 0xba, 0x11,
	0x4b, 0xcc, 0xba, 0xaa, 0x22, 0x16, 0x3a, 0xec, 0xcc, 0x15, 0xb7, 0x46, 0xbd, 0x92, 0xb9, 0xe9,
	0x8c, 0x21, 0xad, 0xfb, 0x16, 0x98, 0xe7, 0xe9, 0x5f, 0x3d, 0x18, 0x9f, 0x21, 0xcf, 0x51, 0x99,
	0x1e, 0x69, 0x43, 0xb9, 0x1e, 0x8b, 0x58, 0xe0, 0x90, 0x79, 0xbe, 0x1f, 0xa6, 0xbf, 0x1f, 0xc6,
	0x48, 0xad, 0xe5, 0x8f, 0x58, 0xb9, 0xfc, 0xd6, 0x31, 0x5b, 0x5c, 0xe5, 0x2e, 0xf3, 0x90, 0xf9,
	0x16, 0xb0, 0x52, 0xd6, 0xe2, 0x27, 0x4c, 0x46, 0xb6, 0x53, 0x8c, 0xbd, 0x53, 0xe5, 0x78, 0xaf,
	0xca, 0x19, 0x8c, 0xd0, 0xe8, 0x99, 0x78, 0x93, 0xc1, 0x34, 0x9c, 0x25, 0x07, 0xca, 0x75, 0x5a,
	0x7f, 0xdd, 0xbf, 0xfb, 0x06, 0xb3, 0x54, 0xd3, 0xa3, 0x5a, 0xac, 0x51, 0x36, 0x3a, 0xf1, 0x29,
	0x75, 0xeb, 0xa6, 0xbf, 0xf4, 0xc0, 0x9f, 0xe7, 0x48, 0x77, 0x1a, 0x7f, 0x0e, 0xd0, 0xbe, 0x2d,
	0x57, 0x75, 0x38, 0x7b, 0xeb, 0x30, 0xbe, 0xbb, 0x7e, 0x16, 0x38, 0xea, 0x3c, 0x8f, 0xbf, 0x82,
	0x3b, 0x05, 0x5f, 0x63, 0xb6, 0xb3, 0xb9, 0xff, 0xef, 0x9b, 0x23, 0xc3, 0x6f, 0x9f, 0x75, 0x9e,
	0xfa, 0x30, 0x3e, 0x97, 0xdf, 0x70, 0xcd, 0xd3, 0x23, 0x80, 0xf3, 0x0b, 0x76, 0x7a, 0x75, 0x79,
	0x71, 0x7e, 0x75, 0x9a, 0x7e, 0x0f, 0xd1, 0x5e, 0x27, 0xc4, 0x8f, 0x60, 0xb8, 0x92, 0xb5, 0x76,
	0x67, 0x3b, 0xac, 0xfd, 0x52, 0xc9, 0x25, 0xd6, 0xf5, 0x3c, 0x67, 0xc4, 0xda, 0xd7, 0xbc, 0xbf,
	0xaf, 0x79, 0x3a, 0x81, 0xe1, 0x25, 0xd7, 0x2b, 0xa3, 0x8d, 0x54, 0xb9, 0xa8, 0x78, 0x99, 0xf4,
	0x26, 0x83, 0x69, 0xc4, 0x5a, 0x37, 0xfd, 0x0c, 0x82, 0x4b, 0x25, 0x6e, 0x44, 0x89, 0xc5, 0xed,
	0x6f, 0xf5, 0xde, 0xee, 0x5b, 0x8d, 0xda, 0x37, 0xf9, 0xd8, 0x6c, 0x73, 0x07, 0x31, 0x94, 0x92,
	0x2f, 0xb0, 0x74, 0x3d, 0x64, 0x1d, 0x83, 0xe2, 0x46, 0x2e, 0x57, 0xed, 0x46, 0x72, 0xd2, 0xdf,
	0xfa, 0x30, 0x64, 0xb2, 0xc4, 0xf8, 0x18, 0xfa, 0x5d, 0xd7, 0xf5, 0x45, 0xde, 0xe5, 0xee, 0xef,
	0xe4, 0x9e, 0x98, 0x67, 0xea, 0x0e, 0x97, 0x0c, 0x26, 0x83, 0x69, 0x40, 0x17, 0xbe, 0x05, 0xe3,
	0x0f, 0xe0, 0x0e, 0xaf, 0x6b, 0x51, 0x54, 0x7c, 0x51, 0x62, 0xa6, 0x64, 0x89, 0xc9, 0x90, 0x0a,
	0x3c, 0xde, 0xc2, 0x94, 0xee, 0x6d, 0xf0, 0x15, 0xbe, 0x68, 0x84, 0xc2, 0x9c, 0x3a, 0xd0, 0x67,
	0x9d, 0x6f, 0xba, 0xb0, 0xa9, 0xc4, 0x8b, 0x06, 0xa9, 0x0b, 0x7d, 0xe6, 0x3c, 0x13, 0x5c, 0x61,
	0x89, 0x05, 0xd7, 0x42, 0x56, 0x36, 0xb8, 0x47, 0xe7, 0x3d, 0xde, 0xc2, 0x14, 0xfc, 0x0b, 0x08,
	0x78, 0x3b, 0xf0, 0x12, 0xff, 0xd6, 0x96, 0xed, 0x06, 0xa2, 0xad, 0xa0, 0xa3, 0xa7, 0xbf, 0xf6,
	0xc1, 0x33, 0x41, 0xae, 0x50, 0x9b, 0x6b, 0xda, 0x28, 0x59, 0x28, 0xbe, 0x6e, 0xc7, 0xac, 0x73,
	0xcd, 0x8a, 0x7b, 0x99, 0x4e, 0xa0, 0xd6, 0xa5, 0x95, 0x66, 0xa1, 0x5f, 0x6f, 0xd0, 0x8d, 0xf9,
	0xd6, 0x8d, 0x3f, 0x84, 0x61, 0x27, 0x48, 0x38, 0x7b, 0xf3, 0xe0, 0x40, 0x26, 0x27, 0x9d, 0x85,
	0x48, 0x66, 0xae, 0xe4, 0x78, 0xcd, 0x9b, 0x52, 0xdb, 0x42, 0x47, 0xa4, 0x62, 0xe8, 0x30, 0xaa,
	0xf2, 0x21, 0x84, 0x6b, 0xfe, 0x2a, 0x5b, 0xe3, 0x7a, 0x81, 0xca, 0xbe, 0xd8, 0x11, 0x83, 0x35,
	0x7f, 0xf5, 0xcc, 0x22, 0xfb, 0x32, 0x78, 0xff, 0x4f, 0x86, 0x9f, 0x21, 0x72, 0x2a, 0x3c, 0x95,
	0xd5, 0xb5, 0x28, 0x4c, 0xb0, 0xed, 0xdd, 0xf7, 0x6e, 0x0d, 0xd6, 0x35, 0xee, 0x61, 0x57, 0x7c,
	0x02, 0xbe, 0x29, 0x22, 0xab, 0x51, 0xff, 0xc3, 0x17, 0xe3, 0x72, 0x31, 0x4f, 0x59, 0x23, 0xfd,
	0xb3, 0x0f, 0x9e, 0xfb, 0x77, 0xe8, 0xf3, 0x94, 0xb2, 0xcc, 0xb6, 0x7d, 0xef, 0xb3, 0xc0, 0x20,
	0xcf, 0x0d, 0x60, 0x5e, 0x9c, 0xa8, 0xb4, 0x5b, 0x35, 0x9a, 0x0f, 0x98, 0x2f, 0x2a, 0x6d, 0x17,
	0x1f, 0x42, 0x78, 0x5d, 0x4a, 0xde, 0x2e, 0x9b, 0x21, 0xd8, 0x63, 0x40, 0x90, 0x25, 0x98, 0x01,
	0xae, 0x95, 0xa8, 0x0a, 0xc7, 0x18, 0xd1, 0xa5, 0x85, 0x16, 0xb3, 0x14, 0x93, 0xbf, 0x94, 0x0b,
	0x47, 0x18, 0xd3, 0xbf, 0x15, 0x18, 0xc4, 0x2e, 0x9b, 0xcf, 0x1b, 0x6b, 0xf3, 0xb7, 0x39, 0x86,
	0x47, 0x8c, 0x23, 0x07, 0x76, 0x69, 0xae, 0x65, 0xa3, 0x96, 0x4b, 0xc7, 0xf1, 0x6d, 0x1a, 0x8b,
	0x75, 0x69, 0x9a, 0x6d, 0x21, 0x01, 0x8d, 0x8e, 0xa0, 0xe9, 0x2a, 0xf9, 0x12, 0x8e, 0xed, 0xc8,
	0x14, 0xb9, 0xa3, 0xc0, 0x7f, 0xcc, 0xbb, 0x96, 0x4e, 0xfb, 0x17, 0x63, 0x62, 0x7c, 0xfa, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x05, 0x7c, 0x2d, 0x0a, 0x09, 0x00, 0x00,
}
