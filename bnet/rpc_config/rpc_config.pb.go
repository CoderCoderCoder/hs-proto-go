// Code generated by protoc-gen-go.
// source: github.com/HearthSim/hs-proto-go/bnet/rpc_config/rpc_config.proto
// DO NOT EDIT!

/*
Package rpc_config is a generated protocol buffer package.

It is generated from these files:
	github.com/HearthSim/hs-proto-go/bnet/rpc_config/rpc_config.proto

It has these top-level messages:
	RPCMethodConfig
	RPCMeterConfig
*/
package rpc_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type RPCMethodConfig struct {
	ServiceName        *string  `protobuf:"bytes,1,opt,name=service_name" json:"service_name,omitempty"`
	MethodName         *string  `protobuf:"bytes,2,opt,name=method_name" json:"method_name,omitempty"`
	FixedCallCost      *uint32  `protobuf:"varint,3,opt,name=fixed_call_cost,def=1" json:"fixed_call_cost,omitempty"`
	FixedPacketSize    *uint32  `protobuf:"varint,4,opt,name=fixed_packet_size,def=0" json:"fixed_packet_size,omitempty"`
	VariableMultiplier *float32 `protobuf:"fixed32,5,opt,name=variable_multiplier,def=0" json:"variable_multiplier,omitempty"`
	Multiplier         *float32 `protobuf:"fixed32,6,opt,name=multiplier,def=1" json:"multiplier,omitempty"`
	RateLimitCount     *uint32  `protobuf:"varint,7,opt,name=rate_limit_count" json:"rate_limit_count,omitempty"`
	RateLimitSeconds   *uint32  `protobuf:"varint,8,opt,name=rate_limit_seconds" json:"rate_limit_seconds,omitempty"`
	MaxPacketSize      *uint32  `protobuf:"varint,9,opt,name=max_packet_size" json:"max_packet_size,omitempty"`
	MaxEncodedSize     *uint32  `protobuf:"varint,10,opt,name=max_encoded_size" json:"max_encoded_size,omitempty"`
	Timeout            *float32 `protobuf:"fixed32,11,opt,name=timeout" json:"timeout,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *RPCMethodConfig) Reset()                    { *m = RPCMethodConfig{} }
func (m *RPCMethodConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCMethodConfig) ProtoMessage()               {}
func (*RPCMethodConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_RPCMethodConfig_FixedCallCost uint32 = 1
const Default_RPCMethodConfig_FixedPacketSize uint32 = 0
const Default_RPCMethodConfig_VariableMultiplier float32 = 0
const Default_RPCMethodConfig_Multiplier float32 = 1

func (m *RPCMethodConfig) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *RPCMethodConfig) GetMethodName() string {
	if m != nil && m.MethodName != nil {
		return *m.MethodName
	}
	return ""
}

func (m *RPCMethodConfig) GetFixedCallCost() uint32 {
	if m != nil && m.FixedCallCost != nil {
		return *m.FixedCallCost
	}
	return Default_RPCMethodConfig_FixedCallCost
}

func (m *RPCMethodConfig) GetFixedPacketSize() uint32 {
	if m != nil && m.FixedPacketSize != nil {
		return *m.FixedPacketSize
	}
	return Default_RPCMethodConfig_FixedPacketSize
}

func (m *RPCMethodConfig) GetVariableMultiplier() float32 {
	if m != nil && m.VariableMultiplier != nil {
		return *m.VariableMultiplier
	}
	return Default_RPCMethodConfig_VariableMultiplier
}

func (m *RPCMethodConfig) GetMultiplier() float32 {
	if m != nil && m.Multiplier != nil {
		return *m.Multiplier
	}
	return Default_RPCMethodConfig_Multiplier
}

func (m *RPCMethodConfig) GetRateLimitCount() uint32 {
	if m != nil && m.RateLimitCount != nil {
		return *m.RateLimitCount
	}
	return 0
}

func (m *RPCMethodConfig) GetRateLimitSeconds() uint32 {
	if m != nil && m.RateLimitSeconds != nil {
		return *m.RateLimitSeconds
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxPacketSize() uint32 {
	if m != nil && m.MaxPacketSize != nil {
		return *m.MaxPacketSize
	}
	return 0
}

func (m *RPCMethodConfig) GetMaxEncodedSize() uint32 {
	if m != nil && m.MaxEncodedSize != nil {
		return *m.MaxEncodedSize
	}
	return 0
}

func (m *RPCMethodConfig) GetTimeout() float32 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

type RPCMeterConfig struct {
	Method           []*RPCMethodConfig `protobuf:"bytes,1,rep,name=method" json:"method,omitempty"`
	IncomePerSecond  *uint32            `protobuf:"varint,2,opt,name=income_per_second,def=1" json:"income_per_second,omitempty"`
	InitialBalance   *uint32            `protobuf:"varint,3,opt,name=initial_balance" json:"initial_balance,omitempty"`
	CapBalance       *uint32            `protobuf:"varint,4,opt,name=cap_balance" json:"cap_balance,omitempty"`
	StartupPeriod    *float32           `protobuf:"fixed32,5,opt,name=startup_period,def=0" json:"startup_period,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RPCMeterConfig) Reset()                    { *m = RPCMeterConfig{} }
func (m *RPCMeterConfig) String() string            { return proto.CompactTextString(m) }
func (*RPCMeterConfig) ProtoMessage()               {}
func (*RPCMeterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_RPCMeterConfig_IncomePerSecond uint32 = 1
const Default_RPCMeterConfig_StartupPeriod float32 = 0

func (m *RPCMeterConfig) GetMethod() []*RPCMethodConfig {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *RPCMeterConfig) GetIncomePerSecond() uint32 {
	if m != nil && m.IncomePerSecond != nil {
		return *m.IncomePerSecond
	}
	return Default_RPCMeterConfig_IncomePerSecond
}

func (m *RPCMeterConfig) GetInitialBalance() uint32 {
	if m != nil && m.InitialBalance != nil {
		return *m.InitialBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetCapBalance() uint32 {
	if m != nil && m.CapBalance != nil {
		return *m.CapBalance
	}
	return 0
}

func (m *RPCMeterConfig) GetStartupPeriod() float32 {
	if m != nil && m.StartupPeriod != nil {
		return *m.StartupPeriod
	}
	return Default_RPCMeterConfig_StartupPeriod
}

func init() {
	proto.RegisterType((*RPCMethodConfig)(nil), "rpc_config.RPCMethodConfig")
	proto.RegisterType((*RPCMeterConfig)(nil), "rpc_config.RPCMeterConfig")
}

var fileDescriptor0 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x95, 0x16, 0x5a, 0x3a, 0x85, 0x06, 0x5c, 0x10, 0xe6, 0x8f, 0x10, 0xea, 0xa9, 0x12,
	0x6a, 0x43, 0x39, 0x72, 0x43, 0xbd, 0x70, 0x41, 0x42, 0xf0, 0x00, 0x96, 0xe3, 0x4c, 0x9b, 0x11,
	0x76, 0x1c, 0x39, 0x4e, 0x55, 0xf1, 0x3c, 0x2b, 0xed, 0x6b, 0xae, 0xe3, 0x74, 0x77, 0xb3, 0x7b,
	0x8b, 0xbe, 0xdf, 0x68, 0xe6, 0xcb, 0xcf, 0xf0, 0xe3, 0x48, 0xbe, 0x6c, 0xf3, 0xad, 0xb2, 0x26,
	0xfb, 0x89, 0xd2, 0xf9, 0xf2, 0x2f, 0x99, 0xac, 0x6c, 0x36, 0xb5, 0xb3, 0xde, 0x6e, 0x8e, 0x36,
	0xcb, 0x2b, 0xf4, 0x99, 0xab, 0x95, 0x50, 0xb6, 0x3a, 0xd0, 0x71, 0xf0, 0xb9, 0x8d, 0x33, 0x0c,
	0xee, 0x93, 0xd5, 0xf5, 0x08, 0xd2, 0x3f, 0xbf, 0xf7, 0xbf, 0xd0, 0x97, 0xb6, 0xd8, 0xc7, 0x8c,
	0xbd, 0x86, 0xe7, 0x0d, 0xba, 0x13, 0x29, 0x14, 0x95, 0x34, 0xc8, 0x93, 0xcf, 0xc9, 0x7a, 0xc6,
	0x96, 0x30, 0x37, 0x71, 0xaa, 0x0f, 0x47, 0x31, 0x7c, 0x0f, 0xe9, 0x81, 0xce, 0x58, 0x08, 0x25,
	0xb5, 0x0e, 0x3b, 0x1b, 0xcf, 0xc7, 0x01, 0xbc, 0xf8, 0x9e, 0xec, 0xd8, 0x47, 0x78, 0xd5, 0xb3,
	0x5a, 0xaa, 0x7f, 0xe8, 0x45, 0x43, 0xff, 0x91, 0x3f, 0xe9, 0xe9, 0x57, 0xf6, 0x09, 0x96, 0x27,
	0xe9, 0x48, 0xe6, 0x1a, 0x85, 0x69, 0xb5, 0xa7, 0x5a, 0x13, 0x3a, 0xfe, 0x34, 0xf0, 0x51, 0xc7,
	0xdf, 0x00, 0x0c, 0xe2, 0x49, 0x1f, 0xef, 0x18, 0x87, 0x97, 0x4e, 0x7a, 0x14, 0x9a, 0x0c, 0xf9,
	0x70, 0xb0, 0xad, 0x3c, 0x9f, 0x76, 0x3b, 0x43, 0x15, 0x36, 0x20, 0x0d, 0x86, 0x1f, 0x2c, 0x1a,
	0xfe, 0x2c, 0xb2, 0xb7, 0x90, 0x1a, 0x79, 0x7e, 0x50, 0x64, 0x16, 0x41, 0x58, 0xd7, 0x01, 0xac,
	0x94, 0x2d, 0x42, 0xd3, 0x48, 0x20, 0x92, 0x14, 0xa6, 0x9e, 0x0c, 0xda, 0xd6, 0xf3, 0x79, 0x77,
	0x7c, 0x75, 0x95, 0xc0, 0xa2, 0x37, 0x85, 0xee, 0x22, 0xea, 0x0b, 0x4c, 0x7a, 0x25, 0x41, 0xd1,
	0x78, 0x3d, 0xff, 0xf6, 0x61, 0x3b, 0x70, 0xfd, 0xd8, 0x6a, 0xd0, 0x41, 0xe1, 0x8c, 0x41, 0x51,
	0xa3, 0xbb, 0xf4, 0x8b, 0x16, 0xa3, 0xac, 0xd0, 0x90, 0x2a, 0xf2, 0x24, 0xb5, 0xc8, 0xa5, 0x96,
	0x95, 0xc2, 0x5e, 0x64, 0xa7, 0x5d, 0xc9, 0xfa, 0x2e, 0x8c, 0xfe, 0xd8, 0x3b, 0x58, 0x34, 0x3e,
	0xbc, 0x7d, 0x5b, 0x77, 0xcb, 0x28, 0x14, 0xb8, 0xf5, 0x76, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3a,
	0xb7, 0x29, 0xe3, 0x20, 0x02, 0x00, 0x00,
}
