// Code generated by protoc-gen-go.
// source: pegasus/pegasusshared/pegasusshared.proto
// DO NOT EDIT!

/*
Package pegasus_pegasusshared is a generated protocol buffer package.

It is generated from these files:
	pegasus/pegasusshared/pegasusshared.proto

It has these top-level messages:
	AccountLicenseInfo
	AdventureProgress
	AssetKey
	AssetRecordInfo
	BnetId
	BoosterInfo
	CachedCard
	CachedCollection
	CardDef
	CardStack
	DatabaseDeckCard
	DatabaseDeckContent
	Date
	DeckCardData
	DeckInfo
	DeckRulesetDbRecord
	DeckRulesetRuleDbRecord
	DeckRulesetValidationResults
	DeckRulesetViolation
	FavoriteHero
	FSGConfig
	FSGPatron
	GPSCoords
	LocalizedString
	LocalizedStringValue
	Platform
	PlayerIdentity
	PlayQueueInfo
	ProfileNoticeAccountLicense
	ProfileNoticeAdventureProgress
	ProfileNoticeBonusStars
	ProfileNoticeCardBack
	ProfileNoticeDisconnectedGameResult
	ProfileNoticeLevelUp
	ProfileNoticeMedal
	ProfileNoticePreconDeck
	ProfileNoticePurchase
	ProfileNoticeRewardBooster
	ProfileNoticeRewardCard
	ProfileNoticeRewardCard2X
	ProfileNoticeRewardDust
	ProfileNoticeRewardForge
	ProfileNoticeRewardGold
	ProfileNoticeRewardMount
	ProfileNoticeTavernBrawlRewards
	ProfileNoticeTavernBrawlTicket
	RewardBag
	RewardChest
	ScenarioDbRecord
	SubsetCardListDbRecord
	TavernBrawlPlayerRecord
	TavernBrawlPlayerSession
	TavernBrawlSpec
	TavernSignData
	Vector2
*/
package pegasus_pegasusshared

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ref: PegasusShared.AssetType
type AssetType int32

const (
	AssetType_ASSETTYPE_AUTO_INVALID  AssetType = 0
	AssetType_ASSET_TYPE_SCENARIO     AssetType = 1
	AssetType_ASSET_TYPE_SUBSET_CARD  AssetType = 2
	AssetType_ASSET_TYPE_DECK_RULESET AssetType = 3
)

var AssetType_name = map[int32]string{
	0: "ASSETTYPE_AUTO_INVALID",
	1: "ASSET_TYPE_SCENARIO",
	2: "ASSET_TYPE_SUBSET_CARD",
	3: "ASSET_TYPE_DECK_RULESET",
}
var AssetType_value = map[string]int32{
	"ASSETTYPE_AUTO_INVALID":  0,
	"ASSET_TYPE_SCENARIO":     1,
	"ASSET_TYPE_SUBSET_CARD":  2,
	"ASSET_TYPE_DECK_RULESET": 3,
}

func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}
func (AssetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ref: PegasusShared.BattlePayProvider
type BattlePayProvider int32

const (
	BattlePayProvider_BATTLEPAYPROVIDER_AUTO_INVALID BattlePayProvider = 0
	BattlePayProvider_BP_PROVIDER_BLIZZARD           BattlePayProvider = 1
	BattlePayProvider_BP_PROVIDER_APPLE              BattlePayProvider = 2
	BattlePayProvider_BP_PROVIDER_GOOGLE_PLAY        BattlePayProvider = 3
	BattlePayProvider_BP_PROVIDER_AMAZON             BattlePayProvider = 4
)

var BattlePayProvider_name = map[int32]string{
	0: "BATTLEPAYPROVIDER_AUTO_INVALID",
	1: "BP_PROVIDER_BLIZZARD",
	2: "BP_PROVIDER_APPLE",
	3: "BP_PROVIDER_GOOGLE_PLAY",
	4: "BP_PROVIDER_AMAZON",
}
var BattlePayProvider_value = map[string]int32{
	"BATTLEPAYPROVIDER_AUTO_INVALID": 0,
	"BP_PROVIDER_BLIZZARD":           1,
	"BP_PROVIDER_APPLE":              2,
	"BP_PROVIDER_GOOGLE_PLAY":        3,
	"BP_PROVIDER_AMAZON":             4,
}

func (x BattlePayProvider) String() string {
	return proto.EnumName(BattlePayProvider_name, int32(x))
}
func (BattlePayProvider) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ref: PegasusShared.BnetGameType
type BnetGameType int32

const (
	BnetGameType_BGT_UNKNOWN                  BnetGameType = 0
	BnetGameType_BGT_FRIENDS                  BnetGameType = 1
	BnetGameType_BGT_RANKED_STANDARD          BnetGameType = 2
	BnetGameType_BGT_ARENA                    BnetGameType = 3
	BnetGameType_BGT_VS_AI                    BnetGameType = 4
	BnetGameType_BGT_TUTORIAL                 BnetGameType = 5
	BnetGameType_BGT_ASYNC                    BnetGameType = 6
	BnetGameType_BGT_CASUAL_STANDARD_NEWBIE   BnetGameType = 9
	BnetGameType_BGT_CASUAL_STANDARD_NORMAL   BnetGameType = 10
	BnetGameType_BGT_TEST1                    BnetGameType = 11
	BnetGameType_BGT_TEST2                    BnetGameType = 12
	BnetGameType_BGT_TEST3                    BnetGameType = 13
	BnetGameType_BGT_TAVERNBRAWL_PVP          BnetGameType = 16
	BnetGameType_BGT_TAVERNBRAWL_1P_VERSUS_AI BnetGameType = 17
	BnetGameType_BGT_TAVERNBRAWL_2P_COOP      BnetGameType = 18
	BnetGameType_BGT_RANKED_WILD              BnetGameType = 30
	BnetGameType_BGT_CASUAL_WILD              BnetGameType = 31
	BnetGameType_BGT_FSG_BRAWL_VS_FRIEND      BnetGameType = 40
	BnetGameType_BGT_FSG_BRAWL_PVP            BnetGameType = 41
	BnetGameType_BGT_FSG_BRAWL_1P_VERSUS_AI   BnetGameType = 42
	BnetGameType_BGT_FSG_BRAWL_2P_COOP        BnetGameType = 43
	BnetGameType_BGT_LAST                     BnetGameType = 43
)

var BnetGameType_name = map[int32]string{
	0:  "BGT_UNKNOWN",
	1:  "BGT_FRIENDS",
	2:  "BGT_RANKED_STANDARD",
	3:  "BGT_ARENA",
	4:  "BGT_VS_AI",
	5:  "BGT_TUTORIAL",
	6:  "BGT_ASYNC",
	9:  "BGT_CASUAL_STANDARD_NEWBIE",
	10: "BGT_CASUAL_STANDARD_NORMAL",
	11: "BGT_TEST1",
	12: "BGT_TEST2",
	13: "BGT_TEST3",
	16: "BGT_TAVERNBRAWL_PVP",
	17: "BGT_TAVERNBRAWL_1P_VERSUS_AI",
	18: "BGT_TAVERNBRAWL_2P_COOP",
	30: "BGT_RANKED_WILD",
	31: "BGT_CASUAL_WILD",
	40: "BGT_FSG_BRAWL_VS_FRIEND",
	41: "BGT_FSG_BRAWL_PVP",
	42: "BGT_FSG_BRAWL_1P_VERSUS_AI",
	43: "BGT_FSG_BRAWL_2P_COOP",
	// Duplicate value: 43: "BGT_LAST",
}
var BnetGameType_value = map[string]int32{
	"BGT_UNKNOWN":                  0,
	"BGT_FRIENDS":                  1,
	"BGT_RANKED_STANDARD":          2,
	"BGT_ARENA":                    3,
	"BGT_VS_AI":                    4,
	"BGT_TUTORIAL":                 5,
	"BGT_ASYNC":                    6,
	"BGT_CASUAL_STANDARD_NEWBIE":   9,
	"BGT_CASUAL_STANDARD_NORMAL":   10,
	"BGT_TEST1":                    11,
	"BGT_TEST2":                    12,
	"BGT_TEST3":                    13,
	"BGT_TAVERNBRAWL_PVP":          16,
	"BGT_TAVERNBRAWL_1P_VERSUS_AI": 17,
	"BGT_TAVERNBRAWL_2P_COOP":      18,
	"BGT_RANKED_WILD":              30,
	"BGT_CASUAL_WILD":              31,
	"BGT_FSG_BRAWL_VS_FRIEND":      40,
	"BGT_FSG_BRAWL_PVP":            41,
	"BGT_FSG_BRAWL_1P_VERSUS_AI":   42,
	"BGT_FSG_BRAWL_2P_COOP":        43,
	"BGT_LAST":                     43,
}

func (x BnetGameType) String() string {
	return proto.EnumName(BnetGameType_name, int32(x))
}
func (BnetGameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ref: PegasusShared.BrawlType
type BrawlType int32

const (
	BrawlType_BRAWL_TYPE_UNKNOWN            BrawlType = 0
	BrawlType_BRAWL_TYPE_TAVERN_BRAWL       BrawlType = 1
	BrawlType_BRAWL_TYPE_FIRST              BrawlType = 1
	BrawlType_BRAWL_TYPE_FIRESIDE_GATHERING BrawlType = 2
	BrawlType_BRAWL_TYPE_COUNT              BrawlType = 3
)

var BrawlType_name = map[int32]string{
	0: "BRAWL_TYPE_UNKNOWN",
	1: "BRAWL_TYPE_TAVERN_BRAWL",
	// Duplicate value: 1: "BRAWL_TYPE_FIRST",
	2: "BRAWL_TYPE_FIRESIDE_GATHERING",
	3: "BRAWL_TYPE_COUNT",
}
var BrawlType_value = map[string]int32{
	"BRAWL_TYPE_UNKNOWN":            0,
	"BRAWL_TYPE_TAVERN_BRAWL":       1,
	"BRAWL_TYPE_FIRST":              1,
	"BRAWL_TYPE_FIRESIDE_GATHERING": 2,
	"BRAWL_TYPE_COUNT":              3,
}

func (x BrawlType) String() string {
	return proto.EnumName(BrawlType_name, int32(x))
}
func (BrawlType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// ref: PegasusShared.DatabaseAction
type DatabaseAction int32

const (
	DatabaseAction_DB_A_UNKNOWN      DatabaseAction = 0
	DatabaseAction_DB_A_GET_DECK     DatabaseAction = 1
	DatabaseAction_DB_A_CREATE_DECK  DatabaseAction = 2
	DatabaseAction_DB_A_RENAME_DECK  DatabaseAction = 3
	DatabaseAction_DB_A_DELETE_DECK  DatabaseAction = 4
	DatabaseAction_DB_A_SET_DECK     DatabaseAction = 5
	DatabaseAction_DB_A_OPEN_BOOSTER DatabaseAction = 6
	DatabaseAction_DB_A_GAMES_INFO   DatabaseAction = 7
)

var DatabaseAction_name = map[int32]string{
	0: "DB_A_UNKNOWN",
	1: "DB_A_GET_DECK",
	2: "DB_A_CREATE_DECK",
	3: "DB_A_RENAME_DECK",
	4: "DB_A_DELETE_DECK",
	5: "DB_A_SET_DECK",
	6: "DB_A_OPEN_BOOSTER",
	7: "DB_A_GAMES_INFO",
}
var DatabaseAction_value = map[string]int32{
	"DB_A_UNKNOWN":      0,
	"DB_A_GET_DECK":     1,
	"DB_A_CREATE_DECK":  2,
	"DB_A_RENAME_DECK":  3,
	"DB_A_DELETE_DECK":  4,
	"DB_A_SET_DECK":     5,
	"DB_A_OPEN_BOOSTER": 6,
	"DB_A_GAMES_INFO":   7,
}

func (x DatabaseAction) String() string {
	return proto.EnumName(DatabaseAction_name, int32(x))
}
func (DatabaseAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// ref: PegasusShared.DatabaseResult
type DatabaseResult int32

const (
	DatabaseResult_DB_E_UNKNOWN        DatabaseResult = 0
	DatabaseResult_DB_E_SQL_EX         DatabaseResult = -1
	DatabaseResult_DB_E_SUCCESS        DatabaseResult = 1
	DatabaseResult_DB_E_NOT_OWNED      DatabaseResult = 2
	DatabaseResult_DB_E_CONSTRAINT     DatabaseResult = 3
	DatabaseResult_DB_E_NOT_FOUND      DatabaseResult = 4
	DatabaseResult_DB_E_EXCEPTION      DatabaseResult = 9
	DatabaseResult_DB_E_BAD_PARAM      DatabaseResult = 11
	DatabaseResult_DB_E_DECK_IS_LOCKED DatabaseResult = 12
)

var DatabaseResult_name = map[int32]string{
	0:  "DB_E_UNKNOWN",
	-1: "DB_E_SQL_EX",
	1:  "DB_E_SUCCESS",
	2:  "DB_E_NOT_OWNED",
	3:  "DB_E_CONSTRAINT",
	4:  "DB_E_NOT_FOUND",
	9:  "DB_E_EXCEPTION",
	11: "DB_E_BAD_PARAM",
	12: "DB_E_DECK_IS_LOCKED",
}
var DatabaseResult_value = map[string]int32{
	"DB_E_UNKNOWN":        0,
	"DB_E_SQL_EX":         -1,
	"DB_E_SUCCESS":        1,
	"DB_E_NOT_OWNED":      2,
	"DB_E_CONSTRAINT":     3,
	"DB_E_NOT_FOUND":      4,
	"DB_E_EXCEPTION":      9,
	"DB_E_BAD_PARAM":      11,
	"DB_E_DECK_IS_LOCKED": 12,
}

func (x DatabaseResult) String() string {
	return proto.EnumName(DatabaseResult_name, int32(x))
}
func (DatabaseResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// ref: PegasusShared.DeckSourceType
type DeckSourceType int32

const (
	DeckSourceType_DECK_SOURCE_TYPE_UNKNOWN        DeckSourceType = 0
	DeckSourceType_DECK_SOURCE_TYPE_NORMAL         DeckSourceType = 1
	DeckSourceType_DECK_SOURCE_TYPE_TEMPLATE       DeckSourceType = 2
	DeckSourceType_DECK_SOURCE_TYPE_BASIC_DECK     DeckSourceType = 3
	DeckSourceType_DECK_SOURCE_TYPE_INNKEEPER_DECK DeckSourceType = 4
)

var DeckSourceType_name = map[int32]string{
	0: "DECK_SOURCE_TYPE_UNKNOWN",
	1: "DECK_SOURCE_TYPE_NORMAL",
	2: "DECK_SOURCE_TYPE_TEMPLATE",
	3: "DECK_SOURCE_TYPE_BASIC_DECK",
	4: "DECK_SOURCE_TYPE_INNKEEPER_DECK",
}
var DeckSourceType_value = map[string]int32{
	"DECK_SOURCE_TYPE_UNKNOWN":        0,
	"DECK_SOURCE_TYPE_NORMAL":         1,
	"DECK_SOURCE_TYPE_TEMPLATE":       2,
	"DECK_SOURCE_TYPE_BASIC_DECK":     3,
	"DECK_SOURCE_TYPE_INNKEEPER_DECK": 4,
}

func (x DeckSourceType) String() string {
	return proto.EnumName(DeckSourceType_name, int32(x))
}
func (DeckSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// ref: PegasusShared.DeckType
type DeckType int32

const (
	DeckType_UNKNOWN_DECK_TYPE DeckType = 0
	DeckType_NORMAL_DECK       DeckType = 1
	DeckType_AI_DECK           DeckType = 2
	DeckType_DRAFT_DECK        DeckType = 4
	DeckType_PRECON_DECK       DeckType = 5
	DeckType_TAVERN_BRAWL_DECK DeckType = 6
	DeckType_FSG_BRAWL_DECK    DeckType = 7
	DeckType_HIDDEN_DECK       DeckType = 1000
)

var DeckType_name = map[int32]string{
	0:    "UNKNOWN_DECK_TYPE",
	1:    "NORMAL_DECK",
	2:    "AI_DECK",
	4:    "DRAFT_DECK",
	5:    "PRECON_DECK",
	6:    "TAVERN_BRAWL_DECK",
	7:    "FSG_BRAWL_DECK",
	1000: "HIDDEN_DECK",
}
var DeckType_value = map[string]int32{
	"UNKNOWN_DECK_TYPE": 0,
	"NORMAL_DECK":       1,
	"AI_DECK":           2,
	"DRAFT_DECK":        4,
	"PRECON_DECK":       5,
	"TAVERN_BRAWL_DECK": 6,
	"FSG_BRAWL_DECK":    7,
	"HIDDEN_DECK":       1000,
}

func (x DeckType) String() string {
	return proto.EnumName(DeckType_name, int32(x))
}
func (DeckType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// ref: PegasusShared.ErrorCode
type ErrorCode int32

const (
	ErrorCode_ERROR_OK                                       ErrorCode = 0
	ErrorCode_ERROR_HEARTHSTONE_BEGIN                        ErrorCode = 1000000
	ErrorCode_ERROR_GLOBAL_INVALID_INPUT                     ErrorCode = 1000001
	ErrorCode_ERROR_GLOBAL_NO_DATA                           ErrorCode = 1000002
	ErrorCode_ERROR_GLOBAL_NOT_YET_IMPLEMENTED               ErrorCode = 1000003
	ErrorCode_ERROR_GLOBAL_DATA_MODIFIED                     ErrorCode = 1000004
	ErrorCode_ERROR_GLOBAL_INTERNAL_DB_ERROR                 ErrorCode = 1000005
	ErrorCode_ERROR_GLOBAL_DECK_IS_LOCKED                    ErrorCode = 1000006
	ErrorCode_ERROR_GLOBAL_FEATURE_DISABLED                  ErrorCode = 1000007
	ErrorCode_ERROR_GLOBAL_HTTP_ERROR                        ErrorCode = 1000008
	ErrorCode_ERROR_GLOBAL_JSON_PARSE_ERROR                  ErrorCode = 1000009
	ErrorCode_ERROR_GLOBAL_INTERNAL_ERROR                    ErrorCode = 1000010
	ErrorCode_ERROR_GLOBAL_FSG_ID_INVALID                    ErrorCode = 1000011
	ErrorCode_ERROR_GLOBAL_HTTP_TIMEOUT_OR_ABORTED           ErrorCode = 1000012
	ErrorCode_ERROR_SCENARIO_INCORRECT_NUM_PLAYERS           ErrorCode = 1000500
	ErrorCode_ERROR_SCENARIO_NO_DECK_SPECIFIED               ErrorCode = 1000501
	ErrorCode_ERROR_SCENARIO_MUST_BE_SERVER_ONLY             ErrorCode = 1000502
	ErrorCode_ERROR_TAVERN_BRAWL_SEASON_INCREMENTED          ErrorCode = 1001000
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_ACTIVE                  ErrorCode = 1001001
	ErrorCode_ERROR_TAVERN_BRAWL_NO_TICKET                   ErrorCode = 1001002
	ErrorCode_ERROR_TAVERN_BRAWL_RETIRE_FIRST                ErrorCode = 1001003
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_IN_SESSION              ErrorCode = 1001004
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE ErrorCode = 1001005
	ErrorCode_ERROR_TAVERN_BRAWL_FEATURE_DISABLED            ErrorCode = 1001006
	ErrorCode_ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED         ErrorCode = 1001007
	ErrorCode_ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED ErrorCode = 1001008
	ErrorCode_ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE           ErrorCode = 1002000
	ErrorCode_ERROR_DECK_RULESET_RULE_DB_READ_ERROR          ErrorCode = 1002001
	ErrorCode_ERROR_DECK_RULESET_RULE_VIOLATION              ErrorCode = 1002002
	ErrorCode_ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN        ErrorCode = 1002003
	ErrorCode_ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN      ErrorCode = 1002004
	ErrorCode_ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN      ErrorCode = 1002005
	ErrorCode_ERROR_DECK_VALIDATION_DB_WRITE_ERROR           ErrorCode = 1002006
	ErrorCode_ERROR_DECK_VALIDATION_WRONG_FORMAT             ErrorCode = 1002007
	ErrorCode_ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY         ErrorCode = 1002008
	ErrorCode_ERROR_PLAY_GAME_DECK_MODIFIED                  ErrorCode = 1003000
	ErrorCode_ERROR_PLAY_GAME_FSG_ID_NOT_MATCHING            ErrorCode = 1003002
	ErrorCode_ERROR_PLAY_GAME_FSG_PATRON_NOT_CHECKED_IN      ErrorCode = 1003003
	ErrorCode_ERROR_PLAY_GAME_FSG_NOT_CURRENTLY_PLAYABLE     ErrorCode = 1003004
	ErrorCode_ERROR_FSG_NO_PERMISSION                        ErrorCode = 1004000
	ErrorCode_ERROR_FSG_DUPLICATE_REQUEST_IGNORED            ErrorCode = 1004001
	ErrorCode_ERROR_FSG_DUPLICATE_REQUEST_ORIGINAL_DROPPED   ErrorCode = 1004002
)

var ErrorCode_name = map[int32]string{
	0:       "ERROR_OK",
	1000000: "ERROR_HEARTHSTONE_BEGIN",
	1000001: "ERROR_GLOBAL_INVALID_INPUT",
	1000002: "ERROR_GLOBAL_NO_DATA",
	1000003: "ERROR_GLOBAL_NOT_YET_IMPLEMENTED",
	1000004: "ERROR_GLOBAL_DATA_MODIFIED",
	1000005: "ERROR_GLOBAL_INTERNAL_DB_ERROR",
	1000006: "ERROR_GLOBAL_DECK_IS_LOCKED",
	1000007: "ERROR_GLOBAL_FEATURE_DISABLED",
	1000008: "ERROR_GLOBAL_HTTP_ERROR",
	1000009: "ERROR_GLOBAL_JSON_PARSE_ERROR",
	1000010: "ERROR_GLOBAL_INTERNAL_ERROR",
	1000011: "ERROR_GLOBAL_FSG_ID_INVALID",
	1000012: "ERROR_GLOBAL_HTTP_TIMEOUT_OR_ABORTED",
	1000500: "ERROR_SCENARIO_INCORRECT_NUM_PLAYERS",
	1000501: "ERROR_SCENARIO_NO_DECK_SPECIFIED",
	1000502: "ERROR_SCENARIO_MUST_BE_SERVER_ONLY",
	1001000: "ERROR_TAVERN_BRAWL_SEASON_INCREMENTED",
	1001001: "ERROR_TAVERN_BRAWL_NOT_ACTIVE",
	1001002: "ERROR_TAVERN_BRAWL_NO_TICKET",
	1001003: "ERROR_TAVERN_BRAWL_RETIRE_FIRST",
	1001004: "ERROR_TAVERN_BRAWL_NOT_IN_SESSION",
	1001005: "ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE",
	1001006: "ERROR_TAVERN_BRAWL_FEATURE_DISABLED",
	1001007: "ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED",
	1001008: "ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED",
	1002000: "ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE",
	1002001: "ERROR_DECK_RULESET_RULE_DB_READ_ERROR",
	1002002: "ERROR_DECK_RULESET_RULE_VIOLATION",
	1002003: "ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN",
	1002004: "ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN",
	1002005: "ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN",
	1002006: "ERROR_DECK_VALIDATION_DB_WRITE_ERROR",
	1002007: "ERROR_DECK_VALIDATION_WRONG_FORMAT",
	1002008: "ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY",
	1003000: "ERROR_PLAY_GAME_DECK_MODIFIED",
	1003002: "ERROR_PLAY_GAME_FSG_ID_NOT_MATCHING",
	1003003: "ERROR_PLAY_GAME_FSG_PATRON_NOT_CHECKED_IN",
	1003004: "ERROR_PLAY_GAME_FSG_NOT_CURRENTLY_PLAYABLE",
	1004000: "ERROR_FSG_NO_PERMISSION",
	1004001: "ERROR_FSG_DUPLICATE_REQUEST_IGNORED",
	1004002: "ERROR_FSG_DUPLICATE_REQUEST_ORIGINAL_DROPPED",
}
var ErrorCode_value = map[string]int32{
	"ERROR_OK":                                       0,
	"ERROR_HEARTHSTONE_BEGIN":                        1000000,
	"ERROR_GLOBAL_INVALID_INPUT":                     1000001,
	"ERROR_GLOBAL_NO_DATA":                           1000002,
	"ERROR_GLOBAL_NOT_YET_IMPLEMENTED":               1000003,
	"ERROR_GLOBAL_DATA_MODIFIED":                     1000004,
	"ERROR_GLOBAL_INTERNAL_DB_ERROR":                 1000005,
	"ERROR_GLOBAL_DECK_IS_LOCKED":                    1000006,
	"ERROR_GLOBAL_FEATURE_DISABLED":                  1000007,
	"ERROR_GLOBAL_HTTP_ERROR":                        1000008,
	"ERROR_GLOBAL_JSON_PARSE_ERROR":                  1000009,
	"ERROR_GLOBAL_INTERNAL_ERROR":                    1000010,
	"ERROR_GLOBAL_FSG_ID_INVALID":                    1000011,
	"ERROR_GLOBAL_HTTP_TIMEOUT_OR_ABORTED":           1000012,
	"ERROR_SCENARIO_INCORRECT_NUM_PLAYERS":           1000500,
	"ERROR_SCENARIO_NO_DECK_SPECIFIED":               1000501,
	"ERROR_SCENARIO_MUST_BE_SERVER_ONLY":             1000502,
	"ERROR_TAVERN_BRAWL_SEASON_INCREMENTED":          1001000,
	"ERROR_TAVERN_BRAWL_NOT_ACTIVE":                  1001001,
	"ERROR_TAVERN_BRAWL_NO_TICKET":                   1001002,
	"ERROR_TAVERN_BRAWL_RETIRE_FIRST":                1001003,
	"ERROR_TAVERN_BRAWL_NOT_IN_SESSION":              1001004,
	"ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE": 1001005,
	"ERROR_TAVERN_BRAWL_FEATURE_DISABLED":            1001006,
	"ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED":         1001007,
	"ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED": 1001008,
	"ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE":           1002000,
	"ERROR_DECK_RULESET_RULE_DB_READ_ERROR":          1002001,
	"ERROR_DECK_RULESET_RULE_VIOLATION":              1002002,
	"ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN":        1002003,
	"ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN":      1002004,
	"ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN":      1002005,
	"ERROR_DECK_VALIDATION_DB_WRITE_ERROR":           1002006,
	"ERROR_DECK_VALIDATION_WRONG_FORMAT":             1002007,
	"ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY":         1002008,
	"ERROR_PLAY_GAME_DECK_MODIFIED":                  1003000,
	"ERROR_PLAY_GAME_FSG_ID_NOT_MATCHING":            1003002,
	"ERROR_PLAY_GAME_FSG_PATRON_NOT_CHECKED_IN":      1003003,
	"ERROR_PLAY_GAME_FSG_NOT_CURRENTLY_PLAYABLE":     1003004,
	"ERROR_FSG_NO_PERMISSION":                        1004000,
	"ERROR_FSG_DUPLICATE_REQUEST_IGNORED":            1004001,
	"ERROR_FSG_DUPLICATE_REQUEST_ORIGINAL_DROPPED":   1004002,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// ref: PegasusShared.FormatType
type FormatType int32

const (
	FormatType_FT_UNKNOWN  FormatType = 0
	FormatType_FT_WILD     FormatType = 1
	FormatType_FT_STANDARD FormatType = 2
)

var FormatType_name = map[int32]string{
	0: "FT_UNKNOWN",
	1: "FT_WILD",
	2: "FT_STANDARD",
}
var FormatType_value = map[string]int32{
	"FT_UNKNOWN":  0,
	"FT_WILD":     1,
	"FT_STANDARD": 2,
}

func (x FormatType) String() string {
	return proto.EnumName(FormatType_name, int32(x))
}
func (FormatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// ref: PegasusShared.GameType
type GameType int32

const (
	GameType_GT_UNKNOWN             GameType = 0
	GameType_GT_VS_AI               GameType = 1
	GameType_GT_VS_FRIEND           GameType = 2
	GameType_GT_TUTORIAL            GameType = 4
	GameType_GT_ARENA               GameType = 5
	GameType_GT_TEST                GameType = 6
	GameType_GT_RANKED              GameType = 7
	GameType_GT_CASUAL              GameType = 8
	GameType_GT_TAVERNBRAWL         GameType = 16
	GameType_GT_TB_1P_VS_AI         GameType = 17
	GameType_GT_TB_2P_COOP          GameType = 18
	GameType_GT_FSG_BRAWL_VS_FRIEND GameType = 19
	GameType_GT_FSG_BRAWL           GameType = 20
	GameType_GT_FSG_BRAWL_1P_VS_AI  GameType = 21
	GameType_GT_FSG_BRAWL_2P_COOP   GameType = 22
	GameType_GT_LAST                GameType = 22
)

var GameType_name = map[int32]string{
	0:  "GT_UNKNOWN",
	1:  "GT_VS_AI",
	2:  "GT_VS_FRIEND",
	4:  "GT_TUTORIAL",
	5:  "GT_ARENA",
	6:  "GT_TEST",
	7:  "GT_RANKED",
	8:  "GT_CASUAL",
	16: "GT_TAVERNBRAWL",
	17: "GT_TB_1P_VS_AI",
	18: "GT_TB_2P_COOP",
	19: "GT_FSG_BRAWL_VS_FRIEND",
	20: "GT_FSG_BRAWL",
	21: "GT_FSG_BRAWL_1P_VS_AI",
	22: "GT_FSG_BRAWL_2P_COOP",
	// Duplicate value: 22: "GT_LAST",
}
var GameType_value = map[string]int32{
	"GT_UNKNOWN":             0,
	"GT_VS_AI":               1,
	"GT_VS_FRIEND":           2,
	"GT_TUTORIAL":            4,
	"GT_ARENA":               5,
	"GT_TEST":                6,
	"GT_RANKED":              7,
	"GT_CASUAL":              8,
	"GT_TAVERNBRAWL":         16,
	"GT_TB_1P_VS_AI":         17,
	"GT_TB_2P_COOP":          18,
	"GT_FSG_BRAWL_VS_FRIEND": 19,
	"GT_FSG_BRAWL":           20,
	"GT_FSG_BRAWL_1P_VS_AI":  21,
	"GT_FSG_BRAWL_2P_COOP":   22,
	"GT_LAST":                22,
}

func (x GameType) String() string {
	return proto.EnumName(GameType_name, int32(x))
}
func (GameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// ref: PegasusShared.RecruitAFriendState
type RecruitAFriendState int32

const (
	RecruitAFriendState_RECRUITAFRIENDSTATE_AUTO_INVALID RecruitAFriendState = 0
	RecruitAFriendState_RAF_RECRUITABLE                  RecruitAFriendState = 1
	RecruitAFriendState_RAF_RECRUITED                    RecruitAFriendState = 2
	RecruitAFriendState_RAF_GRADUATED                    RecruitAFriendState = 3
	RecruitAFriendState_RAF_VALEDICTORIAN                RecruitAFriendState = 4
	RecruitAFriendState_RAF_NOT_RECRUITABLE_WRONG_REGION RecruitAFriendState = 1000
	RecruitAFriendState_RAF_NOT_RECRUITABLE_TOO_OLD      RecruitAFriendState = 1001
	RecruitAFriendState_RAF_GRADUATED_WITHOUT_RECRUITER  RecruitAFriendState = 1002
)

var RecruitAFriendState_name = map[int32]string{
	0:    "RECRUITAFRIENDSTATE_AUTO_INVALID",
	1:    "RAF_RECRUITABLE",
	2:    "RAF_RECRUITED",
	3:    "RAF_GRADUATED",
	4:    "RAF_VALEDICTORIAN",
	1000: "RAF_NOT_RECRUITABLE_WRONG_REGION",
	1001: "RAF_NOT_RECRUITABLE_TOO_OLD",
	1002: "RAF_GRADUATED_WITHOUT_RECRUITER",
}
var RecruitAFriendState_value = map[string]int32{
	"RECRUITAFRIENDSTATE_AUTO_INVALID": 0,
	"RAF_RECRUITABLE":                  1,
	"RAF_RECRUITED":                    2,
	"RAF_GRADUATED":                    3,
	"RAF_VALEDICTORIAN":                4,
	"RAF_NOT_RECRUITABLE_WRONG_REGION": 1000,
	"RAF_NOT_RECRUITABLE_TOO_OLD":      1001,
	"RAF_GRADUATED_WITHOUT_RECRUITER":  1002,
}

func (x RecruitAFriendState) String() string {
	return proto.EnumName(RecruitAFriendState_name, int32(x))
}
func (RecruitAFriendState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// ref: PegasusShared.ReturningPlayerStatus
type ReturningPlayerStatus int32

const (
	ReturningPlayerStatus_RPS_UNKNOWN                 ReturningPlayerStatus = 0
	ReturningPlayerStatus_RPS_NOT_RETURNING_PLAYER    ReturningPlayerStatus = 1
	ReturningPlayerStatus_RPS_ACTIVE                  ReturningPlayerStatus = 2
	ReturningPlayerStatus_RPS_COMPLETE                ReturningPlayerStatus = 3
	ReturningPlayerStatus_RPS_ACTIVE_OPTED_OUT_QUEST1 ReturningPlayerStatus = 4
	ReturningPlayerStatus_RPS_ACTIVE_WITH_MANY_LOSSES ReturningPlayerStatus = 5
)

var ReturningPlayerStatus_name = map[int32]string{
	0: "RPS_UNKNOWN",
	1: "RPS_NOT_RETURNING_PLAYER",
	2: "RPS_ACTIVE",
	3: "RPS_COMPLETE",
	4: "RPS_ACTIVE_OPTED_OUT_QUEST1",
	5: "RPS_ACTIVE_WITH_MANY_LOSSES",
}
var ReturningPlayerStatus_value = map[string]int32{
	"RPS_UNKNOWN":                 0,
	"RPS_NOT_RETURNING_PLAYER":    1,
	"RPS_ACTIVE":                  2,
	"RPS_COMPLETE":                3,
	"RPS_ACTIVE_OPTED_OUT_QUEST1": 4,
	"RPS_ACTIVE_WITH_MANY_LOSSES": 5,
}

func (x ReturningPlayerStatus) String() string {
	return proto.EnumName(ReturningPlayerStatus_name, int32(x))
}
func (ReturningPlayerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// ref: PegasusShared.RewardTrigger
type RewardTrigger int32

const (
	RewardTrigger_REWARD_TRIGGER_UNKNOWN        RewardTrigger = 0
	RewardTrigger_REWARD_TRIGGER_NONE           RewardTrigger = 1
	RewardTrigger_REWARD_TRIGGER_WIN_GAME       RewardTrigger = 2
	RewardTrigger_REWARD_TRIGGER_FINISH_GAME    RewardTrigger = 3
	RewardTrigger_REWARD_TRIGGER_FINISH_SESSION RewardTrigger = 4
)

var RewardTrigger_name = map[int32]string{
	0: "REWARD_TRIGGER_UNKNOWN",
	1: "REWARD_TRIGGER_NONE",
	2: "REWARD_TRIGGER_WIN_GAME",
	3: "REWARD_TRIGGER_FINISH_GAME",
	4: "REWARD_TRIGGER_FINISH_SESSION",
}
var RewardTrigger_value = map[string]int32{
	"REWARD_TRIGGER_UNKNOWN":        0,
	"REWARD_TRIGGER_NONE":           1,
	"REWARD_TRIGGER_WIN_GAME":       2,
	"REWARD_TRIGGER_FINISH_GAME":    3,
	"REWARD_TRIGGER_FINISH_SESSION": 4,
}

func (x RewardTrigger) String() string {
	return proto.EnumName(RewardTrigger_name, int32(x))
}
func (RewardTrigger) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// ref: PegasusShared.RewardType
type RewardType int32

const (
	RewardType_REWARD_UNKNOWN                     RewardType = 0
	RewardType_REWARD_NONE                        RewardType = 1
	RewardType_REWARD_ADVENTURE_PROGRESS          RewardType = 2
	RewardType_REWARD_ARCANE_DUST                 RewardType = 3
	RewardType_REWARD_BASIC_CARD                  RewardType = 4
	RewardType_REWARD_BOOSTER_PACKS               RewardType = 5
	RewardType_REWARD_CARD_BACK                   RewardType = 6
	RewardType_REWARD_CARD_ID                     RewardType = 7
	RewardType_REWARD_CARD_ID_2X                  RewardType = 8
	RewardType_REWARD_CARD_SET                    RewardType = 9
	RewardType_DEPRECATED_REWARD_CRAFTABLE_GOLDEN RewardType = 10
	RewardType_REWARD_GOLD                        RewardType = 11
	RewardType_REWARD_GOLD_HERO                   RewardType = 12
	RewardType_REWARD_FORGE_TICKETS               RewardType = 13
	RewardType_REWARD_HERO                        RewardType = 14
	RewardType_REWARD_EXTERNAL_GAME_MOUNT         RewardType = 15
	RewardType_REWARD_CHEST                       RewardType = 16
	RewardType_REWARD_RETURNING_PLAYER_COMPLETE   RewardType = 17
)

var RewardType_name = map[int32]string{
	0:  "REWARD_UNKNOWN",
	1:  "REWARD_NONE",
	2:  "REWARD_ADVENTURE_PROGRESS",
	3:  "REWARD_ARCANE_DUST",
	4:  "REWARD_BASIC_CARD",
	5:  "REWARD_BOOSTER_PACKS",
	6:  "REWARD_CARD_BACK",
	7:  "REWARD_CARD_ID",
	8:  "REWARD_CARD_ID_2X",
	9:  "REWARD_CARD_SET",
	10: "DEPRECATED_REWARD_CRAFTABLE_GOLDEN",
	11: "REWARD_GOLD",
	12: "REWARD_GOLD_HERO",
	13: "REWARD_FORGE_TICKETS",
	14: "REWARD_HERO",
	15: "REWARD_EXTERNAL_GAME_MOUNT",
	16: "REWARD_CHEST",
	17: "REWARD_RETURNING_PLAYER_COMPLETE",
}
var RewardType_value = map[string]int32{
	"REWARD_UNKNOWN":                     0,
	"REWARD_NONE":                        1,
	"REWARD_ADVENTURE_PROGRESS":          2,
	"REWARD_ARCANE_DUST":                 3,
	"REWARD_BASIC_CARD":                  4,
	"REWARD_BOOSTER_PACKS":               5,
	"REWARD_CARD_BACK":                   6,
	"REWARD_CARD_ID":                     7,
	"REWARD_CARD_ID_2X":                  8,
	"REWARD_CARD_SET":                    9,
	"DEPRECATED_REWARD_CRAFTABLE_GOLDEN": 10,
	"REWARD_GOLD":                        11,
	"REWARD_GOLD_HERO":                   12,
	"REWARD_FORGE_TICKETS":               13,
	"REWARD_HERO":                        14,
	"REWARD_EXTERNAL_GAME_MOUNT":         15,
	"REWARD_CHEST":                       16,
	"REWARD_RETURNING_PLAYER_COMPLETE":   17,
}

func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}
func (RewardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// ref: PegasusShared.RuleType
type RuleType int32

const (
	RuleType_RULE_NONE        RuleType = 0
	RuleType_RULE_CHOOSE_HERO RuleType = 1
	RuleType_RULE_CHOOSE_DECK RuleType = 2
)

var RuleType_name = map[int32]string{
	0: "RULE_NONE",
	1: "RULE_CHOOSE_HERO",
	2: "RULE_CHOOSE_DECK",
}
var RuleType_value = map[string]int32{
	"RULE_NONE":        0,
	"RULE_CHOOSE_HERO": 1,
	"RULE_CHOOSE_DECK": 2,
}

func (x RuleType) String() string {
	return proto.EnumName(RuleType_name, int32(x))
}
func (RuleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// ref: PegasusShared.TavernBrawlStatus
type TavernBrawlStatus int32

const (
	TavernBrawlStatus_TB_STATUS_INVALID         TavernBrawlStatus = 0
	TavernBrawlStatus_TB_STATUS_TICKET_REQUIRED TavernBrawlStatus = 1
	TavernBrawlStatus_TB_STATUS_ACTIVE          TavernBrawlStatus = 2
	TavernBrawlStatus_TB_STATUS_IN_REWARDS      TavernBrawlStatus = 3
)

var TavernBrawlStatus_name = map[int32]string{
	0: "TB_STATUS_INVALID",
	1: "TB_STATUS_TICKET_REQUIRED",
	2: "TB_STATUS_ACTIVE",
	3: "TB_STATUS_IN_REWARDS",
}
var TavernBrawlStatus_value = map[string]int32{
	"TB_STATUS_INVALID":         0,
	"TB_STATUS_TICKET_REQUIRED": 1,
	"TB_STATUS_ACTIVE":          2,
	"TB_STATUS_IN_REWARDS":      3,
}

func (x TavernBrawlStatus) String() string {
	return proto.EnumName(TavernBrawlStatus_name, int32(x))
}
func (TavernBrawlStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// ref: PegasusShared.TavernSignType
type TavernSignType int32

const (
	TavernSignType_TAVERN_SIGN_TYPE_DEFAULT TavernSignType = 0
	TavernSignType_TAVERN_SIGN_TYPE_CUSTOM  TavernSignType = 1
)

var TavernSignType_name = map[int32]string{
	0: "TAVERN_SIGN_TYPE_DEFAULT",
	1: "TAVERN_SIGN_TYPE_CUSTOM",
}
var TavernSignType_value = map[string]int32{
	"TAVERN_SIGN_TYPE_DEFAULT": 0,
	"TAVERN_SIGN_TYPE_CUSTOM":  1,
}

func (x TavernSignType) String() string {
	return proto.EnumName(TavernSignType_name, int32(x))
}
func (TavernSignType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// ref: PegasusShared.AccountLicenseInfo/Flags
type AccountLicenseInfo_Flags int32

const (
	AccountLicenseInfo_FLAGS_AUTO_INVALID AccountLicenseInfo_Flags = 0
	AccountLicenseInfo_OWNED              AccountLicenseInfo_Flags = 1
)

var AccountLicenseInfo_Flags_name = map[int32]string{
	0: "FLAGS_AUTO_INVALID",
	1: "OWNED",
}
var AccountLicenseInfo_Flags_value = map[string]int32{
	"FLAGS_AUTO_INVALID": 0,
	"OWNED":              1,
}

func (x AccountLicenseInfo_Flags) String() string {
	return proto.EnumName(AccountLicenseInfo_Flags_name, int32(x))
}
func (AccountLicenseInfo_Flags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// ref: PegasusShared.AdventureProgress/Flags
type AdventureProgress_Flags int32

const (
	AdventureProgress_FLAGS_AUTO_INVALID               AdventureProgress_Flags = 0
	AdventureProgress_OWNED                            AdventureProgress_Flags = 1
	AdventureProgress_DEFEAT_HEROIC_MISSION_1          AdventureProgress_Flags = 2
	AdventureProgress_DEFEAT_HEROIC_MISSION_2          AdventureProgress_Flags = 4
	AdventureProgress_DEFEAT_HEROIC_MISSION_3          AdventureProgress_Flags = 8
	AdventureProgress_DEFEAT_HEROIC_MISSION_4          AdventureProgress_Flags = 16
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_1 AdventureProgress_Flags = 256
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_2 AdventureProgress_Flags = 512
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_3 AdventureProgress_Flags = 1024
)

var AdventureProgress_Flags_name = map[int32]string{
	0:    "FLAGS_AUTO_INVALID",
	1:    "OWNED",
	2:    "DEFEAT_HEROIC_MISSION_1",
	4:    "DEFEAT_HEROIC_MISSION_2",
	8:    "DEFEAT_HEROIC_MISSION_3",
	16:   "DEFEAT_HEROIC_MISSION_4",
	256:  "DEFEAT_CLASS_CHALLENGE_MISSION_1",
	512:  "DEFEAT_CLASS_CHALLENGE_MISSION_2",
	1024: "DEFEAT_CLASS_CHALLENGE_MISSION_3",
}
var AdventureProgress_Flags_value = map[string]int32{
	"FLAGS_AUTO_INVALID":               0,
	"OWNED":                            1,
	"DEFEAT_HEROIC_MISSION_1":          2,
	"DEFEAT_HEROIC_MISSION_2":          4,
	"DEFEAT_HEROIC_MISSION_3":          8,
	"DEFEAT_HEROIC_MISSION_4":          16,
	"DEFEAT_CLASS_CHALLENGE_MISSION_1": 256,
	"DEFEAT_CLASS_CHALLENGE_MISSION_2": 512,
	"DEFEAT_CLASS_CHALLENGE_MISSION_3": 1024,
}

func (x AdventureProgress_Flags) String() string {
	return proto.EnumName(AdventureProgress_Flags_name, int32(x))
}
func (AdventureProgress_Flags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// ref: PegasusShared.DeckInfo/ValidityFlags
type DeckInfo_ValidityFlags int32

const (
	DeckInfo_VALIDITYFLAGS_AUTO_INVALID DeckInfo_ValidityFlags = 0
	DeckInfo_UNLOCKED_HERO_CLASS        DeckInfo_ValidityFlags = 1
	DeckInfo_OWNS_CARDS                 DeckInfo_ValidityFlags = 2
	DeckInfo_HAS_30_CARDS               DeckInfo_ValidityFlags = 4
	DeckInfo_OBEYS_MAXES                DeckInfo_ValidityFlags = 8
	DeckInfo_CLASS_MATCHES              DeckInfo_ValidityFlags = 16
	DeckInfo_OWNS_CARD_BACK             DeckInfo_ValidityFlags = 32
	DeckInfo_OWNS_HERO                  DeckInfo_ValidityFlags = 64
	DeckInfo_TAGGED_STANDARD            DeckInfo_ValidityFlags = 128
	DeckInfo_NEEDS_VALIDATION           DeckInfo_ValidityFlags = 256
	DeckInfo_NEEDS_NAME                 DeckInfo_ValidityFlags = 512
	DeckInfo_LOCKED_DECK                DeckInfo_ValidityFlags = 1024
)

var DeckInfo_ValidityFlags_name = map[int32]string{
	0:    "VALIDITYFLAGS_AUTO_INVALID",
	1:    "UNLOCKED_HERO_CLASS",
	2:    "OWNS_CARDS",
	4:    "HAS_30_CARDS",
	8:    "OBEYS_MAXES",
	16:   "CLASS_MATCHES",
	32:   "OWNS_CARD_BACK",
	64:   "OWNS_HERO",
	128:  "TAGGED_STANDARD",
	256:  "NEEDS_VALIDATION",
	512:  "NEEDS_NAME",
	1024: "LOCKED_DECK",
}
var DeckInfo_ValidityFlags_value = map[string]int32{
	"VALIDITYFLAGS_AUTO_INVALID": 0,
	"UNLOCKED_HERO_CLASS":        1,
	"OWNS_CARDS":                 2,
	"HAS_30_CARDS":               4,
	"OBEYS_MAXES":                8,
	"CLASS_MATCHES":              16,
	"OWNS_CARD_BACK":             32,
	"OWNS_HERO":                  64,
	"TAGGED_STANDARD":            128,
	"NEEDS_VALIDATION":           256,
	"NEEDS_NAME":                 512,
	"LOCKED_DECK":                1024,
}

func (x DeckInfo_ValidityFlags) String() string {
	return proto.EnumName(DeckInfo_ValidityFlags_name, int32(x))
}
func (DeckInfo_ValidityFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

// ref: PegasusShared.ProfileNoticeAccountLicense/NoticeID
type ProfileNoticeAccountLicense_NoticeID int32

const (
	ProfileNoticeAccountLicense_NOTICEID_AUTO_INVALID ProfileNoticeAccountLicense_NoticeID = 0
	ProfileNoticeAccountLicense_ID                    ProfileNoticeAccountLicense_NoticeID = 16
)

var ProfileNoticeAccountLicense_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	16: "ID",
}
var ProfileNoticeAccountLicense_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 16,
}

func (x ProfileNoticeAccountLicense_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeAccountLicense_NoticeID_name, int32(x))
}
func (ProfileNoticeAccountLicense_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28, 0}
}

// ref: PegasusShared.ProfileNoticeAdventureProgress/NoticeID
type ProfileNoticeAdventureProgress_NoticeID int32

const (
	ProfileNoticeAdventureProgress_NOTICEID_AUTO_INVALID ProfileNoticeAdventureProgress_NoticeID = 0
	ProfileNoticeAdventureProgress_ID                    ProfileNoticeAdventureProgress_NoticeID = 14
)

var ProfileNoticeAdventureProgress_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	14: "ID",
}
var ProfileNoticeAdventureProgress_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 14,
}

func (x ProfileNoticeAdventureProgress_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeAdventureProgress_NoticeID_name, int32(x))
}
func (ProfileNoticeAdventureProgress_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 0}
}

// ref: PegasusShared.ProfileNoticeBonusStars/NoticeID
type ProfileNoticeBonusStars_NoticeID int32

const (
	ProfileNoticeBonusStars_NOTICEID_AUTO_INVALID ProfileNoticeBonusStars_NoticeID = 0
	ProfileNoticeBonusStars_ID                    ProfileNoticeBonusStars_NoticeID = 12
)

var ProfileNoticeBonusStars_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	12: "ID",
}
var ProfileNoticeBonusStars_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 12,
}

func (x ProfileNoticeBonusStars_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeBonusStars_NoticeID_name, int32(x))
}
func (ProfileNoticeBonusStars_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30, 0}
}

// ref: PegasusShared.ProfileNoticeCardBack/NoticeID
type ProfileNoticeCardBack_NoticeID int32

const (
	ProfileNoticeCardBack_NOTICEID_AUTO_INVALID ProfileNoticeCardBack_NoticeID = 0
	ProfileNoticeCardBack_ID                    ProfileNoticeCardBack_NoticeID = 11
)

var ProfileNoticeCardBack_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	11: "ID",
}
var ProfileNoticeCardBack_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 11,
}

func (x ProfileNoticeCardBack_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeCardBack_NoticeID_name, int32(x))
}
func (ProfileNoticeCardBack_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31, 0}
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/GameResult
type ProfileNoticeDisconnectedGameResult_GameResult int32

const (
	ProfileNoticeDisconnectedGameResult_GR_UNKNOWN ProfileNoticeDisconnectedGameResult_GameResult = 0
	ProfileNoticeDisconnectedGameResult_GR_PLAYING ProfileNoticeDisconnectedGameResult_GameResult = 1
	ProfileNoticeDisconnectedGameResult_GR_WINNER  ProfileNoticeDisconnectedGameResult_GameResult = 2
	ProfileNoticeDisconnectedGameResult_GR_TIE     ProfileNoticeDisconnectedGameResult_GameResult = 3
)

var ProfileNoticeDisconnectedGameResult_GameResult_name = map[int32]string{
	0: "GR_UNKNOWN",
	1: "GR_PLAYING",
	2: "GR_WINNER",
	3: "GR_TIE",
}
var ProfileNoticeDisconnectedGameResult_GameResult_value = map[string]int32{
	"GR_UNKNOWN": 0,
	"GR_PLAYING": 1,
	"GR_WINNER":  2,
	"GR_TIE":     3,
}

func (x ProfileNoticeDisconnectedGameResult_GameResult) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_GameResult_name, int32(x))
}
func (ProfileNoticeDisconnectedGameResult_GameResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/NoticeID
type ProfileNoticeDisconnectedGameResult_NoticeID int32

const (
	ProfileNoticeDisconnectedGameResult_NOTICEID_AUTO_INVALID ProfileNoticeDisconnectedGameResult_NoticeID = 0
	ProfileNoticeDisconnectedGameResult_ID                    ProfileNoticeDisconnectedGameResult_NoticeID = 4
)

var ProfileNoticeDisconnectedGameResult_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	4: "ID",
}
var ProfileNoticeDisconnectedGameResult_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 4,
}

func (x ProfileNoticeDisconnectedGameResult_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_NoticeID_name, int32(x))
}
func (ProfileNoticeDisconnectedGameResult_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 1}
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/PlayerResult
type ProfileNoticeDisconnectedGameResult_PlayerResult int32

const (
	ProfileNoticeDisconnectedGameResult_PR_UNKNOWN      ProfileNoticeDisconnectedGameResult_PlayerResult = 0
	ProfileNoticeDisconnectedGameResult_PR_WON          ProfileNoticeDisconnectedGameResult_PlayerResult = 1
	ProfileNoticeDisconnectedGameResult_PR_LOST         ProfileNoticeDisconnectedGameResult_PlayerResult = 2
	ProfileNoticeDisconnectedGameResult_PR_DISCONNECTED ProfileNoticeDisconnectedGameResult_PlayerResult = 3
	ProfileNoticeDisconnectedGameResult_PR_QUIT         ProfileNoticeDisconnectedGameResult_PlayerResult = 4
)

var ProfileNoticeDisconnectedGameResult_PlayerResult_name = map[int32]string{
	0: "PR_UNKNOWN",
	1: "PR_WON",
	2: "PR_LOST",
	3: "PR_DISCONNECTED",
	4: "PR_QUIT",
}
var ProfileNoticeDisconnectedGameResult_PlayerResult_value = map[string]int32{
	"PR_UNKNOWN":      0,
	"PR_WON":          1,
	"PR_LOST":         2,
	"PR_DISCONNECTED": 3,
	"PR_QUIT":         4,
}

func (x ProfileNoticeDisconnectedGameResult_PlayerResult) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_PlayerResult_name, int32(x))
}
func (ProfileNoticeDisconnectedGameResult_PlayerResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 2}
}

// ref: PegasusShared.ProfileNoticeLevelUp/NoticeID
type ProfileNoticeLevelUp_NoticeID int32

const (
	ProfileNoticeLevelUp_NOTICEID_AUTO_INVALID ProfileNoticeLevelUp_NoticeID = 0
	ProfileNoticeLevelUp_ID                    ProfileNoticeLevelUp_NoticeID = 15
)

var ProfileNoticeLevelUp_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	15: "ID",
}
var ProfileNoticeLevelUp_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 15,
}

func (x ProfileNoticeLevelUp_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeLevelUp_NoticeID_name, int32(x))
}
func (ProfileNoticeLevelUp_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0}
}

// ref: PegasusShared.ProfileNoticeMedal/MedalType
type ProfileNoticeMedal_MedalType int32

const (
	ProfileNoticeMedal_UNKNOWN_MEDAL  ProfileNoticeMedal_MedalType = 0
	ProfileNoticeMedal_STANDARD_MEDAL ProfileNoticeMedal_MedalType = 1
	ProfileNoticeMedal_WILD_MEDAL     ProfileNoticeMedal_MedalType = 2
)

var ProfileNoticeMedal_MedalType_name = map[int32]string{
	0: "UNKNOWN_MEDAL",
	1: "STANDARD_MEDAL",
	2: "WILD_MEDAL",
}
var ProfileNoticeMedal_MedalType_value = map[string]int32{
	"UNKNOWN_MEDAL":  0,
	"STANDARD_MEDAL": 1,
	"WILD_MEDAL":     2,
}

func (x ProfileNoticeMedal_MedalType) String() string {
	return proto.EnumName(ProfileNoticeMedal_MedalType_name, int32(x))
}
func (ProfileNoticeMedal_MedalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34, 0}
}

// ref: PegasusShared.ProfileNoticeMedal/NoticeID
type ProfileNoticeMedal_NoticeID int32

const (
	ProfileNoticeMedal_NOTICEID_AUTO_INVALID ProfileNoticeMedal_NoticeID = 0
	ProfileNoticeMedal_ID                    ProfileNoticeMedal_NoticeID = 1
)

var ProfileNoticeMedal_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	1: "ID",
}
var ProfileNoticeMedal_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 1,
}

func (x ProfileNoticeMedal_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeMedal_NoticeID_name, int32(x))
}
func (ProfileNoticeMedal_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34, 1}
}

// ref: PegasusShared.ProfileNoticePreconDeck/NoticeID
type ProfileNoticePreconDeck_NoticeID int32

const (
	ProfileNoticePreconDeck_NOTICEID_AUTO_INVALID ProfileNoticePreconDeck_NoticeID = 0
	ProfileNoticePreconDeck_ID                    ProfileNoticePreconDeck_NoticeID = 5
)

var ProfileNoticePreconDeck_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	5: "ID",
}
var ProfileNoticePreconDeck_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 5,
}

func (x ProfileNoticePreconDeck_NoticeID) String() string {
	return proto.EnumName(ProfileNoticePreconDeck_NoticeID_name, int32(x))
}
func (ProfileNoticePreconDeck_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0}
}

// ref: PegasusShared.ProfileNoticePurchase/NoticeID
type ProfileNoticePurchase_NoticeID int32

const (
	ProfileNoticePurchase_NOTICEID_AUTO_INVALID ProfileNoticePurchase_NoticeID = 0
	ProfileNoticePurchase_ID                    ProfileNoticePurchase_NoticeID = 10
)

var ProfileNoticePurchase_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	10: "ID",
}
var ProfileNoticePurchase_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 10,
}

func (x ProfileNoticePurchase_NoticeID) String() string {
	return proto.EnumName(ProfileNoticePurchase_NoticeID_name, int32(x))
}
func (ProfileNoticePurchase_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36, 0}
}

// ref: PegasusShared.ProfileNoticeRewardBooster/NoticeID
type ProfileNoticeRewardBooster_NoticeID int32

const (
	ProfileNoticeRewardBooster_NOTICEID_AUTO_INVALID ProfileNoticeRewardBooster_NoticeID = 0
	ProfileNoticeRewardBooster_ID                    ProfileNoticeRewardBooster_NoticeID = 2
)

var ProfileNoticeRewardBooster_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	2: "ID",
}
var ProfileNoticeRewardBooster_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 2,
}

func (x ProfileNoticeRewardBooster_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardBooster_NoticeID_name, int32(x))
}
func (ProfileNoticeRewardBooster_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

// ref: PegasusShared.ProfileNoticeRewardCard/NoticeID
type ProfileNoticeRewardCard_NoticeID int32

const (
	ProfileNoticeRewardCard_NOTICEID_AUTO_INVALID ProfileNoticeRewardCard_NoticeID = 0
	ProfileNoticeRewardCard_ID                    ProfileNoticeRewardCard_NoticeID = 3
)

var ProfileNoticeRewardCard_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	3: "ID",
}
var ProfileNoticeRewardCard_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 3,
}

func (x ProfileNoticeRewardCard_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardCard_NoticeID_name, int32(x))
}
func (ProfileNoticeRewardCard_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38, 0}
}

// ref: PegasusShared.ProfileNoticeRewardCard2x/NoticeID
type ProfileNoticeRewardCard2X_NoticeID int32

const (
	ProfileNoticeRewardCard2X_NOTICEID_AUTO_INVALID ProfileNoticeRewardCard2X_NoticeID = 0
	ProfileNoticeRewardCard2X_ID                    ProfileNoticeRewardCard2X_NoticeID = 13
)

var ProfileNoticeRewardCard2X_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	13: "ID",
}
var ProfileNoticeRewardCard2X_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 13,
}

func (x ProfileNoticeRewardCard2X_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardCard2X_NoticeID_name, int32(x))
}
func (ProfileNoticeRewardCard2X_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

// ref: PegasusShared.ProfileNoticeRewardDust/NoticeID
type ProfileNoticeRewardDust_NoticeID int32

const (
	ProfileNoticeRewardDust_NOTICEID_AUTO_INVALID ProfileNoticeRewardDust_NoticeID = 0
	ProfileNoticeRewardDust_ID                    ProfileNoticeRewardDust_NoticeID = 6
)

var ProfileNoticeRewardDust_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	6: "ID",
}
var ProfileNoticeRewardDust_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 6,
}

func (x ProfileNoticeRewardDust_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardDust_NoticeID_name, int32(x))
}
func (ProfileNoticeRewardDust_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40, 0}
}

// ref: PegasusShared.ProfileNoticeRewardForge/NoticeID
type ProfileNoticeRewardForge_NoticeID int32

const (
	ProfileNoticeRewardForge_NOTICEID_AUTO_INVALID ProfileNoticeRewardForge_NoticeID = 0
	ProfileNoticeRewardForge_ID                    ProfileNoticeRewardForge_NoticeID = 8
)

var ProfileNoticeRewardForge_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	8: "ID",
}
var ProfileNoticeRewardForge_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 8,
}

func (x ProfileNoticeRewardForge_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardForge_NoticeID_name, int32(x))
}
func (ProfileNoticeRewardForge_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0}
}

// ref: PegasusShared.ProfileNoticeRewardGold/NoticeID
type ProfileNoticeRewardGold_NoticeID int32

const (
	ProfileNoticeRewardGold_NOTICEID_AUTO_INVALID ProfileNoticeRewardGold_NoticeID = 0
	ProfileNoticeRewardGold_ID                    ProfileNoticeRewardGold_NoticeID = 9
)

var ProfileNoticeRewardGold_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	9: "ID",
}
var ProfileNoticeRewardGold_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 9,
}

func (x ProfileNoticeRewardGold_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardGold_NoticeID_name, int32(x))
}
func (ProfileNoticeRewardGold_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42, 0}
}

// ref: PegasusShared.ProfileNoticeRewardMount/NoticeID
type ProfileNoticeRewardMount_NoticeID int32

const (
	ProfileNoticeRewardMount_NOTICEID_AUTO_INVALID ProfileNoticeRewardMount_NoticeID = 0
	ProfileNoticeRewardMount_ID                    ProfileNoticeRewardMount_NoticeID = 7
)

var ProfileNoticeRewardMount_NoticeID_name = map[int32]string{
	0: "NOTICEID_AUTO_INVALID",
	7: "ID",
}
var ProfileNoticeRewardMount_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 7,
}

func (x ProfileNoticeRewardMount_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardMount_NoticeID_name, int32(x))
}
func (ProfileNoticeRewardMount_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 0}
}

// ref: PegasusShared.ProfileNoticeTavernBrawlRewards/NoticeID
type ProfileNoticeTavernBrawlRewards_NoticeID int32

const (
	ProfileNoticeTavernBrawlRewards_NOTICEID_AUTO_INVALID ProfileNoticeTavernBrawlRewards_NoticeID = 0
	ProfileNoticeTavernBrawlRewards_ID                    ProfileNoticeTavernBrawlRewards_NoticeID = 17
)

var ProfileNoticeTavernBrawlRewards_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	17: "ID",
}
var ProfileNoticeTavernBrawlRewards_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 17,
}

func (x ProfileNoticeTavernBrawlRewards_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeTavernBrawlRewards_NoticeID_name, int32(x))
}
func (ProfileNoticeTavernBrawlRewards_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{44, 0}
}

// ref: PegasusShared.ProfileNoticeTavernBrawlTicket/NoticeID
type ProfileNoticeTavernBrawlTicket_NoticeID int32

const (
	ProfileNoticeTavernBrawlTicket_NOTICEID_AUTO_INVALID ProfileNoticeTavernBrawlTicket_NoticeID = 0
	ProfileNoticeTavernBrawlTicket_ID                    ProfileNoticeTavernBrawlTicket_NoticeID = 18
)

var ProfileNoticeTavernBrawlTicket_NoticeID_name = map[int32]string{
	0:  "NOTICEID_AUTO_INVALID",
	18: "ID",
}
var ProfileNoticeTavernBrawlTicket_NoticeID_value = map[string]int32{
	"NOTICEID_AUTO_INVALID": 0,
	"ID": 18,
}

func (x ProfileNoticeTavernBrawlTicket_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeTavernBrawlTicket_NoticeID_name, int32(x))
}
func (ProfileNoticeTavernBrawlTicket_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

// ref: PegasusShared.AccountLicenseInfo
type AccountLicenseInfo struct {
	License int64  `protobuf:"varint,1,opt,name=license" json:"license,omitempty"`
	Flags   uint64 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	CasId   int64  `protobuf:"varint,3,opt,name=cas_id,json=casId" json:"cas_id,omitempty"`
}

func (m *AccountLicenseInfo) Reset()                    { *m = AccountLicenseInfo{} }
func (m *AccountLicenseInfo) String() string            { return proto.CompactTextString(m) }
func (*AccountLicenseInfo) ProtoMessage()               {}
func (*AccountLicenseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountLicenseInfo) GetLicense() int64 {
	if m != nil {
		return m.License
	}
	return 0
}

func (m *AccountLicenseInfo) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *AccountLicenseInfo) GetCasId() int64 {
	if m != nil {
		return m.CasId
	}
	return 0
}

// ref: PegasusShared.AdventureProgress
type AdventureProgress struct {
	WingId   int32  `protobuf:"varint,1,opt,name=wing_id,json=wingId" json:"wing_id,omitempty"`
	Progress int32  `protobuf:"varint,2,opt,name=progress" json:"progress,omitempty"`
	Ack      int32  `protobuf:"varint,3,opt,name=ack" json:"ack,omitempty"`
	Flags    uint64 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
}

func (m *AdventureProgress) Reset()                    { *m = AdventureProgress{} }
func (m *AdventureProgress) String() string            { return proto.CompactTextString(m) }
func (*AdventureProgress) ProtoMessage()               {}
func (*AdventureProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AdventureProgress) GetWingId() int32 {
	if m != nil {
		return m.WingId
	}
	return 0
}

func (m *AdventureProgress) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *AdventureProgress) GetAck() int32 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func (m *AdventureProgress) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

// ref: PegasusShared.AssetKey
type AssetKey struct {
	Type    AssetType `protobuf:"varint,1,opt,name=type,enum=pegasus.pegasusshared.AssetType" json:"type,omitempty"`
	AssetId int32     `protobuf:"varint,2,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
}

func (m *AssetKey) Reset()                    { *m = AssetKey{} }
func (m *AssetKey) String() string            { return proto.CompactTextString(m) }
func (*AssetKey) ProtoMessage()               {}
func (*AssetKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AssetKey) GetType() AssetType {
	if m != nil {
		return m.Type
	}
	return AssetType_ASSETTYPE_AUTO_INVALID
}

func (m *AssetKey) GetAssetId() int32 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

// ref: PegasusShared.AssetRecordInfo
type AssetRecordInfo struct {
	Asset          *AssetKey `protobuf:"bytes,1,opt,name=asset" json:"asset,omitempty"`
	RecordByteSize uint32    `protobuf:"varint,2,opt,name=record_byte_size,json=recordByteSize" json:"record_byte_size,omitempty"`
	RecordHash     []byte    `protobuf:"bytes,3,opt,name=record_hash,json=recordHash,proto3" json:"record_hash,omitempty"`
}

func (m *AssetRecordInfo) Reset()                    { *m = AssetRecordInfo{} }
func (m *AssetRecordInfo) String() string            { return proto.CompactTextString(m) }
func (*AssetRecordInfo) ProtoMessage()               {}
func (*AssetRecordInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AssetRecordInfo) GetAsset() *AssetKey {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *AssetRecordInfo) GetRecordByteSize() uint32 {
	if m != nil {
		return m.RecordByteSize
	}
	return 0
}

func (m *AssetRecordInfo) GetRecordHash() []byte {
	if m != nil {
		return m.RecordHash
	}
	return nil
}

// ref: PegasusShared.BnetId
type BnetId struct {
	Hi uint64 `protobuf:"varint,1,opt,name=hi" json:"hi,omitempty"`
	Lo uint64 `protobuf:"varint,2,opt,name=lo" json:"lo,omitempty"`
}

func (m *BnetId) Reset()                    { *m = BnetId{} }
func (m *BnetId) String() string            { return proto.CompactTextString(m) }
func (*BnetId) ProtoMessage()               {}
func (*BnetId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BnetId) GetHi() uint64 {
	if m != nil {
		return m.Hi
	}
	return 0
}

func (m *BnetId) GetLo() uint64 {
	if m != nil {
		return m.Lo
	}
	return 0
}

// ref: PegasusShared.BoosterInfo
type BoosterInfo struct {
	Type  int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Count int32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *BoosterInfo) Reset()                    { *m = BoosterInfo{} }
func (m *BoosterInfo) String() string            { return proto.CompactTextString(m) }
func (*BoosterInfo) ProtoMessage()               {}
func (*BoosterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BoosterInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BoosterInfo) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// ref: PegasusShared.CachedCard
type CachedCard struct {
	CardId        int64 `protobuf:"varint,1,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	AssetCardId   int32 `protobuf:"varint,2,opt,name=asset_card_id,json=assetCardId" json:"asset_card_id,omitempty"`
	UnixTimestamp int32 `protobuf:"varint,3,opt,name=unix_timestamp,json=unixTimestamp" json:"unix_timestamp,omitempty"`
	IsSeen        bool  `protobuf:"varint,4,opt,name=is_seen,json=isSeen" json:"is_seen,omitempty"`
	Premium       int32 `protobuf:"varint,5,opt,name=premium" json:"premium,omitempty"`
	InsertSource  int32 `protobuf:"varint,6,opt,name=insert_source,json=insertSource" json:"insert_source,omitempty"`
	InsertData    int64 `protobuf:"varint,7,opt,name=insert_data,json=insertData" json:"insert_data,omitempty"`
}

func (m *CachedCard) Reset()                    { *m = CachedCard{} }
func (m *CachedCard) String() string            { return proto.CompactTextString(m) }
func (*CachedCard) ProtoMessage()               {}
func (*CachedCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CachedCard) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

func (m *CachedCard) GetAssetCardId() int32 {
	if m != nil {
		return m.AssetCardId
	}
	return 0
}

func (m *CachedCard) GetUnixTimestamp() int32 {
	if m != nil {
		return m.UnixTimestamp
	}
	return 0
}

func (m *CachedCard) GetIsSeen() bool {
	if m != nil {
		return m.IsSeen
	}
	return false
}

func (m *CachedCard) GetPremium() int32 {
	if m != nil {
		return m.Premium
	}
	return 0
}

func (m *CachedCard) GetInsertSource() int32 {
	if m != nil {
		return m.InsertSource
	}
	return 0
}

func (m *CachedCard) GetInsertData() int64 {
	if m != nil {
		return m.InsertData
	}
	return 0
}

// ref: PegasusShared.CachedCollection
type CachedCollection struct {
	CardCollection []*CachedCard `protobuf:"bytes,1,rep,name=card_collection,json=cardCollection" json:"card_collection,omitempty"`
}

func (m *CachedCollection) Reset()                    { *m = CachedCollection{} }
func (m *CachedCollection) String() string            { return proto.CompactTextString(m) }
func (*CachedCollection) ProtoMessage()               {}
func (*CachedCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CachedCollection) GetCardCollection() []*CachedCard {
	if m != nil {
		return m.CardCollection
	}
	return nil
}

// ref: PegasusShared.CardDef
type CardDef struct {
	Asset   int32 `protobuf:"varint,1,opt,name=asset" json:"asset,omitempty"`
	Premium int32 `protobuf:"varint,2,opt,name=premium" json:"premium,omitempty"`
}

func (m *CardDef) Reset()                    { *m = CardDef{} }
func (m *CardDef) String() string            { return proto.CompactTextString(m) }
func (*CardDef) ProtoMessage()               {}
func (*CardDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CardDef) GetAsset() int32 {
	if m != nil {
		return m.Asset
	}
	return 0
}

func (m *CardDef) GetPremium() int32 {
	if m != nil {
		return m.Premium
	}
	return 0
}

// ref: PegasusShared.CardStack
type CardStack struct {
	CardDef          *CardDef `protobuf:"bytes,1,opt,name=card_def,json=cardDef" json:"card_def,omitempty"`
	LatestInsertDate *Date    `protobuf:"bytes,2,opt,name=latest_insert_date,json=latestInsertDate" json:"latest_insert_date,omitempty"`
	Count            int32    `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	NumSeen          int32    `protobuf:"varint,4,opt,name=num_seen,json=numSeen" json:"num_seen,omitempty"`
}

func (m *CardStack) Reset()                    { *m = CardStack{} }
func (m *CardStack) String() string            { return proto.CompactTextString(m) }
func (*CardStack) ProtoMessage()               {}
func (*CardStack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CardStack) GetCardDef() *CardDef {
	if m != nil {
		return m.CardDef
	}
	return nil
}

func (m *CardStack) GetLatestInsertDate() *Date {
	if m != nil {
		return m.LatestInsertDate
	}
	return nil
}

func (m *CardStack) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CardStack) GetNumSeen() int32 {
	if m != nil {
		return m.NumSeen
	}
	return 0
}

// ref: PegasusShared.DatabaseDeckCard
type DatabaseDeckCard struct {
	AssetCardId int32 `protobuf:"varint,1,opt,name=asset_card_id,json=assetCardId" json:"asset_card_id,omitempty"`
	Premium     int32 `protobuf:"varint,2,opt,name=premium" json:"premium,omitempty"`
	Quantity    int32 `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *DatabaseDeckCard) Reset()                    { *m = DatabaseDeckCard{} }
func (m *DatabaseDeckCard) String() string            { return proto.CompactTextString(m) }
func (*DatabaseDeckCard) ProtoMessage()               {}
func (*DatabaseDeckCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DatabaseDeckCard) GetAssetCardId() int32 {
	if m != nil {
		return m.AssetCardId
	}
	return 0
}

func (m *DatabaseDeckCard) GetPremium() int32 {
	if m != nil {
		return m.Premium
	}
	return 0
}

func (m *DatabaseDeckCard) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// ref: PegasusShared.DatabaseDeckContent
type DatabaseDeckContent struct {
	DeckCards []*DatabaseDeckCard `protobuf:"bytes,1,rep,name=deck_cards,json=deckCards" json:"deck_cards,omitempty"`
}

func (m *DatabaseDeckContent) Reset()                    { *m = DatabaseDeckContent{} }
func (m *DatabaseDeckContent) String() string            { return proto.CompactTextString(m) }
func (*DatabaseDeckContent) ProtoMessage()               {}
func (*DatabaseDeckContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DatabaseDeckContent) GetDeckCards() []*DatabaseDeckCard {
	if m != nil {
		return m.DeckCards
	}
	return nil
}

// ref: PegasusShared.Date
type Date struct {
	Year  int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	Hours int32 `protobuf:"varint,4,opt,name=hours" json:"hours,omitempty"`
	Min   int32 `protobuf:"varint,5,opt,name=min" json:"min,omitempty"`
	Sec   int32 `protobuf:"varint,6,opt,name=sec" json:"sec,omitempty"`
}

func (m *Date) Reset()                    { *m = Date{} }
func (m *Date) String() string            { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()               {}
func (*Date) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Date) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *Date) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *Date) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *Date) GetHours() int32 {
	if m != nil {
		return m.Hours
	}
	return 0
}

func (m *Date) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Date) GetSec() int32 {
	if m != nil {
		return m.Sec
	}
	return 0
}

// ref: PegasusShared.DeckCardData
type DeckCardData struct {
	Def *CardDef `protobuf:"bytes,1,opt,name=def" json:"def,omitempty"`
	Qty int32    `protobuf:"varint,3,opt,name=qty" json:"qty,omitempty"`
}

func (m *DeckCardData) Reset()                    { *m = DeckCardData{} }
func (m *DeckCardData) String() string            { return proto.CompactTextString(m) }
func (*DeckCardData) ProtoMessage()               {}
func (*DeckCardData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeckCardData) GetDef() *CardDef {
	if m != nil {
		return m.Def
	}
	return nil
}

func (m *DeckCardData) GetQty() int32 {
	if m != nil {
		return m.Qty
	}
	return 0
}

// ref: PegasusShared.DeckInfo
type DeckInfo struct {
	Id               int64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             string         `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CardBack         int32          `protobuf:"varint,3,opt,name=card_back,json=cardBack" json:"card_back,omitempty"`
	Hero             int32          `protobuf:"varint,4,opt,name=hero" json:"hero,omitempty"`
	DeckType         DeckType       `protobuf:"varint,5,opt,name=deck_type,json=deckType,enum=pegasus.pegasusshared.DeckType" json:"deck_type,omitempty"`
	Validity         uint64         `protobuf:"varint,6,opt,name=validity" json:"validity,omitempty"`
	HeroPremium      int32          `protobuf:"varint,7,opt,name=hero_premium,json=heroPremium" json:"hero_premium,omitempty"`
	CardBackOverride bool           `protobuf:"varint,8,opt,name=card_back_override,json=cardBackOverride" json:"card_back_override,omitempty"`
	HeroOverride     bool           `protobuf:"varint,9,opt,name=hero_override,json=heroOverride" json:"hero_override,omitempty"`
	LastModified     int64          `protobuf:"varint,10,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	SeasonId         int32          `protobuf:"varint,11,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	SortOrder        int64          `protobuf:"varint,12,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	CreateDate       int64          `protobuf:"varint,13,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	SourceType       DeckSourceType `protobuf:"varint,14,opt,name=source_type,json=sourceType,enum=pegasus.pegasusshared.DeckSourceType" json:"source_type,omitempty"`
}

func (m *DeckInfo) Reset()                    { *m = DeckInfo{} }
func (m *DeckInfo) String() string            { return proto.CompactTextString(m) }
func (*DeckInfo) ProtoMessage()               {}
func (*DeckInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeckInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeckInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeckInfo) GetCardBack() int32 {
	if m != nil {
		return m.CardBack
	}
	return 0
}

func (m *DeckInfo) GetHero() int32 {
	if m != nil {
		return m.Hero
	}
	return 0
}

func (m *DeckInfo) GetDeckType() DeckType {
	if m != nil {
		return m.DeckType
	}
	return DeckType_UNKNOWN_DECK_TYPE
}

func (m *DeckInfo) GetValidity() uint64 {
	if m != nil {
		return m.Validity
	}
	return 0
}

func (m *DeckInfo) GetHeroPremium() int32 {
	if m != nil {
		return m.HeroPremium
	}
	return 0
}

func (m *DeckInfo) GetCardBackOverride() bool {
	if m != nil {
		return m.CardBackOverride
	}
	return false
}

func (m *DeckInfo) GetHeroOverride() bool {
	if m != nil {
		return m.HeroOverride
	}
	return false
}

func (m *DeckInfo) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *DeckInfo) GetSeasonId() int32 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *DeckInfo) GetSortOrder() int64 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *DeckInfo) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *DeckInfo) GetSourceType() DeckSourceType {
	if m != nil {
		return m.SourceType
	}
	return DeckSourceType_DECK_SOURCE_TYPE_UNKNOWN
}

// ref: PegasusShared.DeckRulesetDbRecord
type DeckRulesetDbRecord struct {
	Id    int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Rules []*DeckRulesetRuleDbRecord `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *DeckRulesetDbRecord) Reset()                    { *m = DeckRulesetDbRecord{} }
func (m *DeckRulesetDbRecord) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetDbRecord) ProtoMessage()               {}
func (*DeckRulesetDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeckRulesetDbRecord) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeckRulesetDbRecord) GetRules() []*DeckRulesetRuleDbRecord {
	if m != nil {
		return m.Rules
	}
	return nil
}

// ref: PegasusShared.DeckRulesetRuleDbRecord
type DeckRulesetRuleDbRecord struct {
	Id                int32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DeckRulesetId     int32              `protobuf:"varint,2,opt,name=deck_ruleset_id,json=deckRulesetId" json:"deck_ruleset_id,omitempty"`
	AppliesToSubsetId int32              `protobuf:"varint,3,opt,name=applies_to_subset_id,json=appliesToSubsetId" json:"applies_to_subset_id,omitempty"`
	AppliesToIsNot    bool               `protobuf:"varint,4,opt,name=applies_to_is_not,json=appliesToIsNot" json:"applies_to_is_not,omitempty"`
	RuleType          string             `protobuf:"bytes,5,opt,name=rule_type,json=ruleType" json:"rule_type,omitempty"`
	RuleIsNot         bool               `protobuf:"varint,6,opt,name=rule_is_not,json=ruleIsNot" json:"rule_is_not,omitempty"`
	MinValue          int32              `protobuf:"varint,7,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue          int32              `protobuf:"varint,8,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	Tag               int32              `protobuf:"varint,9,opt,name=tag" json:"tag,omitempty"`
	TagMinValue       int32              `protobuf:"varint,10,opt,name=tag_min_value,json=tagMinValue" json:"tag_min_value,omitempty"`
	TagMaxValue       int32              `protobuf:"varint,11,opt,name=tag_max_value,json=tagMaxValue" json:"tag_max_value,omitempty"`
	StringValue       string             `protobuf:"bytes,12,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	TargetSubsetIds   []int32            `protobuf:"varint,13,rep,name=target_subset_ids,json=targetSubsetIds" json:"target_subset_ids,omitempty"`
	Strings           []*LocalizedString `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
}

func (m *DeckRulesetRuleDbRecord) Reset()                    { *m = DeckRulesetRuleDbRecord{} }
func (m *DeckRulesetRuleDbRecord) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetRuleDbRecord) ProtoMessage()               {}
func (*DeckRulesetRuleDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeckRulesetRuleDbRecord) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetDeckRulesetId() int32 {
	if m != nil {
		return m.DeckRulesetId
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetAppliesToSubsetId() int32 {
	if m != nil {
		return m.AppliesToSubsetId
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetAppliesToIsNot() bool {
	if m != nil {
		return m.AppliesToIsNot
	}
	return false
}

func (m *DeckRulesetRuleDbRecord) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

func (m *DeckRulesetRuleDbRecord) GetRuleIsNot() bool {
	if m != nil {
		return m.RuleIsNot
	}
	return false
}

func (m *DeckRulesetRuleDbRecord) GetMinValue() int32 {
	if m != nil {
		return m.MinValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetMaxValue() int32 {
	if m != nil {
		return m.MaxValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTag() int32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTagMinValue() int32 {
	if m != nil {
		return m.TagMinValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTagMaxValue() int32 {
	if m != nil {
		return m.TagMaxValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *DeckRulesetRuleDbRecord) GetTargetSubsetIds() []int32 {
	if m != nil {
		return m.TargetSubsetIds
	}
	return nil
}

func (m *DeckRulesetRuleDbRecord) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

// ref: PegasusShared.DeckRulesetValidationResults
type DeckRulesetValidationResults struct {
	DeckRulesetId int32                   `protobuf:"varint,1,opt,name=deck_ruleset_id,json=deckRulesetId" json:"deck_ruleset_id,omitempty"`
	ErrorCode     ErrorCode               `protobuf:"varint,2,opt,name=error_code,json=errorCode,enum=pegasus.pegasusshared.ErrorCode" json:"error_code,omitempty"`
	Violations    []*DeckRulesetViolation `protobuf:"bytes,3,rep,name=violations" json:"violations,omitempty"`
}

func (m *DeckRulesetValidationResults) Reset()                    { *m = DeckRulesetValidationResults{} }
func (m *DeckRulesetValidationResults) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetValidationResults) ProtoMessage()               {}
func (*DeckRulesetValidationResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeckRulesetValidationResults) GetDeckRulesetId() int32 {
	if m != nil {
		return m.DeckRulesetId
	}
	return 0
}

func (m *DeckRulesetValidationResults) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_ERROR_OK
}

func (m *DeckRulesetValidationResults) GetViolations() []*DeckRulesetViolation {
	if m != nil {
		return m.Violations
	}
	return nil
}

// ref: PegasusShared.DeckRulesetViolation
type DeckRulesetViolation struct {
	Card         *CardDef `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	Count        int32    `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	DeckRuleId   int32    `protobuf:"varint,100,opt,name=deck_rule_id,json=deckRuleId" json:"deck_rule_id,omitempty"`
	DeckRuleDesc string   `protobuf:"bytes,101,opt,name=deck_rule_desc,json=deckRuleDesc" json:"deck_rule_desc,omitempty"`
}

func (m *DeckRulesetViolation) Reset()                    { *m = DeckRulesetViolation{} }
func (m *DeckRulesetViolation) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetViolation) ProtoMessage()               {}
func (*DeckRulesetViolation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeckRulesetViolation) GetCard() *CardDef {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *DeckRulesetViolation) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DeckRulesetViolation) GetDeckRuleId() int32 {
	if m != nil {
		return m.DeckRuleId
	}
	return 0
}

func (m *DeckRulesetViolation) GetDeckRuleDesc() string {
	if m != nil {
		return m.DeckRuleDesc
	}
	return ""
}

// ref: PegasusShared.FavoriteHero
type FavoriteHero struct {
	ClassId int32    `protobuf:"varint,1,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	Hero    *CardDef `protobuf:"bytes,2,opt,name=hero" json:"hero,omitempty"`
}

func (m *FavoriteHero) Reset()                    { *m = FavoriteHero{} }
func (m *FavoriteHero) String() string            { return proto.CompactTextString(m) }
func (*FavoriteHero) ProtoMessage()               {}
func (*FavoriteHero) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FavoriteHero) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *FavoriteHero) GetHero() *CardDef {
	if m != nil {
		return m.Hero
	}
	return nil
}

// ref: PegasusShared.FSGConfig
type FSGConfig struct {
	FsgId                  int64           `protobuf:"varint,1,opt,name=fsg_id,json=fsgId" json:"fsg_id,omitempty"`
	UnixStartTimeWithSlush int64           `protobuf:"varint,2,opt,name=unix_start_time_with_slush,json=unixStartTimeWithSlush" json:"unix_start_time_with_slush,omitempty"`
	UnixEndTimeWithSlush   int64           `protobuf:"varint,3,opt,name=unix_end_time_with_slush,json=unixEndTimeWithSlush" json:"unix_end_time_with_slush,omitempty"`
	Name                   string          `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	SignData               *TavernSignData `protobuf:"bytes,5,opt,name=sign_data,json=signData" json:"sign_data,omitempty"`
	UnixOfficialStartTime  int64           `protobuf:"varint,6,opt,name=unix_official_start_time,json=unixOfficialStartTime" json:"unix_official_start_time,omitempty"`
	PatronCount            int64           `protobuf:"varint,7,opt,name=patron_count,json=patronCount" json:"patron_count,omitempty"`
	IsInnkeeper            bool            `protobuf:"varint,8,opt,name=is_innkeeper,json=isInnkeeper" json:"is_innkeeper,omitempty"`
	IsSetupComplete        bool            `protobuf:"varint,9,opt,name=is_setup_complete,json=isSetupComplete" json:"is_setup_complete,omitempty"`
	UnixOfficialEndTime    int64           `protobuf:"varint,10,opt,name=unix_official_end_time,json=unixOfficialEndTime" json:"unix_official_end_time,omitempty"`
}

func (m *FSGConfig) Reset()                    { *m = FSGConfig{} }
func (m *FSGConfig) String() string            { return proto.CompactTextString(m) }
func (*FSGConfig) ProtoMessage()               {}
func (*FSGConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FSGConfig) GetFsgId() int64 {
	if m != nil {
		return m.FsgId
	}
	return 0
}

func (m *FSGConfig) GetUnixStartTimeWithSlush() int64 {
	if m != nil {
		return m.UnixStartTimeWithSlush
	}
	return 0
}

func (m *FSGConfig) GetUnixEndTimeWithSlush() int64 {
	if m != nil {
		return m.UnixEndTimeWithSlush
	}
	return 0
}

func (m *FSGConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FSGConfig) GetSignData() *TavernSignData {
	if m != nil {
		return m.SignData
	}
	return nil
}

func (m *FSGConfig) GetUnixOfficialStartTime() int64 {
	if m != nil {
		return m.UnixOfficialStartTime
	}
	return 0
}

func (m *FSGConfig) GetPatronCount() int64 {
	if m != nil {
		return m.PatronCount
	}
	return 0
}

func (m *FSGConfig) GetIsInnkeeper() bool {
	if m != nil {
		return m.IsInnkeeper
	}
	return false
}

func (m *FSGConfig) GetIsSetupComplete() bool {
	if m != nil {
		return m.IsSetupComplete
	}
	return false
}

func (m *FSGConfig) GetUnixOfficialEndTime() int64 {
	if m != nil {
		return m.UnixOfficialEndTime
	}
	return 0
}

// ref: PegasusShared.FSGPatron
type FSGPatron struct {
	GameAccount *BnetId `protobuf:"bytes,1,opt,name=game_account,json=gameAccount" json:"game_account,omitempty"`
	BnetAccount *BnetId `protobuf:"bytes,2,opt,name=bnet_account,json=bnetAccount" json:"bnet_account,omitempty"`
}

func (m *FSGPatron) Reset()                    { *m = FSGPatron{} }
func (m *FSGPatron) String() string            { return proto.CompactTextString(m) }
func (*FSGPatron) ProtoMessage()               {}
func (*FSGPatron) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *FSGPatron) GetGameAccount() *BnetId {
	if m != nil {
		return m.GameAccount
	}
	return nil
}

func (m *FSGPatron) GetBnetAccount() *BnetId {
	if m != nil {
		return m.BnetAccount
	}
	return nil
}

// ref: PegasusShared.GPSCoords
type GPSCoords struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	Accuracy  float64 `protobuf:"fixed64,3,opt,name=accuracy" json:"accuracy,omitempty"`
}

func (m *GPSCoords) Reset()                    { *m = GPSCoords{} }
func (m *GPSCoords) String() string            { return proto.CompactTextString(m) }
func (*GPSCoords) ProtoMessage()               {}
func (*GPSCoords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GPSCoords) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GPSCoords) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GPSCoords) GetAccuracy() float64 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

// ref: PegasusShared.LocalizedString
type LocalizedString struct {
	Key              string                  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	DeprecatedValue  string                  `protobuf:"bytes,2,opt,name=deprecated_value,json=deprecatedValue" json:"deprecated_value,omitempty"`
	DeprecatedLocale int32                   `protobuf:"varint,3,opt,name=deprecated_locale,json=deprecatedLocale" json:"deprecated_locale,omitempty"`
	Values           []*LocalizedStringValue `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
}

func (m *LocalizedString) Reset()                    { *m = LocalizedString{} }
func (m *LocalizedString) String() string            { return proto.CompactTextString(m) }
func (*LocalizedString) ProtoMessage()               {}
func (*LocalizedString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *LocalizedString) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LocalizedString) GetDeprecatedValue() string {
	if m != nil {
		return m.DeprecatedValue
	}
	return ""
}

func (m *LocalizedString) GetDeprecatedLocale() int32 {
	if m != nil {
		return m.DeprecatedLocale
	}
	return 0
}

func (m *LocalizedString) GetValues() []*LocalizedStringValue {
	if m != nil {
		return m.Values
	}
	return nil
}

// ref: PegasusShared.LocalizedStringValue
type LocalizedStringValue struct {
	Locale int32  `protobuf:"varint,1,opt,name=locale" json:"locale,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *LocalizedStringValue) Reset()                    { *m = LocalizedStringValue{} }
func (m *LocalizedStringValue) String() string            { return proto.CompactTextString(m) }
func (*LocalizedStringValue) ProtoMessage()               {}
func (*LocalizedStringValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *LocalizedStringValue) GetLocale() int32 {
	if m != nil {
		return m.Locale
	}
	return 0
}

func (m *LocalizedStringValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// ref: PegasusShared.Platform
type Platform struct {
	Os                     int32  `protobuf:"varint,1,opt,name=os" json:"os,omitempty"`
	Screen                 int32  `protobuf:"varint,2,opt,name=screen" json:"screen,omitempty"`
	Name                   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Store                  int32  `protobuf:"varint,4,opt,name=store" json:"store,omitempty"`
	UniqueDeviceIdentifier string `protobuf:"bytes,5,opt,name=unique_device_identifier,json=uniqueDeviceIdentifier" json:"unique_device_identifier,omitempty"`
}

func (m *Platform) Reset()                    { *m = Platform{} }
func (m *Platform) String() string            { return proto.CompactTextString(m) }
func (*Platform) ProtoMessage()               {}
func (*Platform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Platform) GetOs() int32 {
	if m != nil {
		return m.Os
	}
	return 0
}

func (m *Platform) GetScreen() int32 {
	if m != nil {
		return m.Screen
	}
	return 0
}

func (m *Platform) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Platform) GetStore() int32 {
	if m != nil {
		return m.Store
	}
	return 0
}

func (m *Platform) GetUniqueDeviceIdentifier() string {
	if m != nil {
		return m.UniqueDeviceIdentifier
	}
	return ""
}

// ref: PegasusShared.PlayerIdentity
type PlayerIdentity struct {
	PlayerId    int64   `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	GameAccount *BnetId `protobuf:"bytes,2,opt,name=game_account,json=gameAccount" json:"game_account,omitempty"`
	Account     *BnetId `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
}

func (m *PlayerIdentity) Reset()                    { *m = PlayerIdentity{} }
func (m *PlayerIdentity) String() string            { return proto.CompactTextString(m) }
func (*PlayerIdentity) ProtoMessage()               {}
func (*PlayerIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PlayerIdentity) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerIdentity) GetGameAccount() *BnetId {
	if m != nil {
		return m.GameAccount
	}
	return nil
}

func (m *PlayerIdentity) GetAccount() *BnetId {
	if m != nil {
		return m.Account
	}
	return nil
}

// ref: PegasusShared.PlayQueueInfo
type PlayQueueInfo struct {
	GameType BnetGameType `protobuf:"varint,1,opt,name=game_type,json=gameType,enum=pegasus.pegasusshared.BnetGameType" json:"game_type,omitempty"`
}

func (m *PlayQueueInfo) Reset()                    { *m = PlayQueueInfo{} }
func (m *PlayQueueInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayQueueInfo) ProtoMessage()               {}
func (*PlayQueueInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PlayQueueInfo) GetGameType() BnetGameType {
	if m != nil {
		return m.GameType
	}
	return BnetGameType_BGT_UNKNOWN
}

// ref: PegasusShared.ProfileNoticeAccountLicense
type ProfileNoticeAccountLicense struct {
	License int64 `protobuf:"varint,1,opt,name=license" json:"license,omitempty"`
	CasId   int64 `protobuf:"varint,2,opt,name=cas_id,json=casId" json:"cas_id,omitempty"`
}

func (m *ProfileNoticeAccountLicense) Reset()                    { *m = ProfileNoticeAccountLicense{} }
func (m *ProfileNoticeAccountLicense) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeAccountLicense) ProtoMessage()               {}
func (*ProfileNoticeAccountLicense) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ProfileNoticeAccountLicense) GetLicense() int64 {
	if m != nil {
		return m.License
	}
	return 0
}

func (m *ProfileNoticeAccountLicense) GetCasId() int64 {
	if m != nil {
		return m.CasId
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeAdventureProgress
type ProfileNoticeAdventureProgress struct {
	WingId int32 `protobuf:"varint,1,opt,name=wing_id,json=wingId" json:"wing_id,omitempty"`
}

func (m *ProfileNoticeAdventureProgress) Reset()                    { *m = ProfileNoticeAdventureProgress{} }
func (m *ProfileNoticeAdventureProgress) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeAdventureProgress) ProtoMessage()               {}
func (*ProfileNoticeAdventureProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ProfileNoticeAdventureProgress) GetWingId() int32 {
	if m != nil {
		return m.WingId
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeBonusStars
type ProfileNoticeBonusStars struct {
	StarLevel int32 `protobuf:"varint,1,opt,name=star_level,json=starLevel" json:"star_level,omitempty"`
	Stars     int32 `protobuf:"varint,2,opt,name=stars" json:"stars,omitempty"`
}

func (m *ProfileNoticeBonusStars) Reset()                    { *m = ProfileNoticeBonusStars{} }
func (m *ProfileNoticeBonusStars) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeBonusStars) ProtoMessage()               {}
func (*ProfileNoticeBonusStars) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ProfileNoticeBonusStars) GetStarLevel() int32 {
	if m != nil {
		return m.StarLevel
	}
	return 0
}

func (m *ProfileNoticeBonusStars) GetStars() int32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeCardBack
type ProfileNoticeCardBack struct {
	CardBack int32 `protobuf:"varint,1,opt,name=card_back,json=cardBack" json:"card_back,omitempty"`
}

func (m *ProfileNoticeCardBack) Reset()                    { *m = ProfileNoticeCardBack{} }
func (m *ProfileNoticeCardBack) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeCardBack) ProtoMessage()               {}
func (*ProfileNoticeCardBack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ProfileNoticeCardBack) GetCardBack() int32 {
	if m != nil {
		return m.CardBack
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult
type ProfileNoticeDisconnectedGameResult struct {
	GameType       GameType                                         `protobuf:"varint,8,opt,name=game_type,json=gameType,enum=pegasus.pegasusshared.GameType" json:"game_type,omitempty"`
	MissionId      int32                                            `protobuf:"varint,9,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	GameResult     ProfileNoticeDisconnectedGameResult_GameResult   `protobuf:"varint,10,opt,name=game_result,json=gameResult,enum=pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_GameResult" json:"game_result,omitempty"`
	YourResult     ProfileNoticeDisconnectedGameResult_PlayerResult `protobuf:"varint,11,opt,name=your_result,json=yourResult,enum=pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult" json:"your_result,omitempty"`
	OpponentResult ProfileNoticeDisconnectedGameResult_PlayerResult `protobuf:"varint,12,opt,name=opponent_result,json=opponentResult,enum=pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult" json:"opponent_result,omitempty"`
	FormatType     FormatType                                       `protobuf:"varint,13,opt,name=format_type,json=formatType,enum=pegasus.pegasusshared.FormatType" json:"format_type,omitempty"`
}

func (m *ProfileNoticeDisconnectedGameResult) Reset()         { *m = ProfileNoticeDisconnectedGameResult{} }
func (m *ProfileNoticeDisconnectedGameResult) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeDisconnectedGameResult) ProtoMessage()    {}
func (*ProfileNoticeDisconnectedGameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32}
}

func (m *ProfileNoticeDisconnectedGameResult) GetGameType() GameType {
	if m != nil {
		return m.GameType
	}
	return GameType_GT_UNKNOWN
}

func (m *ProfileNoticeDisconnectedGameResult) GetMissionId() int32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *ProfileNoticeDisconnectedGameResult) GetGameResult() ProfileNoticeDisconnectedGameResult_GameResult {
	if m != nil {
		return m.GameResult
	}
	return ProfileNoticeDisconnectedGameResult_GR_UNKNOWN
}

func (m *ProfileNoticeDisconnectedGameResult) GetYourResult() ProfileNoticeDisconnectedGameResult_PlayerResult {
	if m != nil {
		return m.YourResult
	}
	return ProfileNoticeDisconnectedGameResult_PR_UNKNOWN
}

func (m *ProfileNoticeDisconnectedGameResult) GetOpponentResult() ProfileNoticeDisconnectedGameResult_PlayerResult {
	if m != nil {
		return m.OpponentResult
	}
	return ProfileNoticeDisconnectedGameResult_PR_UNKNOWN
}

func (m *ProfileNoticeDisconnectedGameResult) GetFormatType() FormatType {
	if m != nil {
		return m.FormatType
	}
	return FormatType_FT_UNKNOWN
}

// ref: PegasusShared.ProfileNoticeLevelUp
type ProfileNoticeLevelUp struct {
	HeroClass int32 `protobuf:"varint,1,opt,name=hero_class,json=heroClass" json:"hero_class,omitempty"`
	NewLevel  int32 `protobuf:"varint,2,opt,name=new_level,json=newLevel" json:"new_level,omitempty"`
}

func (m *ProfileNoticeLevelUp) Reset()                    { *m = ProfileNoticeLevelUp{} }
func (m *ProfileNoticeLevelUp) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeLevelUp) ProtoMessage()               {}
func (*ProfileNoticeLevelUp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ProfileNoticeLevelUp) GetHeroClass() int32 {
	if m != nil {
		return m.HeroClass
	}
	return 0
}

func (m *ProfileNoticeLevelUp) GetNewLevel() int32 {
	if m != nil {
		return m.NewLevel
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeMedal
type ProfileNoticeMedal struct {
	StarLevel     int32                        `protobuf:"varint,1,opt,name=star_level,json=starLevel" json:"star_level,omitempty"`
	LegendRank    int32                        `protobuf:"varint,2,opt,name=legend_rank,json=legendRank" json:"legend_rank,omitempty"`
	BestStarLevel int32                        `protobuf:"varint,3,opt,name=best_star_level,json=bestStarLevel" json:"best_star_level,omitempty"`
	Chest         *RewardChest                 `protobuf:"bytes,4,opt,name=chest" json:"chest,omitempty"`
	MedalType     ProfileNoticeMedal_MedalType `protobuf:"varint,5,opt,name=medal_type,json=medalType,enum=pegasus.pegasusshared.ProfileNoticeMedal_MedalType" json:"medal_type,omitempty"`
}

func (m *ProfileNoticeMedal) Reset()                    { *m = ProfileNoticeMedal{} }
func (m *ProfileNoticeMedal) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeMedal) ProtoMessage()               {}
func (*ProfileNoticeMedal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ProfileNoticeMedal) GetStarLevel() int32 {
	if m != nil {
		return m.StarLevel
	}
	return 0
}

func (m *ProfileNoticeMedal) GetLegendRank() int32 {
	if m != nil {
		return m.LegendRank
	}
	return 0
}

func (m *ProfileNoticeMedal) GetBestStarLevel() int32 {
	if m != nil {
		return m.BestStarLevel
	}
	return 0
}

func (m *ProfileNoticeMedal) GetChest() *RewardChest {
	if m != nil {
		return m.Chest
	}
	return nil
}

func (m *ProfileNoticeMedal) GetMedalType() ProfileNoticeMedal_MedalType {
	if m != nil {
		return m.MedalType
	}
	return ProfileNoticeMedal_UNKNOWN_MEDAL
}

// ref: PegasusShared.ProfileNoticePreconDeck
type ProfileNoticePreconDeck struct {
	Deck int64 `protobuf:"varint,1,opt,name=deck" json:"deck,omitempty"`
	Hero int32 `protobuf:"varint,2,opt,name=hero" json:"hero,omitempty"`
}

func (m *ProfileNoticePreconDeck) Reset()                    { *m = ProfileNoticePreconDeck{} }
func (m *ProfileNoticePreconDeck) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticePreconDeck) ProtoMessage()               {}
func (*ProfileNoticePreconDeck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ProfileNoticePreconDeck) GetDeck() int64 {
	if m != nil {
		return m.Deck
	}
	return 0
}

func (m *ProfileNoticePreconDeck) GetHero() int32 {
	if m != nil {
		return m.Hero
	}
	return 0
}

// ref: PegasusShared.ProfileNoticePurchase
type ProfileNoticePurchase struct {
	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Data      int64  `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
	Currency  int32  `protobuf:"varint,3,opt,name=currency" json:"currency,omitempty"`
}

func (m *ProfileNoticePurchase) Reset()                    { *m = ProfileNoticePurchase{} }
func (m *ProfileNoticePurchase) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticePurchase) ProtoMessage()               {}
func (*ProfileNoticePurchase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ProfileNoticePurchase) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *ProfileNoticePurchase) GetData() int64 {
	if m != nil {
		return m.Data
	}
	return 0
}

func (m *ProfileNoticePurchase) GetCurrency() int32 {
	if m != nil {
		return m.Currency
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardBooster
type ProfileNoticeRewardBooster struct {
	BoosterType  int32 `protobuf:"varint,1,opt,name=booster_type,json=boosterType" json:"booster_type,omitempty"`
	BoosterCount int32 `protobuf:"varint,2,opt,name=booster_count,json=boosterCount" json:"booster_count,omitempty"`
}

func (m *ProfileNoticeRewardBooster) Reset()                    { *m = ProfileNoticeRewardBooster{} }
func (m *ProfileNoticeRewardBooster) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardBooster) ProtoMessage()               {}
func (*ProfileNoticeRewardBooster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ProfileNoticeRewardBooster) GetBoosterType() int32 {
	if m != nil {
		return m.BoosterType
	}
	return 0
}

func (m *ProfileNoticeRewardBooster) GetBoosterCount() int32 {
	if m != nil {
		return m.BoosterCount
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardCard
type ProfileNoticeRewardCard struct {
	Card     *CardDef `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	Quantity int32    `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *ProfileNoticeRewardCard) Reset()                    { *m = ProfileNoticeRewardCard{} }
func (m *ProfileNoticeRewardCard) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardCard) ProtoMessage()               {}
func (*ProfileNoticeRewardCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ProfileNoticeRewardCard) GetCard() *CardDef {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *ProfileNoticeRewardCard) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardCard2x
type ProfileNoticeRewardCard2X struct {
}

func (m *ProfileNoticeRewardCard2X) Reset()                    { *m = ProfileNoticeRewardCard2X{} }
func (m *ProfileNoticeRewardCard2X) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardCard2X) ProtoMessage()               {}
func (*ProfileNoticeRewardCard2X) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

// ref: PegasusShared.ProfileNoticeRewardDust
type ProfileNoticeRewardDust struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *ProfileNoticeRewardDust) Reset()                    { *m = ProfileNoticeRewardDust{} }
func (m *ProfileNoticeRewardDust) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardDust) ProtoMessage()               {}
func (*ProfileNoticeRewardDust) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ProfileNoticeRewardDust) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardForge
type ProfileNoticeRewardForge struct {
	Quantity int32 `protobuf:"varint,1,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *ProfileNoticeRewardForge) Reset()                    { *m = ProfileNoticeRewardForge{} }
func (m *ProfileNoticeRewardForge) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardForge) ProtoMessage()               {}
func (*ProfileNoticeRewardForge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ProfileNoticeRewardForge) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardGold
type ProfileNoticeRewardGold struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *ProfileNoticeRewardGold) Reset()                    { *m = ProfileNoticeRewardGold{} }
func (m *ProfileNoticeRewardGold) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardGold) ProtoMessage()               {}
func (*ProfileNoticeRewardGold) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ProfileNoticeRewardGold) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeRewardMount
type ProfileNoticeRewardMount struct {
	MountId int32 `protobuf:"varint,1,opt,name=mount_id,json=mountId" json:"mount_id,omitempty"`
}

func (m *ProfileNoticeRewardMount) Reset()                    { *m = ProfileNoticeRewardMount{} }
func (m *ProfileNoticeRewardMount) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardMount) ProtoMessage()               {}
func (*ProfileNoticeRewardMount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ProfileNoticeRewardMount) GetMountId() int32 {
	if m != nil {
		return m.MountId
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeTavernBrawlRewards
type ProfileNoticeTavernBrawlRewards struct {
	RewardChest *RewardChest `protobuf:"bytes,1,opt,name=reward_chest,json=rewardChest" json:"reward_chest,omitempty"`
	NumWins     int32        `protobuf:"varint,2,opt,name=num_wins,json=numWins" json:"num_wins,omitempty"`
}

func (m *ProfileNoticeTavernBrawlRewards) Reset()         { *m = ProfileNoticeTavernBrawlRewards{} }
func (m *ProfileNoticeTavernBrawlRewards) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeTavernBrawlRewards) ProtoMessage()    {}
func (*ProfileNoticeTavernBrawlRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{44}
}

func (m *ProfileNoticeTavernBrawlRewards) GetRewardChest() *RewardChest {
	if m != nil {
		return m.RewardChest
	}
	return nil
}

func (m *ProfileNoticeTavernBrawlRewards) GetNumWins() int32 {
	if m != nil {
		return m.NumWins
	}
	return 0
}

// ref: PegasusShared.ProfileNoticeTavernBrawlTicket
type ProfileNoticeTavernBrawlTicket struct {
	TicketType int32 `protobuf:"varint,1,opt,name=ticket_type,json=ticketType" json:"ticket_type,omitempty"`
	Quantity   int32 `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *ProfileNoticeTavernBrawlTicket) Reset()                    { *m = ProfileNoticeTavernBrawlTicket{} }
func (m *ProfileNoticeTavernBrawlTicket) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeTavernBrawlTicket) ProtoMessage()               {}
func (*ProfileNoticeTavernBrawlTicket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ProfileNoticeTavernBrawlTicket) GetTicketType() int32 {
	if m != nil {
		return m.TicketType
	}
	return 0
}

func (m *ProfileNoticeTavernBrawlTicket) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// ref: PegasusShared.RewardBag
type RewardBag struct {
	RewardBooster  *ProfileNoticeRewardBooster `protobuf:"bytes,1,opt,name=reward_booster,json=rewardBooster" json:"reward_booster,omitempty"`
	RewardCard     *ProfileNoticeRewardCard    `protobuf:"bytes,2,opt,name=reward_card,json=rewardCard" json:"reward_card,omitempty"`
	RewardDust     *ProfileNoticeRewardDust    `protobuf:"bytes,3,opt,name=reward_dust,json=rewardDust" json:"reward_dust,omitempty"`
	RewardGold     *ProfileNoticeRewardGold    `protobuf:"bytes,4,opt,name=reward_gold,json=rewardGold" json:"reward_gold,omitempty"`
	RewardCardBack *ProfileNoticeCardBack      `protobuf:"bytes,5,opt,name=reward_card_back,json=rewardCardBack" json:"reward_card_back,omitempty"`
}

func (m *RewardBag) Reset()                    { *m = RewardBag{} }
func (m *RewardBag) String() string            { return proto.CompactTextString(m) }
func (*RewardBag) ProtoMessage()               {}
func (*RewardBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *RewardBag) GetRewardBooster() *ProfileNoticeRewardBooster {
	if m != nil {
		return m.RewardBooster
	}
	return nil
}

func (m *RewardBag) GetRewardCard() *ProfileNoticeRewardCard {
	if m != nil {
		return m.RewardCard
	}
	return nil
}

func (m *RewardBag) GetRewardDust() *ProfileNoticeRewardDust {
	if m != nil {
		return m.RewardDust
	}
	return nil
}

func (m *RewardBag) GetRewardGold() *ProfileNoticeRewardGold {
	if m != nil {
		return m.RewardGold
	}
	return nil
}

func (m *RewardBag) GetRewardCardBack() *ProfileNoticeCardBack {
	if m != nil {
		return m.RewardCardBack
	}
	return nil
}

// ref: PegasusShared.RewardChest
type RewardChest struct {
	Bag1 *RewardBag   `protobuf:"bytes,1,opt,name=bag1" json:"bag1,omitempty"`
	Bag2 *RewardBag   `protobuf:"bytes,2,opt,name=bag2" json:"bag2,omitempty"`
	Bag3 *RewardBag   `protobuf:"bytes,3,opt,name=bag3" json:"bag3,omitempty"`
	Bag4 *RewardBag   `protobuf:"bytes,4,opt,name=bag4" json:"bag4,omitempty"`
	Bag5 *RewardBag   `protobuf:"bytes,5,opt,name=bag5" json:"bag5,omitempty"`
	Bag  []*RewardBag `protobuf:"bytes,6,rep,name=bag" json:"bag,omitempty"`
}

func (m *RewardChest) Reset()                    { *m = RewardChest{} }
func (m *RewardChest) String() string            { return proto.CompactTextString(m) }
func (*RewardChest) ProtoMessage()               {}
func (*RewardChest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *RewardChest) GetBag1() *RewardBag {
	if m != nil {
		return m.Bag1
	}
	return nil
}

func (m *RewardChest) GetBag2() *RewardBag {
	if m != nil {
		return m.Bag2
	}
	return nil
}

func (m *RewardChest) GetBag3() *RewardBag {
	if m != nil {
		return m.Bag3
	}
	return nil
}

func (m *RewardChest) GetBag4() *RewardBag {
	if m != nil {
		return m.Bag4
	}
	return nil
}

func (m *RewardChest) GetBag5() *RewardBag {
	if m != nil {
		return m.Bag5
	}
	return nil
}

func (m *RewardChest) GetBag() []*RewardBag {
	if m != nil {
		return m.Bag
	}
	return nil
}

// ref: PegasusShared.ScenarioDbRecord
type ScenarioDbRecord struct {
	Id                            int32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NoteDesc                      string             `protobuf:"bytes,2,opt,name=note_desc,json=noteDesc" json:"note_desc,omitempty"`
	NumPlayers                    int32              `protobuf:"varint,3,opt,name=num_players,json=numPlayers" json:"num_players,omitempty"`
	Player1HeroCardId             int64              `protobuf:"varint,4,opt,name=player1_hero_card_id,json=player1HeroCardId" json:"player1_hero_card_id,omitempty"`
	Player2HeroCardId             int64              `protobuf:"varint,5,opt,name=player2_hero_card_id,json=player2HeroCardId" json:"player2_hero_card_id,omitempty"`
	IsExpert                      bool               `protobuf:"varint,6,opt,name=is_expert,json=isExpert" json:"is_expert,omitempty"`
	AdventureId                   int32              `protobuf:"varint,7,opt,name=adventure_id,json=adventureId" json:"adventure_id,omitempty"`
	AdventureModeId               int32              `protobuf:"varint,8,opt,name=adventure_mode_id,json=adventureModeId" json:"adventure_mode_id,omitempty"`
	WingId                        int32              `protobuf:"varint,9,opt,name=wing_id,json=wingId" json:"wing_id,omitempty"`
	SortOrder                     int32              `protobuf:"varint,10,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	ClientPlayer2HeroCardId       int64              `protobuf:"varint,11,opt,name=client_player2_hero_card_id,json=clientPlayer2HeroCardId" json:"client_player2_hero_card_id,omitempty"`
	TavernBrawlTexture            string             `protobuf:"bytes,12,opt,name=tavern_brawl_texture,json=tavernBrawlTexture" json:"tavern_brawl_texture,omitempty"`
	TavernBrawlTexturePhone       string             `protobuf:"bytes,13,opt,name=tavern_brawl_texture_phone,json=tavernBrawlTexturePhone" json:"tavern_brawl_texture_phone,omitempty"`
	TavernBrawlTexturePhoneOffset *Vector2           `protobuf:"bytes,14,opt,name=tavern_brawl_texture_phone_offset,json=tavernBrawlTexturePhoneOffset" json:"tavern_brawl_texture_phone_offset,omitempty"`
	IsCoop                        bool               `protobuf:"varint,15,opt,name=is_coop,json=isCoop" json:"is_coop,omitempty"`
	DeckRulesetId                 int32              `protobuf:"varint,16,opt,name=deck_ruleset_id,json=deckRulesetId" json:"deck_ruleset_id,omitempty"`
	RuleType                      RuleType           `protobuf:"varint,17,opt,name=rule_type,json=ruleType,enum=pegasus.pegasusshared.RuleType" json:"rule_type,omitempty"`
	Strings                       []*LocalizedString `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
}

func (m *ScenarioDbRecord) Reset()                    { *m = ScenarioDbRecord{} }
func (m *ScenarioDbRecord) String() string            { return proto.CompactTextString(m) }
func (*ScenarioDbRecord) ProtoMessage()               {}
func (*ScenarioDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ScenarioDbRecord) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ScenarioDbRecord) GetNoteDesc() string {
	if m != nil {
		return m.NoteDesc
	}
	return ""
}

func (m *ScenarioDbRecord) GetNumPlayers() int32 {
	if m != nil {
		return m.NumPlayers
	}
	return 0
}

func (m *ScenarioDbRecord) GetPlayer1HeroCardId() int64 {
	if m != nil {
		return m.Player1HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetPlayer2HeroCardId() int64 {
	if m != nil {
		return m.Player2HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetIsExpert() bool {
	if m != nil {
		return m.IsExpert
	}
	return false
}

func (m *ScenarioDbRecord) GetAdventureId() int32 {
	if m != nil {
		return m.AdventureId
	}
	return 0
}

func (m *ScenarioDbRecord) GetAdventureModeId() int32 {
	if m != nil {
		return m.AdventureModeId
	}
	return 0
}

func (m *ScenarioDbRecord) GetWingId() int32 {
	if m != nil {
		return m.WingId
	}
	return 0
}

func (m *ScenarioDbRecord) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *ScenarioDbRecord) GetClientPlayer2HeroCardId() int64 {
	if m != nil {
		return m.ClientPlayer2HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetTavernBrawlTexture() string {
	if m != nil {
		return m.TavernBrawlTexture
	}
	return ""
}

func (m *ScenarioDbRecord) GetTavernBrawlTexturePhone() string {
	if m != nil {
		return m.TavernBrawlTexturePhone
	}
	return ""
}

func (m *ScenarioDbRecord) GetTavernBrawlTexturePhoneOffset() *Vector2 {
	if m != nil {
		return m.TavernBrawlTexturePhoneOffset
	}
	return nil
}

func (m *ScenarioDbRecord) GetIsCoop() bool {
	if m != nil {
		return m.IsCoop
	}
	return false
}

func (m *ScenarioDbRecord) GetDeckRulesetId() int32 {
	if m != nil {
		return m.DeckRulesetId
	}
	return 0
}

func (m *ScenarioDbRecord) GetRuleType() RuleType {
	if m != nil {
		return m.RuleType
	}
	return RuleType_RULE_NONE
}

func (m *ScenarioDbRecord) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

// ref: PegasusShared.SubsetCardListDbRecord
type SubsetCardListDbRecord struct {
	SubsetId int32   `protobuf:"varint,1,opt,name=subset_id,json=subsetId" json:"subset_id,omitempty"`
	CardIds  []int32 `protobuf:"varint,2,rep,name=card_ids,json=cardIds" json:"card_ids,omitempty"`
}

func (m *SubsetCardListDbRecord) Reset()                    { *m = SubsetCardListDbRecord{} }
func (m *SubsetCardListDbRecord) String() string            { return proto.CompactTextString(m) }
func (*SubsetCardListDbRecord) ProtoMessage()               {}
func (*SubsetCardListDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *SubsetCardListDbRecord) GetSubsetId() int32 {
	if m != nil {
		return m.SubsetId
	}
	return 0
}

func (m *SubsetCardListDbRecord) GetCardIds() []int32 {
	if m != nil {
		return m.CardIds
	}
	return nil
}

// ref: PegasusShared.TavernBrawlPlayerRecord
type TavernBrawlPlayerRecord struct {
	RewardProgress         int32                     `protobuf:"varint,1,opt,name=reward_progress,json=rewardProgress" json:"reward_progress,omitempty"`
	GamesPlayed            int32                     `protobuf:"varint,2,opt,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	GamesWon               int32                     `protobuf:"varint,3,opt,name=games_won,json=gamesWon" json:"games_won,omitempty"`
	WinStreak              int32                     `protobuf:"varint,4,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	SessionStatus          TavernBrawlStatus         `protobuf:"varint,5,opt,name=session_status,json=sessionStatus,enum=pegasus.pegasusshared.TavernBrawlStatus" json:"session_status,omitempty"`
	NumTicketsOwned        int32                     `protobuf:"varint,6,opt,name=num_tickets_owned,json=numTicketsOwned" json:"num_tickets_owned,omitempty"`
	Session                *TavernBrawlPlayerSession `protobuf:"bytes,7,opt,name=session" json:"session,omitempty"`
	NumSessionsPurchasable int32                     `protobuf:"varint,8,opt,name=num_sessions_purchasable,json=numSessionsPurchasable" json:"num_sessions_purchasable,omitempty"`
	BrawlType              BrawlType                 `protobuf:"varint,9,opt,name=brawl_type,json=brawlType,enum=pegasus.pegasusshared.BrawlType" json:"brawl_type,omitempty"`
}

func (m *TavernBrawlPlayerRecord) Reset()                    { *m = TavernBrawlPlayerRecord{} }
func (m *TavernBrawlPlayerRecord) String() string            { return proto.CompactTextString(m) }
func (*TavernBrawlPlayerRecord) ProtoMessage()               {}
func (*TavernBrawlPlayerRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *TavernBrawlPlayerRecord) GetRewardProgress() int32 {
	if m != nil {
		return m.RewardProgress
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetGamesPlayed() int32 {
	if m != nil {
		return m.GamesPlayed
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetGamesWon() int32 {
	if m != nil {
		return m.GamesWon
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetWinStreak() int32 {
	if m != nil {
		return m.WinStreak
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetSessionStatus() TavernBrawlStatus {
	if m != nil {
		return m.SessionStatus
	}
	return TavernBrawlStatus_TB_STATUS_INVALID
}

func (m *TavernBrawlPlayerRecord) GetNumTicketsOwned() int32 {
	if m != nil {
		return m.NumTicketsOwned
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetSession() *TavernBrawlPlayerSession {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *TavernBrawlPlayerRecord) GetNumSessionsPurchasable() int32 {
	if m != nil {
		return m.NumSessionsPurchasable
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetBrawlType() BrawlType {
	if m != nil {
		return m.BrawlType
	}
	return BrawlType_BRAWL_TYPE_UNKNOWN
}

// ref: PegasusShared.TavernBrawlPlayerSession
type TavernBrawlPlayerSession struct {
	ErrorCode  ErrorCode    `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=pegasus.pegasusshared.ErrorCode" json:"error_code,omitempty"`
	SeasonId   int32        `protobuf:"varint,2,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	Wins       int32        `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	Losses     int32        `protobuf:"varint,4,opt,name=losses" json:"losses,omitempty"`
	Chest      *RewardChest `protobuf:"bytes,5,opt,name=chest" json:"chest,omitempty"`
	DeckLocked bool         `protobuf:"varint,6,opt,name=deck_locked,json=deckLocked" json:"deck_locked,omitempty"`
}

func (m *TavernBrawlPlayerSession) Reset()                    { *m = TavernBrawlPlayerSession{} }
func (m *TavernBrawlPlayerSession) String() string            { return proto.CompactTextString(m) }
func (*TavernBrawlPlayerSession) ProtoMessage()               {}
func (*TavernBrawlPlayerSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *TavernBrawlPlayerSession) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_ERROR_OK
}

func (m *TavernBrawlPlayerSession) GetSeasonId() int32 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetWins() int32 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetLosses() int32 {
	if m != nil {
		return m.Losses
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetChest() *RewardChest {
	if m != nil {
		return m.Chest
	}
	return nil
}

func (m *TavernBrawlPlayerSession) GetDeckLocked() bool {
	if m != nil {
		return m.DeckLocked
	}
	return false
}

// ref: PegasusShared.TavernBrawlSpec
type TavernBrawlSpec struct {
	EndSecondsFromNow                 uint64             `protobuf:"varint,1,opt,name=end_seconds_from_now,json=endSecondsFromNow" json:"end_seconds_from_now,omitempty"`
	ScenarioId                        int32              `protobuf:"varint,2,opt,name=scenario_id,json=scenarioId" json:"scenario_id,omitempty"`
	ScenarioRecordByteSize            uint32             `protobuf:"varint,3,opt,name=scenario_record_byte_size,json=scenarioRecordByteSize" json:"scenario_record_byte_size,omitempty"`
	ScenarioRecordHash                []byte             `protobuf:"bytes,4,opt,name=scenario_record_hash,json=scenarioRecordHash,proto3" json:"scenario_record_hash,omitempty"`
	RewardType                        RewardType         `protobuf:"varint,5,opt,name=reward_type,json=rewardType,enum=pegasus.pegasusshared.RewardType" json:"reward_type,omitempty"`
	RewardData1                       int64              `protobuf:"varint,6,opt,name=reward_data1,json=rewardData1" json:"reward_data1,omitempty"`
	RewardData2                       int64              `protobuf:"varint,7,opt,name=reward_data2,json=rewardData2" json:"reward_data2,omitempty"`
	RewardTrigger                     RewardTrigger      `protobuf:"varint,8,opt,name=reward_trigger,json=rewardTrigger,enum=pegasus.pegasusshared.RewardTrigger" json:"reward_trigger,omitempty"`
	FormatType                        FormatType         `protobuf:"varint,9,opt,name=format_type,json=formatType,enum=pegasus.pegasusshared.FormatType" json:"format_type,omitempty"`
	SeasonId                          int32              `protobuf:"varint,11,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	TicketType                        int32              `protobuf:"varint,12,opt,name=ticket_type,json=ticketType" json:"ticket_type,omitempty"`
	MaxWins                           int32              `protobuf:"varint,13,opt,name=max_wins,json=maxWins" json:"max_wins,omitempty"`
	MaxLosses                         int32              `protobuf:"varint,14,opt,name=max_losses,json=maxLosses" json:"max_losses,omitempty"`
	ClosedToNewSessionsSecondsFromNow uint64             `protobuf:"varint,15,opt,name=closed_to_new_sessions_seconds_from_now,json=closedToNewSessionsSecondsFromNow" json:"closed_to_new_sessions_seconds_from_now,omitempty"`
	MaxSessions                       int32              `protobuf:"varint,16,opt,name=max_sessions,json=maxSessions" json:"max_sessions,omitempty"`
	FriendlyChallengeDisabled         bool               `protobuf:"varint,17,opt,name=friendly_challenge_disabled,json=friendlyChallengeDisabled" json:"friendly_challenge_disabled,omitempty"`
	SeasonEndSecondSpreadCount        int32              `protobuf:"varint,18,opt,name=season_end_second_spread_count,json=seasonEndSecondSpreadCount" json:"season_end_second_spread_count,omitempty"`
	AdditionalAssets                  []*AssetRecordInfo `protobuf:"bytes,100,rep,name=additional_assets,json=additionalAssets" json:"additional_assets,omitempty"`
}

func (m *TavernBrawlSpec) Reset()                    { *m = TavernBrawlSpec{} }
func (m *TavernBrawlSpec) String() string            { return proto.CompactTextString(m) }
func (*TavernBrawlSpec) ProtoMessage()               {}
func (*TavernBrawlSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *TavernBrawlSpec) GetEndSecondsFromNow() uint64 {
	if m != nil {
		return m.EndSecondsFromNow
	}
	return 0
}

func (m *TavernBrawlSpec) GetScenarioId() int32 {
	if m != nil {
		return m.ScenarioId
	}
	return 0
}

func (m *TavernBrawlSpec) GetScenarioRecordByteSize() uint32 {
	if m != nil {
		return m.ScenarioRecordByteSize
	}
	return 0
}

func (m *TavernBrawlSpec) GetScenarioRecordHash() []byte {
	if m != nil {
		return m.ScenarioRecordHash
	}
	return nil
}

func (m *TavernBrawlSpec) GetRewardType() RewardType {
	if m != nil {
		return m.RewardType
	}
	return RewardType_REWARD_UNKNOWN
}

func (m *TavernBrawlSpec) GetRewardData1() int64 {
	if m != nil {
		return m.RewardData1
	}
	return 0
}

func (m *TavernBrawlSpec) GetRewardData2() int64 {
	if m != nil {
		return m.RewardData2
	}
	return 0
}

func (m *TavernBrawlSpec) GetRewardTrigger() RewardTrigger {
	if m != nil {
		return m.RewardTrigger
	}
	return RewardTrigger_REWARD_TRIGGER_UNKNOWN
}

func (m *TavernBrawlSpec) GetFormatType() FormatType {
	if m != nil {
		return m.FormatType
	}
	return FormatType_FT_UNKNOWN
}

func (m *TavernBrawlSpec) GetSeasonId() int32 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *TavernBrawlSpec) GetTicketType() int32 {
	if m != nil {
		return m.TicketType
	}
	return 0
}

func (m *TavernBrawlSpec) GetMaxWins() int32 {
	if m != nil {
		return m.MaxWins
	}
	return 0
}

func (m *TavernBrawlSpec) GetMaxLosses() int32 {
	if m != nil {
		return m.MaxLosses
	}
	return 0
}

func (m *TavernBrawlSpec) GetClosedToNewSessionsSecondsFromNow() uint64 {
	if m != nil {
		return m.ClosedToNewSessionsSecondsFromNow
	}
	return 0
}

func (m *TavernBrawlSpec) GetMaxSessions() int32 {
	if m != nil {
		return m.MaxSessions
	}
	return 0
}

func (m *TavernBrawlSpec) GetFriendlyChallengeDisabled() bool {
	if m != nil {
		return m.FriendlyChallengeDisabled
	}
	return false
}

func (m *TavernBrawlSpec) GetSeasonEndSecondSpreadCount() int32 {
	if m != nil {
		return m.SeasonEndSecondSpreadCount
	}
	return 0
}

func (m *TavernBrawlSpec) GetAdditionalAssets() []*AssetRecordInfo {
	if m != nil {
		return m.AdditionalAssets
	}
	return nil
}

// ref: PegasusShared.TavernSignData
type TavernSignData struct {
	Sign       int32          `protobuf:"varint,1,opt,name=sign" json:"sign,omitempty"`
	Background int32          `protobuf:"varint,2,opt,name=background" json:"background,omitempty"`
	Major      int32          `protobuf:"varint,3,opt,name=major" json:"major,omitempty"`
	Minor      int32          `protobuf:"varint,4,opt,name=minor" json:"minor,omitempty"`
	SignType   TavernSignType `protobuf:"varint,5,opt,name=sign_type,json=signType,enum=pegasus.pegasusshared.TavernSignType" json:"sign_type,omitempty"`
}

func (m *TavernSignData) Reset()                    { *m = TavernSignData{} }
func (m *TavernSignData) String() string            { return proto.CompactTextString(m) }
func (*TavernSignData) ProtoMessage()               {}
func (*TavernSignData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *TavernSignData) GetSign() int32 {
	if m != nil {
		return m.Sign
	}
	return 0
}

func (m *TavernSignData) GetBackground() int32 {
	if m != nil {
		return m.Background
	}
	return 0
}

func (m *TavernSignData) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *TavernSignData) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *TavernSignData) GetSignType() TavernSignType {
	if m != nil {
		return m.SignType
	}
	return TavernSignType_TAVERN_SIGN_TYPE_DEFAULT
}

// ref: PegasusShared.Vector2
type Vector2 struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (m *Vector2) Reset()                    { *m = Vector2{} }
func (m *Vector2) String() string            { return proto.CompactTextString(m) }
func (*Vector2) ProtoMessage()               {}
func (*Vector2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Vector2) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector2) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*AccountLicenseInfo)(nil), "pegasus.pegasusshared.AccountLicenseInfo")
	proto.RegisterType((*AdventureProgress)(nil), "pegasus.pegasusshared.AdventureProgress")
	proto.RegisterType((*AssetKey)(nil), "pegasus.pegasusshared.AssetKey")
	proto.RegisterType((*AssetRecordInfo)(nil), "pegasus.pegasusshared.AssetRecordInfo")
	proto.RegisterType((*BnetId)(nil), "pegasus.pegasusshared.BnetId")
	proto.RegisterType((*BoosterInfo)(nil), "pegasus.pegasusshared.BoosterInfo")
	proto.RegisterType((*CachedCard)(nil), "pegasus.pegasusshared.CachedCard")
	proto.RegisterType((*CachedCollection)(nil), "pegasus.pegasusshared.CachedCollection")
	proto.RegisterType((*CardDef)(nil), "pegasus.pegasusshared.CardDef")
	proto.RegisterType((*CardStack)(nil), "pegasus.pegasusshared.CardStack")
	proto.RegisterType((*DatabaseDeckCard)(nil), "pegasus.pegasusshared.DatabaseDeckCard")
	proto.RegisterType((*DatabaseDeckContent)(nil), "pegasus.pegasusshared.DatabaseDeckContent")
	proto.RegisterType((*Date)(nil), "pegasus.pegasusshared.Date")
	proto.RegisterType((*DeckCardData)(nil), "pegasus.pegasusshared.DeckCardData")
	proto.RegisterType((*DeckInfo)(nil), "pegasus.pegasusshared.DeckInfo")
	proto.RegisterType((*DeckRulesetDbRecord)(nil), "pegasus.pegasusshared.DeckRulesetDbRecord")
	proto.RegisterType((*DeckRulesetRuleDbRecord)(nil), "pegasus.pegasusshared.DeckRulesetRuleDbRecord")
	proto.RegisterType((*DeckRulesetValidationResults)(nil), "pegasus.pegasusshared.DeckRulesetValidationResults")
	proto.RegisterType((*DeckRulesetViolation)(nil), "pegasus.pegasusshared.DeckRulesetViolation")
	proto.RegisterType((*FavoriteHero)(nil), "pegasus.pegasusshared.FavoriteHero")
	proto.RegisterType((*FSGConfig)(nil), "pegasus.pegasusshared.FSGConfig")
	proto.RegisterType((*FSGPatron)(nil), "pegasus.pegasusshared.FSGPatron")
	proto.RegisterType((*GPSCoords)(nil), "pegasus.pegasusshared.GPSCoords")
	proto.RegisterType((*LocalizedString)(nil), "pegasus.pegasusshared.LocalizedString")
	proto.RegisterType((*LocalizedStringValue)(nil), "pegasus.pegasusshared.LocalizedStringValue")
	proto.RegisterType((*Platform)(nil), "pegasus.pegasusshared.Platform")
	proto.RegisterType((*PlayerIdentity)(nil), "pegasus.pegasusshared.PlayerIdentity")
	proto.RegisterType((*PlayQueueInfo)(nil), "pegasus.pegasusshared.PlayQueueInfo")
	proto.RegisterType((*ProfileNoticeAccountLicense)(nil), "pegasus.pegasusshared.ProfileNoticeAccountLicense")
	proto.RegisterType((*ProfileNoticeAdventureProgress)(nil), "pegasus.pegasusshared.ProfileNoticeAdventureProgress")
	proto.RegisterType((*ProfileNoticeBonusStars)(nil), "pegasus.pegasusshared.ProfileNoticeBonusStars")
	proto.RegisterType((*ProfileNoticeCardBack)(nil), "pegasus.pegasusshared.ProfileNoticeCardBack")
	proto.RegisterType((*ProfileNoticeDisconnectedGameResult)(nil), "pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult")
	proto.RegisterType((*ProfileNoticeLevelUp)(nil), "pegasus.pegasusshared.ProfileNoticeLevelUp")
	proto.RegisterType((*ProfileNoticeMedal)(nil), "pegasus.pegasusshared.ProfileNoticeMedal")
	proto.RegisterType((*ProfileNoticePreconDeck)(nil), "pegasus.pegasusshared.ProfileNoticePreconDeck")
	proto.RegisterType((*ProfileNoticePurchase)(nil), "pegasus.pegasusshared.ProfileNoticePurchase")
	proto.RegisterType((*ProfileNoticeRewardBooster)(nil), "pegasus.pegasusshared.ProfileNoticeRewardBooster")
	proto.RegisterType((*ProfileNoticeRewardCard)(nil), "pegasus.pegasusshared.ProfileNoticeRewardCard")
	proto.RegisterType((*ProfileNoticeRewardCard2X)(nil), "pegasus.pegasusshared.ProfileNoticeRewardCard2x")
	proto.RegisterType((*ProfileNoticeRewardDust)(nil), "pegasus.pegasusshared.ProfileNoticeRewardDust")
	proto.RegisterType((*ProfileNoticeRewardForge)(nil), "pegasus.pegasusshared.ProfileNoticeRewardForge")
	proto.RegisterType((*ProfileNoticeRewardGold)(nil), "pegasus.pegasusshared.ProfileNoticeRewardGold")
	proto.RegisterType((*ProfileNoticeRewardMount)(nil), "pegasus.pegasusshared.ProfileNoticeRewardMount")
	proto.RegisterType((*ProfileNoticeTavernBrawlRewards)(nil), "pegasus.pegasusshared.ProfileNoticeTavernBrawlRewards")
	proto.RegisterType((*ProfileNoticeTavernBrawlTicket)(nil), "pegasus.pegasusshared.ProfileNoticeTavernBrawlTicket")
	proto.RegisterType((*RewardBag)(nil), "pegasus.pegasusshared.RewardBag")
	proto.RegisterType((*RewardChest)(nil), "pegasus.pegasusshared.RewardChest")
	proto.RegisterType((*ScenarioDbRecord)(nil), "pegasus.pegasusshared.ScenarioDbRecord")
	proto.RegisterType((*SubsetCardListDbRecord)(nil), "pegasus.pegasusshared.SubsetCardListDbRecord")
	proto.RegisterType((*TavernBrawlPlayerRecord)(nil), "pegasus.pegasusshared.TavernBrawlPlayerRecord")
	proto.RegisterType((*TavernBrawlPlayerSession)(nil), "pegasus.pegasusshared.TavernBrawlPlayerSession")
	proto.RegisterType((*TavernBrawlSpec)(nil), "pegasus.pegasusshared.TavernBrawlSpec")
	proto.RegisterType((*TavernSignData)(nil), "pegasus.pegasusshared.TavernSignData")
	proto.RegisterType((*Vector2)(nil), "pegasus.pegasusshared.Vector2")
	proto.RegisterEnum("pegasus.pegasusshared.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("pegasus.pegasusshared.BattlePayProvider", BattlePayProvider_name, BattlePayProvider_value)
	proto.RegisterEnum("pegasus.pegasusshared.BnetGameType", BnetGameType_name, BnetGameType_value)
	proto.RegisterEnum("pegasus.pegasusshared.BrawlType", BrawlType_name, BrawlType_value)
	proto.RegisterEnum("pegasus.pegasusshared.DatabaseAction", DatabaseAction_name, DatabaseAction_value)
	proto.RegisterEnum("pegasus.pegasusshared.DatabaseResult", DatabaseResult_name, DatabaseResult_value)
	proto.RegisterEnum("pegasus.pegasusshared.DeckSourceType", DeckSourceType_name, DeckSourceType_value)
	proto.RegisterEnum("pegasus.pegasusshared.DeckType", DeckType_name, DeckType_value)
	proto.RegisterEnum("pegasus.pegasusshared.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("pegasus.pegasusshared.FormatType", FormatType_name, FormatType_value)
	proto.RegisterEnum("pegasus.pegasusshared.GameType", GameType_name, GameType_value)
	proto.RegisterEnum("pegasus.pegasusshared.RecruitAFriendState", RecruitAFriendState_name, RecruitAFriendState_value)
	proto.RegisterEnum("pegasus.pegasusshared.ReturningPlayerStatus", ReturningPlayerStatus_name, ReturningPlayerStatus_value)
	proto.RegisterEnum("pegasus.pegasusshared.RewardTrigger", RewardTrigger_name, RewardTrigger_value)
	proto.RegisterEnum("pegasus.pegasusshared.RewardType", RewardType_name, RewardType_value)
	proto.RegisterEnum("pegasus.pegasusshared.RuleType", RuleType_name, RuleType_value)
	proto.RegisterEnum("pegasus.pegasusshared.TavernBrawlStatus", TavernBrawlStatus_name, TavernBrawlStatus_value)
	proto.RegisterEnum("pegasus.pegasusshared.TavernSignType", TavernSignType_name, TavernSignType_value)
	proto.RegisterEnum("pegasus.pegasusshared.AccountLicenseInfo_Flags", AccountLicenseInfo_Flags_name, AccountLicenseInfo_Flags_value)
	proto.RegisterEnum("pegasus.pegasusshared.AdventureProgress_Flags", AdventureProgress_Flags_name, AdventureProgress_Flags_value)
	proto.RegisterEnum("pegasus.pegasusshared.DeckInfo_ValidityFlags", DeckInfo_ValidityFlags_name, DeckInfo_ValidityFlags_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeAccountLicense_NoticeID", ProfileNoticeAccountLicense_NoticeID_name, ProfileNoticeAccountLicense_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeAdventureProgress_NoticeID", ProfileNoticeAdventureProgress_NoticeID_name, ProfileNoticeAdventureProgress_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeBonusStars_NoticeID", ProfileNoticeBonusStars_NoticeID_name, ProfileNoticeBonusStars_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeCardBack_NoticeID", ProfileNoticeCardBack_NoticeID_name, ProfileNoticeCardBack_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_GameResult", ProfileNoticeDisconnectedGameResult_GameResult_name, ProfileNoticeDisconnectedGameResult_GameResult_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_NoticeID", ProfileNoticeDisconnectedGameResult_NoticeID_name, ProfileNoticeDisconnectedGameResult_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult", ProfileNoticeDisconnectedGameResult_PlayerResult_name, ProfileNoticeDisconnectedGameResult_PlayerResult_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeLevelUp_NoticeID", ProfileNoticeLevelUp_NoticeID_name, ProfileNoticeLevelUp_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeMedal_MedalType", ProfileNoticeMedal_MedalType_name, ProfileNoticeMedal_MedalType_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeMedal_NoticeID", ProfileNoticeMedal_NoticeID_name, ProfileNoticeMedal_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticePreconDeck_NoticeID", ProfileNoticePreconDeck_NoticeID_name, ProfileNoticePreconDeck_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticePurchase_NoticeID", ProfileNoticePurchase_NoticeID_name, ProfileNoticePurchase_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardBooster_NoticeID", ProfileNoticeRewardBooster_NoticeID_name, ProfileNoticeRewardBooster_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardCard_NoticeID", ProfileNoticeRewardCard_NoticeID_name, ProfileNoticeRewardCard_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardCard2X_NoticeID", ProfileNoticeRewardCard2X_NoticeID_name, ProfileNoticeRewardCard2X_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardDust_NoticeID", ProfileNoticeRewardDust_NoticeID_name, ProfileNoticeRewardDust_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardForge_NoticeID", ProfileNoticeRewardForge_NoticeID_name, ProfileNoticeRewardForge_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardGold_NoticeID", ProfileNoticeRewardGold_NoticeID_name, ProfileNoticeRewardGold_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardMount_NoticeID", ProfileNoticeRewardMount_NoticeID_name, ProfileNoticeRewardMount_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeTavernBrawlRewards_NoticeID", ProfileNoticeTavernBrawlRewards_NoticeID_name, ProfileNoticeTavernBrawlRewards_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeTavernBrawlTicket_NoticeID", ProfileNoticeTavernBrawlTicket_NoticeID_name, ProfileNoticeTavernBrawlTicket_NoticeID_value)
}

func init() { proto.RegisterFile("pegasus/pegasusshared/pegasusshared.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 6450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x7c, 0x5d, 0x73, 0xdc, 0xc8,
	0x75, 0xe8, 0xce, 0x0c, 0x87, 0x9c, 0x39, 0xc3, 0x0f, 0xb0, 0x45, 0x49, 0x94, 0xb4, 0xfa, 0xc2,
	0x7e, 0x69, 0xb9, 0x6b, 0xed, 0x8a, 0x5a, 0x7f, 0x5e, 0xf3, 0xda, 0x98, 0x01, 0x38, 0x84, 0x35,
	0x04, 0x66, 0x1b, 0x20, 0xb9, 0xf2, 0xad, 0x5b, 0xb8, 0xd0, 0x00, 0x24, 0x71, 0x35, 0x04, 0x68,
	0x00, 0x23, 0x89, 0xae, 0xeb, 0xaa, 0x75, 0x95, 0xea, 0x5e, 0x3f, 0xa8, 0xea, 0x26, 0x59, 0xf9,
	0xa3, 0x6a, 0x2b, 0x4f, 0xce, 0x83, 0xe3, 0x7c, 0xb9, 0x12, 0xdb, 0x79, 0x8d, 0x1d, 0xe7, 0xdb,
	0x95, 0x97, 0xbc, 0xe4, 0x25, 0x55, 0x49, 0x2a, 0x0f, 0x76, 0x7e, 0x81, 0x2b, 0xb1, 0xcb, 0xa9,
	0xd3, 0xdd, 0xc0, 0x60, 0x86, 0xa4, 0x96, 0xb4, 0x77, 0x1f, 0x96, 0xe8, 0x73, 0x4e, 0x9f, 0x73,
	0xfa, 0xf4, 0xe9, 0xd3, 0xe7, 0x74, 0xf7, 0x08, 0x5e, 0xdd, 0xf7, 0x77, 0xdc, 0x64, 0x90, 0xbc,
	0x21, 0xfe, 0x26, 0xbb, 0x6e, 0xec, 0x7b, 0xa3, 0xad, 0x9b, 0xfb, 0x71, 0x94, 0x46, 0xe4, 0xac,
	0x00, 0xde, 0x1c, 0x41, 0xca, 0xff, 0xaf, 0x04, 0x44, 0xe9, 0xf5, 0xa2, 0x41, 0x98, 0x76, 0x82,
	0x9e, 0x1f, 0x26, 0xbe, 0x1e, 0x6e, 0x47, 0x64, 0x11, 0xa6, 0xfa, 0xbc, 0xb9, 0x58, 0xba, 0x56,
	0xba, 0x51, 0xa1, 0x59, 0x93, 0x2c, 0x40, 0x75, 0xbb, 0xef, 0xee, 0x24, 0x8b, 0xe5, 0x6b, 0xa5,
	0x1b, 0x13, 0x94, 0x37, 0xc8, 0x59, 0x98, 0xec, 0xb9, 0x89, 0x13, 0x78, 0x8b, 0x15, 0x46, 0x5e,
	0xed, 0xb9, 0x89, 0xee, 0xc9, 0x4b, 0x50, 0x5d, 0x65, 0xf8, 0x73, 0x40, 0x56, 0x3b, 0x4a, 0xdb,
	0x72, 0x94, 0x0d, 0xdb, 0x74, 0x74, 0x63, 0x53, 0xe9, 0xe8, 0xaa, 0xf4, 0x1c, 0xa9, 0x43, 0xd5,
	0xdc, 0x32, 0x34, 0x55, 0x2a, 0xc9, 0xff, 0xb7, 0x02, 0xf3, 0x8a, 0xf7, 0xc0, 0x0f, 0xd3, 0x41,
	0xec, 0x77, 0xe3, 0x68, 0x27, 0xf6, 0x93, 0x84, 0x9c, 0x87, 0xa9, 0x87, 0x41, 0xb8, 0x83, 0x9c,
	0x51, 0x91, 0x2a, 0x9d, 0xc4, 0xa6, 0xee, 0x91, 0x8b, 0x50, 0xdb, 0x17, 0x44, 0x4c, 0x95, 0x2a,
	0xcd, 0xdb, 0x44, 0x82, 0x8a, 0xdb, 0xbb, 0xcf, 0x54, 0xa9, 0x52, 0xfc, 0x1c, 0x6a, 0x3d, 0x51,
	0xd0, 0x5a, 0x7e, 0xaf, 0x7c, 0x72, 0xfd, 0xc8, 0x25, 0x38, 0xaf, 0x6a, 0xab, 0x9a, 0x62, 0x3b,
	0x6b, 0x1a, 0x35, 0xf5, 0x96, 0xb3, 0xae, 0x5b, 0x96, 0x6e, 0x1a, 0xce, 0x2d, 0xa9, 0x7c, 0x3c,
	0x72, 0x59, 0x9a, 0x38, 0x1e, 0x79, 0x5b, 0xaa, 0x1d, 0x8f, 0x7c, 0x4b, 0x92, 0xc8, 0x4b, 0x70,
	0x4d, 0x20, 0x5b, 0x1d, 0xc5, 0xb2, 0x9c, 0xd6, 0x9a, 0xd2, 0xe9, 0x68, 0x46, 0x5b, 0x2b, 0x08,
	0x7f, 0xb7, 0x7c, 0x02, 0xb2, 0x65, 0xe9, 0xdd, 0x89, 0x13, 0x90, 0xdd, 0x96, 0xde, 0xad, 0xc9,
	0xff, 0x03, 0x6a, 0x4a, 0x92, 0xf8, 0xe9, 0x1d, 0xff, 0x80, 0xbc, 0x05, 0x13, 0xe9, 0xc1, 0x3e,
	0x77, 0x82, 0xd9, 0xe5, 0x6b, 0x37, 0x8f, 0x74, 0xa2, 0x9b, 0x8c, 0xdc, 0x3e, 0xd8, 0xf7, 0x29,
	0xa3, 0x26, 0x17, 0xa0, 0xe6, 0x22, 0x08, 0x67, 0x8d, 0xcf, 0xcd, 0x14, 0x6b, 0xeb, 0x9e, 0xfc,
	0x5e, 0x09, 0xe6, 0x18, 0x39, 0xf5, 0x7b, 0x51, 0xec, 0x31, 0x67, 0xfb, 0x28, 0x54, 0x19, 0x9a,
	0x49, 0x69, 0x2c, 0x5f, 0x7d, 0x96, 0x94, 0x3b, 0xfe, 0x01, 0xe5, 0xd4, 0xe4, 0x06, 0x48, 0x31,
	0x63, 0xe2, 0xdc, 0x3b, 0x48, 0x7d, 0x27, 0x09, 0xbe, 0xe8, 0x33, 0x69, 0x33, 0x74, 0x96, 0xc3,
	0x9b, 0x07, 0xa9, 0x6f, 0x05, 0x5f, 0xf4, 0xc9, 0x55, 0x68, 0x08, 0xca, 0x5d, 0x37, 0xd9, 0x65,
	0x7e, 0x31, 0x4d, 0x81, 0x83, 0xd6, 0xdc, 0x64, 0x57, 0xbe, 0x01, 0x93, 0xcd, 0x10, 0xf5, 0x23,
	0xb3, 0x50, 0xde, 0x0d, 0x98, 0x22, 0x13, 0xb4, 0xbc, 0x1b, 0x60, 0xbb, 0x1f, 0x09, 0x5f, 0x2f,
	0xf7, 0x23, 0xf9, 0xe3, 0xd0, 0x68, 0x46, 0x51, 0x92, 0xfa, 0x31, 0x53, 0x9d, 0x08, 0xfb, 0xf0,
	0x51, 0xf2, 0xd1, 0x2f, 0x40, 0x95, 0xad, 0x27, 0xe1, 0x7f, 0xbc, 0x21, 0xff, 0xb4, 0x04, 0xd0,
	0x72, 0x7b, 0xbb, 0xbe, 0xd7, 0x72, 0x63, 0x0f, 0xfd, 0xba, 0xe7, 0xc6, 0x5e, 0xe6, 0xd7, 0x15,
	0x3a, 0x89, 0x4d, 0xdd, 0x23, 0x32, 0xcc, 0x70, 0xdb, 0x65, 0x68, 0xce, 0xba, 0xc1, 0x80, 0x2d,
	0x4e, 0xf3, 0x12, 0xcc, 0x0e, 0xc2, 0xe0, 0x91, 0x93, 0x06, 0x7b, 0x7e, 0x92, 0xba, 0x7b, 0xfb,
	0x42, 0xd4, 0x0c, 0x42, 0xed, 0x0c, 0x88, 0x32, 0x82, 0xc4, 0x49, 0x7c, 0x3f, 0x64, 0x6e, 0x5f,
	0xa3, 0x93, 0x41, 0x62, 0xf9, 0x7e, 0x88, 0xab, 0x7b, 0x3f, 0xf6, 0xf7, 0x82, 0xc1, 0xde, 0x62,
	0x95, 0x4f, 0x8f, 0x68, 0x92, 0x17, 0x60, 0x26, 0x08, 0x13, 0x3f, 0x4e, 0x9d, 0x24, 0x1a, 0xc4,
	0x3d, 0x7f, 0x71, 0x92, 0xe1, 0xa7, 0x39, 0xd0, 0x62, 0x30, 0x34, 0xa7, 0x20, 0xf2, 0xdc, 0xd4,
	0x5d, 0x9c, 0x62, 0xfa, 0x03, 0x07, 0xa9, 0x6e, 0xea, 0xca, 0xf7, 0x40, 0x12, 0x43, 0x8d, 0xfa,
	0x7d, 0xbf, 0x97, 0x06, 0x51, 0x48, 0x0c, 0x98, 0x63, 0x23, 0xea, 0xe5, 0xa0, 0xc5, 0xd2, 0xb5,
	0xca, 0x8d, 0xc6, 0xf2, 0xf5, 0x63, 0xa6, 0x7b, 0x68, 0xac, 0x66, 0x59, 0x7a, 0x8e, 0xce, 0x62,
	0xef, 0x21, 0x3f, 0xf9, 0x93, 0x30, 0x85, 0x38, 0xd5, 0xdf, 0x46, 0x83, 0x0f, 0xfd, 0xa7, 0x9a,
	0xb9, 0x47, 0x61, 0x90, 0xe5, 0x91, 0x41, 0xca, 0x3f, 0x2c, 0x41, 0x1d, 0xfb, 0x5a, 0x29, 0x86,
	0x86, 0x4f, 0x42, 0x8d, 0x29, 0xe6, 0xf9, 0xdb, 0xc2, 0x01, 0xaf, 0x1c, 0xab, 0x11, 0x93, 0x47,
	0xd9, 0xcc, 0xa1, 0x60, 0x1d, 0x48, 0xdf, 0x4d, 0xfd, 0x24, 0x75, 0x86, 0xf6, 0xe0, 0xbe, 0xd0,
	0x58, 0xbe, 0x74, 0x0c, 0x13, 0xd5, 0x4d, 0x7d, 0x2a, 0xf1, 0x6e, 0x7a, 0x66, 0xb2, 0x63, 0x9c,
	0x06, 0x17, 0x52, 0x38, 0xd8, 0x1b, 0x4e, 0x61, 0x95, 0x4e, 0x85, 0x83, 0x3d, 0x9c, 0x43, 0xb9,
	0x0f, 0x12, 0xda, 0xfa, 0x9e, 0x9b, 0xf8, 0xaa, 0xdf, 0xbb, 0xcf, 0x9c, 0xea, 0x90, 0xef, 0x94,
	0x0e, 0xfb, 0xce, 0xb1, 0x66, 0xc1, 0x88, 0xfa, 0x85, 0x81, 0x1b, 0xa6, 0x41, 0x7a, 0x20, 0xb4,
	0xc8, 0xdb, 0xb2, 0x0b, 0x67, 0x46, 0xa4, 0x45, 0x61, 0xea, 0x87, 0x29, 0xf9, 0x1c, 0x80, 0xe7,
	0xf7, 0xee, 0x33, 0x79, 0x89, 0x98, 0xcf, 0x57, 0x8e, 0x1f, 0xf8, 0x88, 0xb6, 0x6c, 0x56, 0xeb,
	0x9e, 0x68, 0x25, 0xf2, 0xff, 0x81, 0x09, 0x66, 0x09, 0x02, 0x13, 0x07, 0xbe, 0x1b, 0x0b, 0xdd,
	0xd9, 0x37, 0x5a, 0x67, 0x2f, 0x0a, 0xd3, 0x5d, 0xa1, 0x32, 0x6f, 0x60, 0x98, 0xf7, 0xdc, 0x4c,
	0x57, 0xfc, 0x44, 0xba, 0xdd, 0x68, 0x10, 0x27, 0xc2, 0x58, 0xbc, 0x81, 0x74, 0x7b, 0x41, 0x28,
	0x5c, 0x1d, 0x3f, 0x11, 0x92, 0xf8, 0x3d, 0xe1, 0xdc, 0xf8, 0x29, 0x53, 0x98, 0xce, 0x14, 0x43,
	0x45, 0xc9, 0x9b, 0x50, 0x39, 0xb9, 0x43, 0x20, 0x29, 0xf2, 0xfc, 0x42, 0x6e, 0x39, 0xfc, 0x94,
	0x7f, 0x51, 0x85, 0x1a, 0x32, 0x65, 0x91, 0x62, 0x16, 0xca, 0xf9, 0x5a, 0x2f, 0x07, 0x1e, 0x0e,
	0x33, 0x74, 0xf7, 0xb8, 0xb7, 0xd4, 0x29, 0xfb, 0x26, 0x97, 0xa0, 0xce, 0x66, 0xee, 0xde, 0x70,
	0xf7, 0x62, 0xbe, 0xd9, 0x44, 0x3f, 0x25, 0x30, 0xb1, 0xeb, 0xc7, 0x91, 0x18, 0x1a, 0xfb, 0x26,
	0x9f, 0x06, 0x66, 0x40, 0x87, 0xc5, 0xa0, 0x2a, 0x8b, 0xd1, 0xc7, 0x45, 0x4f, 0x54, 0x84, 0x85,
	0xe8, 0x9a, 0x27, 0xbe, 0x70, 0xc2, 0x1f, 0xb8, 0xfd, 0xc0, 0xc3, 0x09, 0x9f, 0x64, 0x11, 0x2e,
	0x6f, 0x93, 0xeb, 0x30, 0x8d, 0x12, 0x9c, 0xcc, 0x57, 0xa6, 0xb8, 0x27, 0x21, 0xac, 0x2b, 0xfc,
	0xe5, 0x75, 0x20, 0xb9, 0xb6, 0x4e, 0xf4, 0xc0, 0x8f, 0xe3, 0xc0, 0xf3, 0x17, 0x6b, 0x2c, 0xd2,
	0x48, 0x99, 0xda, 0xa6, 0x80, 0x63, 0x64, 0x61, 0x0c, 0x73, 0xc2, 0x3a, 0x23, 0x64, 0x52, 0x8a,
	0x44, 0x7d, 0x37, 0x49, 0x9d, 0xbd, 0xc8, 0x0b, 0xb6, 0x03, 0xdf, 0x5b, 0x04, 0x66, 0xaf, 0x69,
	0x04, 0xae, 0x0b, 0x18, 0x5a, 0x29, 0xf1, 0xdd, 0x24, 0x0a, 0xd1, 0xc3, 0x1b, 0xdc, 0x4a, 0x1c,
	0xa0, 0x7b, 0xe4, 0x32, 0x40, 0x12, 0xc5, 0xa9, 0x13, 0xc5, 0x9e, 0x1f, 0x2f, 0x4e, 0xb3, 0xee,
	0x75, 0x84, 0x98, 0x08, 0xc0, 0xd0, 0xd5, 0x8b, 0x7d, 0x37, 0xf5, 0xf9, 0x52, 0x9d, 0xe1, 0xa1,
	0x8b, 0x83, 0x98, 0xf7, 0xad, 0x42, 0x83, 0x47, 0x3e, 0x6e, 0xd3, 0x59, 0x66, 0xd3, 0x97, 0x9e,
	0x61, 0x53, 0x1e, 0x13, 0x99, 0x65, 0x21, 0xc9, 0xbf, 0xe5, 0x2f, 0x97, 0x61, 0x66, 0x53, 0x18,
	0x93, 0xa7, 0x18, 0x57, 0xe0, 0x22, 0xcb, 0x2a, 0x74, 0xfb, 0xee, 0x91, 0xa9, 0xc6, 0x79, 0x38,
	0xb3, 0x61, 0x74, 0xcc, 0xd6, 0x1d, 0x4d, 0x65, 0xa9, 0x00, 0xdf, 0xa4, 0xa5, 0x12, 0x99, 0x05,
	0x30, 0xb7, 0x0c, 0xcb, 0x69, 0x29, 0x54, 0xb5, 0xa4, 0x32, 0x91, 0x60, 0x7a, 0x4d, 0xb1, 0x9c,
	0xdb, 0x6f, 0x0a, 0xc8, 0x04, 0x99, 0x83, 0x86, 0xd9, 0xd4, 0xee, 0x5a, 0xce, 0xba, 0xf2, 0x8e,
	0x66, 0x49, 0x35, 0x32, 0x0f, 0x33, 0x7c, 0x8b, 0x5f, 0x57, 0xec, 0xd6, 0x9a, 0x66, 0x49, 0x12,
	0x21, 0x30, 0x9b, 0x73, 0x71, 0x9a, 0x4a, 0xeb, 0x8e, 0x74, 0x8d, 0xcc, 0x40, 0x9d, 0xc1, 0x50,
	0x9c, 0xf4, 0x59, 0xb2, 0x00, 0x73, 0xb6, 0xd2, 0x6e, 0x6b, 0xaa, 0x63, 0xd9, 0x8a, 0xa1, 0x2a,
	0x54, 0x95, 0xde, 0x2d, 0x91, 0xb3, 0x20, 0x19, 0x9a, 0xa6, 0x5a, 0x0e, 0x53, 0x54, 0xb1, 0x75,
	0xd3, 0xc0, 0x9c, 0x63, 0x0e, 0x80, 0x83, 0x0d, 0x65, 0x5d, 0xc3, 0xec, 0x42, 0x82, 0x86, 0xd0,
	0x5e, 0xd5, 0x5a, 0x77, 0x30, 0x91, 0x88, 0xe0, 0x0c, 0x5a, 0x88, 0x0e, 0xfa, 0x7e, 0xe2, 0xa7,
	0xea, 0x3d, 0xbe, 0xe5, 0x17, 0x56, 0x42, 0x95, 0xad, 0x84, 0x35, 0xa8, 0xc6, 0x48, 0xb2, 0x58,
	0x66, 0xf1, 0xe3, 0xe6, 0x33, 0x8c, 0x2d, 0x58, 0xe1, 0x9f, 0x8c, 0x1d, 0x0b, 0x23, 0x9c, 0x81,
	0xfc, 0xf5, 0x09, 0x38, 0x7f, 0x0c, 0xd9, 0x21, 0xa9, 0x2f, 0xc3, 0x1c, 0x5b, 0x3a, 0x31, 0xa7,
	0x1d, 0xee, 0xb4, 0x33, 0xde, 0x90, 0x83, 0xee, 0x91, 0x37, 0x60, 0xc1, 0xdd, 0xdf, 0xef, 0x07,
	0x7e, 0xe2, 0xa4, 0x91, 0x93, 0x0c, 0xee, 0x09, 0x62, 0xbe, 0x3c, 0xe7, 0x05, 0xce, 0x8e, 0x2c,
	0x86, 0xd1, 0x3d, 0xf2, 0x2a, 0xcc, 0x17, 0x3a, 0x04, 0x89, 0x13, 0x46, 0xa9, 0xd8, 0x7f, 0x67,
	0x73, 0x6a, 0x3d, 0x31, 0xa2, 0x14, 0x3d, 0x19, 0xc5, 0x0f, 0x97, 0x6f, 0x9d, 0xd6, 0x10, 0xc0,
	0x56, 0xe7, 0x15, 0x68, 0x30, 0xa4, 0xe0, 0x30, 0xc9, 0x38, 0x30, 0xfa, 0xbc, 0xf3, 0x5e, 0x10,
	0x3a, 0x0f, 0xdc, 0xfe, 0xc0, 0x17, 0xcb, 0xb3, 0xb6, 0x17, 0x84, 0x9b, 0xd8, 0x66, 0x48, 0xf7,
	0x91, 0x40, 0xd6, 0x04, 0xd2, 0x7d, 0xc4, 0x91, 0x12, 0x54, 0x52, 0x77, 0x87, 0x2d, 0xc0, 0x2a,
	0xc5, 0x4f, 0xdc, 0x38, 0x52, 0x77, 0xc7, 0x19, 0xf2, 0x03, 0xbe, 0xdc, 0x53, 0x77, 0x67, 0x3d,
	0x63, 0x99, 0xd1, 0xe4, 0x6c, 0x1b, 0x43, 0x9a, 0x8c, 0xf3, 0x75, 0x98, 0x4e, 0xd2, 0x18, 0xf3,
	0x75, 0x4e, 0x32, 0xcd, 0xc6, 0xd4, 0xe0, 0x30, 0x4e, 0x72, 0x13, 0xe6, 0x53, 0x37, 0xde, 0xf1,
	0xd3, 0xa1, 0x2d, 0x93, 0xc5, 0x99, 0x6b, 0x95, 0x1b, 0x55, 0x36, 0x93, 0x73, 0x1c, 0x99, 0x59,
	0x33, 0x21, 0x2a, 0x4c, 0xf1, 0xee, 0xc9, 0xa2, 0xc7, 0xfc, 0xe3, 0xe5, 0x63, 0xfc, 0xa3, 0x13,
	0xf5, 0xdc, 0x7e, 0xf0, 0x45, 0xdf, 0xb3, 0x18, 0x39, 0xe3, 0x96, 0x75, 0x95, 0xff, 0xb1, 0x04,
	0xcf, 0x17, 0x3c, 0x83, 0xad, 0x4c, 0x17, 0xf3, 0x08, 0xea, 0x27, 0x83, 0x7e, 0x9a, 0x1c, 0xe5,
	0x0e, 0xa5, 0xa3, 0xdc, 0xe1, 0x33, 0x00, 0x7e, 0x1c, 0x47, 0xb1, 0xd3, 0x8b, 0x3c, 0x1e, 0xbc,
	0x8f, 0x4f, 0x8b, 0x35, 0x24, 0x6c, 0x45, 0x9e, 0x4f, 0xeb, 0x7e, 0xf6, 0x49, 0x4c, 0x80, 0x07,
	0x41, 0xd4, 0x67, 0xc2, 0x93, 0xc5, 0x0a, 0x1b, 0xd2, 0x6b, 0x1f, 0xec, 0xf2, 0x9b, 0x59, 0x1f,
	0x36, 0xae, 0x02, 0x0b, 0xf9, 0x5b, 0x25, 0x58, 0x38, 0x8a, 0x90, 0x2c, 0xc3, 0x04, 0x46, 0xe1,
	0x13, 0xee, 0x61, 0x8c, 0x76, 0x98, 0x86, 0x94, 0x8b, 0x69, 0xc8, 0x35, 0x98, 0xce, 0x8d, 0x83,
	0x96, 0xf1, 0x18, 0x12, 0x32, 0xcb, 0xe8, 0x1e, 0x79, 0x11, 0x66, 0x87, 0x14, 0x9e, 0x9f, 0xf4,
	0x16, 0x7d, 0x36, 0xf5, 0xd3, 0x19, 0x8d, 0xea, 0x27, 0x3d, 0xf9, 0x7f, 0xc2, 0xf4, 0xaa, 0xfb,
	0x20, 0x8a, 0x83, 0xd4, 0x5f, 0xc3, 0xed, 0xeb, 0x02, 0xd4, 0x7a, 0x7d, 0x37, 0x49, 0x86, 0xd6,
	0x9e, 0x62, 0x6d, 0xdd, 0x43, 0xe5, 0xd9, 0x6e, 0x57, 0x3e, 0x99, 0xf2, 0x48, 0x2b, 0xff, 0x7d,
	0x05, 0xea, 0xab, 0x56, 0xbb, 0x15, 0x85, 0xdb, 0xc1, 0x0e, 0x96, 0xa4, 0xdb, 0xc9, 0xce, 0x30,
	0xc1, 0xae, 0x6e, 0x27, 0x58, 0x37, 0x7e, 0x0a, 0x2e, 0xb2, 0xdc, 0x39, 0x49, 0xdd, 0x38, 0x65,
	0x19, 0xb4, 0xf3, 0x30, 0x48, 0x77, 0x9d, 0xa4, 0x3f, 0x48, 0x78, 0x7e, 0x51, 0xa1, 0xe7, 0x90,
	0xc2, 0x42, 0x02, 0x4c, 0xa6, 0xb7, 0x82, 0x74, 0xd7, 0x42, 0x2c, 0xf9, 0x18, 0x2c, 0xb2, 0xbe,
	0x7e, 0xe8, 0x1d, 0xea, 0xc9, 0xeb, 0xde, 0x05, 0xc4, 0x6b, 0xa1, 0x37, 0xda, 0x2f, 0xdb, 0xeb,
	0x27, 0x0a, 0x7b, 0x7d, 0x13, 0xea, 0x49, 0xb0, 0x13, 0xf2, 0x14, 0xba, 0xca, 0x46, 0x79, 0xdc,
	0x36, 0x63, 0xbb, 0x0f, 0xfc, 0x38, 0xb4, 0x82, 0x9d, 0x10, 0x53, 0x13, 0x5a, 0x4b, 0xc4, 0x17,
	0xf9, 0xb8, 0xd0, 0x27, 0xda, 0xde, 0x0e, 0x7a, 0x81, 0xdb, 0x2f, 0x0c, 0x8a, 0xc5, 0x8b, 0x0a,
	0x3d, 0x8b, 0x78, 0x53, 0xa0, 0xf3, 0x11, 0xe1, 0x3a, 0xdd, 0x77, 0xd3, 0x38, 0x0a, 0x1d, 0x3e,
	0xdb, 0x3c, 0x85, 0x6f, 0x70, 0x58, 0x8b, 0xcd, 0xf9, 0x75, 0x98, 0x0e, 0x12, 0x27, 0x08, 0xc3,
	0xfb, 0xbe, 0xbf, 0xef, 0xc7, 0x62, 0x5f, 0x6f, 0x04, 0x89, 0x9e, 0x81, 0xc8, 0x12, 0xcc, 0xb3,
	0xfa, 0x22, 0x1d, 0xec, 0x3b, 0xbd, 0x68, 0x6f, 0xbf, 0xef, 0xa7, 0xd9, 0xb6, 0x3e, 0x87, 0x95,
	0x46, 0x3a, 0xd8, 0x6f, 0x09, 0x30, 0xb9, 0x0d, 0xe7, 0x46, 0x55, 0xcd, 0x6c, 0x28, 0xb6, 0xf8,
	0x33, 0x45, 0x45, 0x85, 0x01, 0xe5, 0xff, 0x5f, 0x62, 0x13, 0xda, 0x65, 0x6a, 0x91, 0xcf, 0xc2,
	0xf4, 0x8e, 0xbb, 0xe7, 0x3b, 0x2e, 0x3f, 0xae, 0x10, 0x7e, 0x7d, 0xf9, 0x18, 0xa3, 0xf1, 0x7a,
	0x8e, 0x36, 0xb0, 0x8b, 0x38, 0xe0, 0x40, 0x0e, 0xf7, 0x42, 0x3f, 0xcd, 0x39, 0x94, 0x4f, 0xc4,
	0x01, 0xbb, 0x08, 0x0e, 0xb2, 0x0b, 0xf5, 0x76, 0xd7, 0x6a, 0x45, 0x51, 0xec, 0x25, 0x98, 0x3f,
	0xe1, 0x52, 0x4b, 0x07, 0x1e, 0x2f, 0x90, 0x4b, 0x34, 0x6f, 0x93, 0xe7, 0xa1, 0xde, 0x8f, 0xc2,
	0x1d, 0x8e, 0x2c, 0x33, 0xe4, 0x10, 0x80, 0x3d, 0xdd, 0x5e, 0x6f, 0x10, 0xbb, 0x3d, 0x9e, 0x30,
	0x96, 0x68, 0xde, 0x96, 0x7f, 0x54, 0x82, 0xb9, 0xb1, 0x58, 0x86, 0x11, 0xfb, 0xbe, 0x7f, 0xc0,
	0x84, 0xd4, 0x29, 0x7e, 0x92, 0x57, 0x41, 0xf2, 0xfc, 0xfd, 0xd8, 0xef, 0xb9, 0xa9, 0xef, 0x89,
	0x68, 0xcb, 0x53, 0xc9, 0xb9, 0x21, 0x9c, 0x47, 0xdc, 0xd7, 0x60, 0xbe, 0x40, 0xda, 0x47, 0xd6,
	0xbe, 0xd8, 0xbe, 0x0a, 0x3c, 0x98, 0x48, 0x9f, 0xb4, 0x61, 0x92, 0x31, 0xc3, 0x14, 0xfa, 0x59,
	0xa1, 0x69, 0x4c, 0x43, 0x26, 0x89, 0x85, 0x26, 0xd1, 0x5d, 0x56, 0x61, 0xe1, 0x28, 0x1a, 0x72,
	0x0e, 0x26, 0x85, 0x0a, 0xe2, 0x3c, 0x87, 0xb7, 0x30, 0xf2, 0x14, 0x47, 0xc1, 0x1b, 0xf2, 0xd7,
	0x4a, 0x50, 0xeb, 0xf6, 0xdd, 0x74, 0x3b, 0x8a, 0xf7, 0x70, 0x0b, 0x8f, 0x92, 0x6c, 0x0b, 0x8f,
	0x12, 0x64, 0x95, 0xf4, 0x62, 0xac, 0x8d, 0x78, 0xb4, 0x12, 0xad, 0x7c, 0xb9, 0x55, 0x0a, 0xcb,
	0x6d, 0x01, 0xaa, 0x49, 0x1a, 0xc5, 0x7e, 0x56, 0x19, 0xb0, 0x06, 0xf9, 0x04, 0x5b, 0x40, 0x5f,
	0x18, 0x60, 0xcc, 0x7a, 0x10, 0xf4, 0x30, 0xb8, 0xf9, 0x61, 0x8a, 0x69, 0x66, 0x2c, 0xf6, 0xe3,
	0x73, 0x1c, 0xaf, 0x32, 0xb4, 0x9e, 0x63, 0x31, 0xea, 0xce, 0x76, 0xfb, 0xee, 0x81, 0x1f, 0x73,
	0x60, 0x7a, 0x80, 0x7b, 0xee, 0x3e, 0x83, 0x0c, 0x63, 0x4e, 0x6d, 0x5f, 0x90, 0x1c, 0x72, 0xde,
	0xf2, 0xa9, 0x9d, 0xf7, 0xe3, 0x30, 0x95, 0x75, 0xae, 0x9c, 0xa4, 0x73, 0x46, 0x2d, 0xbf, 0x0d,
	0x33, 0xa8, 0xe9, 0xdb, 0x03, 0x7f, 0xc0, 0x0f, 0xf7, 0x3e, 0x0b, 0x75, 0xa6, 0x4b, 0xe1, 0x64,
	0xe7, 0x85, 0x67, 0xf0, 0x6a, 0xbb, 0x7b, 0x3c, 0xbf, 0xad, 0xed, 0x88, 0x2f, 0xf9, 0x4b, 0x70,
	0xa9, 0x1b, 0x47, 0xdb, 0x41, 0xdf, 0x37, 0xa2, 0x34, 0xe8, 0xf9, 0xa3, 0x27, 0x88, 0xcf, 0x38,
	0x3d, 0x1c, 0x9e, 0x13, 0x96, 0x8b, 0xe7, 0x84, 0x1f, 0x81, 0x1a, 0x67, 0xa4, 0xab, 0xe4, 0x02,
	0x9c, 0x35, 0x4c, 0x5b, 0x6f, 0x69, 0xba, 0x3a, 0x9e, 0x22, 0x4f, 0x42, 0x59, 0x57, 0x25, 0x49,
	0xde, 0x85, 0x2b, 0xa3, 0xe2, 0x4f, 0x7c, 0x6c, 0x78, 0x3a, 0x49, 0xb3, 0xf2, 0x97, 0xe0, 0xfc,
	0x88, 0xa4, 0x66, 0x14, 0x0e, 0x12, 0x8c, 0xa3, 0x09, 0xab, 0x34, 0x52, 0x37, 0x76, 0xfa, 0xfe,
	0x03, 0xbf, 0x2f, 0xa4, 0xd4, 0x11, 0xd2, 0x41, 0x00, 0x77, 0x38, 0x37, 0xce, 0x0e, 0x27, 0x79,
	0xe3, 0x74, 0xe2, 0xa7, 0xe5, 0x1e, 0x9c, 0x1d, 0x11, 0xdf, 0xca, 0x8a, 0xc1, 0x91, 0x4a, 0xb1,
	0x34, 0x5a, 0x29, 0x9e, 0x4e, 0x48, 0x43, 0xfe, 0xa7, 0x2a, 0xbc, 0x30, 0x22, 0x45, 0x0d, 0x92,
	0x5e, 0x14, 0x86, 0x7e, 0x2f, 0xf5, 0x3d, 0x9c, 0x7c, 0x9e, 0x23, 0x61, 0xb1, 0x39, 0x74, 0x9b,
	0xda, 0x33, 0x8b, 0xcd, 0xc3, 0x2e, 0x83, 0xe6, 0xda, 0x0b, 0x92, 0x24, 0xe0, 0x65, 0x1b, 0xcf,
	0x3d, 0xeb, 0x02, 0xa2, 0x7b, 0x64, 0x1b, 0x98, 0xb3, 0x3b, 0x31, 0x93, 0xc5, 0x36, 0x85, 0xd9,
	0x65, 0xed, 0x18, 0xf6, 0x27, 0xd0, 0xf6, 0xe6, 0xf0, 0x93, 0xc2, 0xce, 0x70, 0x10, 0xbb, 0xd0,
	0x38, 0x88, 0x06, 0x71, 0x26, 0xa7, 0xc1, 0xe4, 0xb4, 0x7f, 0x0d, 0x39, 0x3c, 0x08, 0x64, 0x92,
	0x90, 0xb7, 0x90, 0xb4, 0x0f, 0x73, 0xd1, 0xfe, 0x7e, 0x14, 0xfa, 0x61, 0x9a, 0x49, 0x9b, 0xfe,
	0x70, 0xa5, 0xcd, 0x66, 0xfc, 0x85, 0xc4, 0x26, 0x34, 0x30, 0x4e, 0xba, 0x29, 0x9f, 0xa2, 0x19,
	0x26, 0xed, 0xb8, 0xe3, 0xb5, 0x55, 0x46, 0xc9, 0xeb, 0xd6, 0xed, 0xfc, 0x5b, 0x6e, 0x03, 0x14,
	0xa6, 0x7c, 0x16, 0xa0, 0x4d, 0x9d, 0x0d, 0xe3, 0x8e, 0x61, 0x6e, 0x19, 0xd2, 0x73, 0xa2, 0xdd,
	0xed, 0x28, 0x77, 0x75, 0xa3, 0x2d, 0x95, 0xb0, 0x80, 0x6c, 0x53, 0x67, 0x4b, 0x37, 0x0c, 0x8d,
	0x4a, 0x65, 0x02, 0x30, 0xd9, 0xa6, 0x8e, 0xad, 0x6b, 0x52, 0xe5, 0x74, 0x4e, 0x38, 0x21, 0xdf,
	0x85, 0xe9, 0xe2, 0xd8, 0x50, 0x52, 0xb7, 0x28, 0x19, 0x60, 0xb2, 0x4b, 0x9d, 0x2d, 0xd3, 0x90,
	0x4a, 0xa4, 0x01, 0x53, 0x5d, 0xea, 0x74, 0x4c, 0xcb, 0x96, 0xca, 0xe4, 0x0c, 0xcc, 0x75, 0xa9,
	0xa3, 0xea, 0x56, 0xcb, 0x34, 0x0c, 0xad, 0x65, 0x6b, 0xaa, 0x54, 0x11, 0x14, 0x6f, 0x6f, 0xe8,
	0xb6, 0x34, 0x21, 0x7f, 0xb9, 0x04, 0x0b, 0x23, 0xb6, 0x65, 0x0b, 0x74, 0x63, 0x1f, 0x5d, 0x92,
	0x1d, 0x49, 0xb0, 0x9c, 0x33, 0x5b, 0xc1, 0x08, 0x69, 0x21, 0x00, 0xd7, 0x58, 0xe8, 0x3f, 0x14,
	0xeb, 0x5b, 0x5c, 0x31, 0x84, 0xfe, 0x43, 0xd6, 0xfb, 0x74, 0xc3, 0x9b, 0x93, 0x7f, 0x51, 0x06,
	0x32, 0xa2, 0xc3, 0xba, 0xef, 0xb9, 0xfd, 0x0f, 0x8a, 0x21, 0x57, 0xa1, 0xd1, 0xf7, 0x77, 0x30,
	0x53, 0x8a, 0xdd, 0xf0, 0xbe, 0xd0, 0x01, 0x38, 0x88, 0xba, 0xe1, 0x7d, 0xac, 0x5a, 0xee, 0xf9,
	0x49, 0xea, 0x14, 0x98, 0x88, 0x93, 0x60, 0x04, 0x5b, 0x39, 0xa3, 0x4f, 0x40, 0xb5, 0xb7, 0xeb,
	0x27, 0xbc, 0x0e, 0x6d, 0x2c, 0xcb, 0xc7, 0xf8, 0x04, 0xf5, 0x1f, 0xba, 0xb1, 0xd7, 0x42, 0x4a,
	0xca, 0x3b, 0x10, 0x0a, 0xb0, 0x87, 0xaa, 0x16, 0x8f, 0x98, 0x6e, 0x9f, 0xc4, 0x81, 0xd9, 0x00,
	0x6f, 0xb2, 0xff, 0x33, 0x27, 0xab, 0xef, 0x65, 0x9f, 0x72, 0x13, 0xea, 0x39, 0x9c, 0xcc, 0xc3,
	0x8c, 0x98, 0x65, 0x67, 0x5d, 0x53, 0x95, 0x8e, 0xf4, 0x1c, 0x21, 0x30, 0x9b, 0x1d, 0x40, 0x08,
	0x18, 0x3b, 0x04, 0xd9, 0xd2, 0x3b, 0x59, 0xbb, 0x7c, 0x3a, 0xfb, 0x97, 0xe4, 0xfd, 0xb1, 0x38,
	0xde, 0x8d, 0xfd, 0x5e, 0x14, 0x62, 0xd9, 0x84, 0xd9, 0x02, 0x16, 0x29, 0x62, 0xa7, 0x62, 0xdf,
	0xf9, 0x59, 0x5b, 0x79, 0x78, 0xd6, 0x76, 0x3a, 0x89, 0x55, 0xf9, 0xab, 0xa5, 0xb1, 0xd8, 0xdd,
	0x1d, 0xc4, 0xbd, 0x5d, 0x37, 0x61, 0x91, 0x70, 0x3f, 0x8e, 0xbc, 0x41, 0x2f, 0xaf, 0x32, 0xeb,
	0xb4, 0x2e, 0x20, 0x3a, 0x3b, 0x18, 0x64, 0x35, 0x41, 0x59, 0xe8, 0x83, 0x89, 0xfe, 0x45, 0xa8,
	0xf5, 0x06, 0x71, 0xec, 0x87, 0xbd, 0xfc, 0x68, 0x36, 0x6b, 0x9f, 0x4e, 0x2f, 0x90, 0xdf, 0x2b,
	0xc1, 0xc5, 0x11, 0xbd, 0xf8, 0xa4, 0x8b, 0x4b, 0x0d, 0x4c, 0xfb, 0xef, 0xf1, 0xcf, 0x61, 0x7a,
	0x50, 0xa5, 0x0d, 0x01, 0x63, 0x33, 0xf6, 0x02, 0xcc, 0x64, 0x24, 0xc5, 0x5a, 0x31, 0xeb, 0xc7,
	0xca, 0x87, 0xd3, 0x69, 0x55, 0x96, 0xbf, 0x51, 0x1a, 0x9b, 0x20, 0xe1, 0x8a, 0x58, 0x93, 0xfe,
	0x2a, 0x75, 0x6c, 0xf1, 0x2c, 0xbb, 0x3c, 0x76, 0x96, 0x7d, 0x2a, 0xd5, 0x2a, 0xf2, 0xe7, 0xe0,
	0xc2, 0x31, 0x9a, 0x2d, 0x3f, 0x3a, 0x1d, 0xaf, 0x19, 0xf9, 0x7f, 0x1d, 0x39, 0x4a, 0x75, 0x90,
	0xa4, 0x98, 0xcc, 0xba, 0x7b, 0x79, 0x5d, 0x53, 0xa5, 0xa2, 0x75, 0x3a, 0x09, 0x93, 0xb2, 0x0f,
	0x8b, 0x47, 0x48, 0x58, 0x8d, 0xe2, 0x1d, 0x7f, 0xc4, 0x28, 0xa5, 0x5f, 0xc7, 0x28, 0xb5, 0x63,
	0x06, 0xd2, 0x8e, 0xfa, 0xde, 0x87, 0x33, 0x90, 0xba, 0xec, 0x1d, 0x39, 0x90, 0xf5, 0xec, 0x5a,
	0x84, 0xf1, 0x2c, 0x9c, 0x1b, 0xb0, 0xf6, 0x69, 0xf3, 0xbb, 0x29, 0xf9, 0x8f, 0x4b, 0x70, 0x75,
	0x44, 0x0c, 0xaf, 0xb5, 0x9b, 0xb1, 0xfb, 0xb0, 0xcf, 0x25, 0x26, 0x44, 0x83, 0xe9, 0x98, 0x7d,
	0x3a, 0x3c, 0x86, 0x96, 0x4e, 0x1c, 0x43, 0x1b, 0xf1, 0xb0, 0x91, 0xdd, 0xe5, 0x3c, 0x0c, 0xc2,
	0x2c, 0x27, 0x9c, 0x0a, 0x07, 0x7b, 0x5b, 0x41, 0x78, 0xca, 0xac, 0x70, 0x5e, 0x7e, 0x52, 0x1a,
	0xcb, 0x7f, 0x0b, 0x4a, 0xdb, 0x41, 0xef, 0xbe, 0x9f, 0xe2, 0xce, 0x91, 0xb2, 0xaf, 0xe2, 0x2a,
	0x06, 0x0e, 0xca, 0xce, 0xfe, 0x3f, 0x9c, 0x05, 0x42, 0xe4, 0xef, 0x54, 0xa0, 0x2e, 0x82, 0x88,
	0xbb, 0x43, 0xde, 0x81, 0x59, 0x61, 0x2d, 0x11, 0x0f, 0x84, 0xbd, 0x6e, 0x9d, 0x64, 0xd3, 0x18,
	0x89, 0x45, 0x74, 0x26, 0x1e, 0x09, 0x4d, 0x26, 0x34, 0xb2, 0x79, 0xc0, 0x70, 0xc0, 0x2b, 0xa8,
	0x9b, 0x27, 0x67, 0x8b, 0x4b, 0x96, 0x42, 0x3c, 0x0c, 0x2c, 0x43, 0x86, 0xde, 0x20, 0xc9, 0xaa,
	0xaa, 0x53, 0x30, 0xc4, 0x75, 0x9b, 0x31, 0x64, 0x6b, 0x78, 0xc8, 0x70, 0x27, 0xea, 0x7b, 0x62,
	0xb3, 0x3d, 0x05, 0x43, 0x5c, 0x3f, 0x19, 0x43, 0xb6, 0x96, 0x36, 0x41, 0x2a, 0x0c, 0x99, 0x67,
	0xfb, 0xfc, 0xac, 0xe8, 0xf5, 0x93, 0x70, 0xcd, 0xca, 0x05, 0x3a, 0x3b, 0x1c, 0x35, 0xab, 0x10,
	0xfe, 0xa1, 0x0c, 0x8d, 0x82, 0xa3, 0x92, 0xb7, 0x60, 0xe2, 0x9e, 0xbb, 0x73, 0x4b, 0x4c, 0xd5,
	0xb5, 0x67, 0xba, 0x76, 0xd3, 0xdd, 0xa1, 0x8c, 0x5a, 0xf4, 0x5a, 0x16, 0x33, 0x71, 0xb2, 0x5e,
	0xcb, 0xa2, 0xd7, 0x6d, 0x61, 0xee, 0x93, 0xf5, 0xba, 0x2d, 0x7a, 0xbd, 0x25, 0x6c, 0x7a, 0xb2,
	0x5e, 0x6f, 0x89, 0x5e, 0x1f, 0x15, 0x36, 0x3b, 0x59, 0xaf, 0x8f, 0x92, 0x8f, 0x41, 0xe5, 0x9e,
	0xbb, 0xb3, 0x38, 0xc9, 0x0e, 0x40, 0x3e, 0xb0, 0x13, 0x3b, 0xf5, 0xc0, 0x0e, 0xf2, 0x0f, 0x27,
	0x41, 0xb2, 0x7a, 0x7e, 0xe8, 0xc6, 0x41, 0x74, 0xec, 0xbd, 0x03, 0x66, 0x95, 0x51, 0x2a, 0x0e,
	0x49, 0xf9, 0x59, 0x47, 0x0d, 0x01, 0xaa, 0x9f, 0xf4, 0x70, 0xd9, 0x62, 0x8c, 0xe0, 0xa7, 0x06,
	0x89, 0xd8, 0xea, 0x21, 0x1c, 0xec, 0xf1, 0xdc, 0x38, 0x21, 0x6f, 0xc0, 0x02, 0x47, 0xde, 0x72,
	0x78, 0xea, 0x2a, 0x2e, 0x7a, 0x27, 0x58, 0xb2, 0x30, 0x2f, 0x70, 0x6b, 0x98, 0xc3, 0xf2, 0xeb,
	0xde, 0xbc, 0xc3, 0xf2, 0x68, 0x87, 0x6a, 0xb1, 0xc3, 0x72, 0xa1, 0xc3, 0x25, 0xa8, 0x07, 0x89,
	0xe3, 0x3f, 0xda, 0xf7, 0xe3, 0xec, 0xd2, 0xa1, 0x16, 0x24, 0x1a, 0x6b, 0x63, 0x76, 0xe0, 0x66,
	0xb5, 0x36, 0x72, 0x11, 0xb7, 0x82, 0x39, 0x4c, 0xf7, 0xc8, 0x12, 0xcc, 0x0f, 0x49, 0xf6, 0x22,
	0x8f, 0xd1, 0xf1, 0x1b, 0x88, 0xb9, 0x1c, 0xb1, 0x1e, 0x79, 0x48, 0x5b, 0xa8, 0xd2, 0xeb, 0x23,
	0x8f, 0x7b, 0x46, 0x6f, 0xf1, 0x40, 0xe4, 0xc5, 0xf9, 0x2d, 0xde, 0xa7, 0xe1, 0x52, 0xaf, 0x1f,
	0x60, 0x61, 0x75, 0xe4, 0xd8, 0x1a, 0x6c, 0x6c, 0xe7, 0x39, 0x49, 0xf7, 0xd0, 0x08, 0xdf, 0x84,
	0x85, 0x94, 0x05, 0x4c, 0xe7, 0x1e, 0x46, 0x4c, 0x27, 0xf5, 0x1f, 0xa1, 0x4e, 0xe2, 0xb2, 0x82,
	0xa4, 0x85, 0x60, 0xca, 0x31, 0xe4, 0xbf, 0xc1, 0xc5, 0xa3, 0x7a, 0x38, 0xfb, 0xbb, 0x51, 0xc8,
	0xeb, 0xac, 0x3a, 0x3d, 0x7f, 0xb8, 0x5f, 0x17, 0xd1, 0x64, 0x17, 0xae, 0x1f, 0xdf, 0xd9, 0x89,
	0xb6, 0xb7, 0x13, 0x3f, 0x65, 0xf7, 0x8c, 0xc7, 0xe7, 0x36, 0x9b, 0x7e, 0x2f, 0x8d, 0xe2, 0x65,
	0x7a, 0xf9, 0x18, 0x19, 0x26, 0x63, 0x22, 0xde, 0x7b, 0xf4, 0xa2, 0x68, 0x7f, 0x71, 0x2e, 0x7b,
	0xef, 0xd1, 0x8a, 0xa2, 0xfd, 0xa3, 0x2e, 0x37, 0xa4, 0xa3, 0x2e, 0x37, 0x3e, 0x5d, 0xbc, 0x8f,
	0x9a, 0x7f, 0x66, 0x85, 0x4f, 0xc5, 0x35, 0x55, 0xe1, 0xc2, 0xea, 0xc3, 0xb9, 0xa9, 0xb1, 0xe1,
	0x1c, 0xbf, 0xfc, 0xc1, 0xd9, 0xea, 0x04, 0xc9, 0xf0, 0xde, 0xf0, 0x12, 0xd4, 0x87, 0xd7, 0x6f,
	0x22, 0x7f, 0x49, 0xb2, 0x5b, 0xb7, 0xcb, 0xe2, 0x15, 0x47, 0xe0, 0xf1, 0x7b, 0x44, 0x7e, 0x9b,
	0x34, 0xc5, 0x1f, 0xd5, 0x24, 0xf2, 0xbf, 0x55, 0xe0, 0x7c, 0x61, 0x97, 0xcc, 0x4a, 0x4d, 0xc6,
	0xf7, 0x15, 0x98, 0x13, 0x41, 0x36, 0x7f, 0x50, 0xc6, 0xb9, 0x8b, 0xa8, 0x99, 0x1f, 0x2a, 0x5d,
	0xe7, 0x67, 0x78, 0x09, 0xf7, 0xba, 0xfc, 0x65, 0x0e, 0x83, 0x31, 0x8e, 0x4c, 0x47, 0x4e, 0xf2,
	0x30, 0x0a, 0xb3, 0x4c, 0x9d, 0x01, 0xb6, 0xa2, 0x10, 0xbd, 0xfa, 0x61, 0x10, 0x3a, 0x49, 0x1a,
	0xfb, 0xee, 0x7d, 0x71, 0x10, 0x59, 0x7f, 0x18, 0x84, 0x16, 0x03, 0x10, 0x13, 0x66, 0x13, 0x9f,
	0x9f, 0x90, 0x24, 0xa9, 0x9b, 0x0e, 0x12, 0x51, 0x6e, 0xdd, 0x78, 0xe6, 0xb5, 0x00, 0x1b, 0x8f,
	0xc5, 0xe8, 0xe9, 0x8c, 0xe8, 0xcf, 0x9b, 0xb8, 0x14, 0x31, 0x9a, 0xf0, 0x5d, 0x3f, 0x71, 0xa2,
	0x87, 0xa1, 0xef, 0x89, 0x37, 0x0f, 0x73, 0xe1, 0x60, 0x8f, 0xa7, 0x0a, 0x89, 0x89, 0x60, 0xa2,
	0xc3, 0x94, 0xe8, 0xcc, 0x16, 0x75, 0x63, 0xf9, 0x8d, 0x0f, 0x96, 0xca, 0xad, 0x68, 0xf1, 0x6e,
	0x34, 0xeb, 0x4f, 0x3e, 0x01, 0x8b, 0xfc, 0xd1, 0x0a, 0x6b, 0x26, 0xce, 0x3e, 0x2f, 0x7c, 0xdc,
	0x7b, 0xfd, 0xec, 0x2a, 0xf2, 0x1c, 0x7b, 0xc4, 0xc2, 0xd1, 0xdd, 0x21, 0x96, 0x7c, 0x06, 0x40,
	0xac, 0x11, 0x74, 0xc0, 0xfa, 0x33, 0x2f, 0xd7, 0xf8, 0x22, 0x60, 0x95, 0xe5, 0xbd, 0xec, 0x53,
	0xfe, 0x65, 0x09, 0x16, 0x8f, 0x53, 0x70, 0xec, 0xea, 0xae, 0x74, 0xfa, 0xab, 0xbb, 0x91, 0x87,
	0x07, 0xe5, 0xb1, 0x87, 0x07, 0x04, 0x26, 0x58, 0x6a, 0xc7, 0x27, 0x9d, 0x7d, 0xf3, 0xb3, 0xee,
	0x24, 0xf1, 0xb3, 0xf7, 0x28, 0xa2, 0x35, 0x2c, 0xc7, 0xab, 0xa7, 0x2d, 0xc7, 0xaf, 0x42, 0x83,
	0xad, 0xe4, 0x7e, 0xd4, 0xbb, 0x2f, 0x26, 0xb3, 0xc6, 0x2f, 0xe2, 0x3a, 0x0c, 0x22, 0xff, 0xe9,
	0x14, 0xcc, 0x15, 0x1d, 0x63, 0xdf, 0xef, 0xe1, 0x1e, 0xe0, 0x87, 0x9e, 0x93, 0x60, 0xc9, 0xeb,
	0x25, 0xce, 0x76, 0x1c, 0xed, 0x39, 0x61, 0xf4, 0x50, 0xbc, 0x72, 0x9b, 0xf7, 0x43, 0xcf, 0xe2,
	0xa8, 0xd5, 0x38, 0xda, 0x33, 0xa2, 0x87, 0x28, 0x25, 0x11, 0xfb, 0xd8, 0x70, 0xa8, 0x90, 0x81,
	0x74, 0x8f, 0x7c, 0x12, 0x2e, 0xe4, 0x04, 0x87, 0xde, 0xe0, 0x55, 0xd8, 0x1b, 0xbc, 0x73, 0x19,
	0x01, 0x1d, 0x7d, 0x8b, 0xf7, 0x26, 0x2c, 0x8c, 0x77, 0x65, 0x8f, 0xf2, 0x26, 0xd8, 0xa3, 0x3c,
	0x32, 0xda, 0x6b, 0xcd, 0x4d, 0x76, 0x49, 0x33, 0xcf, 0xaa, 0x0a, 0x67, 0x10, 0xd7, 0x9f, 0x69,
	0x33, 0x7e, 0xac, 0x15, 0xe7, 0xdf, 0xb8, 0x74, 0xb3, 0x54, 0xcf, 0x4d, 0xdd, 0x5b, 0xe2, 0x76,
	0x4c, 0xf0, 0x55, 0x11, 0x34, 0x46, 0xb2, 0x9c, 0xdd, 0x89, 0x0d, 0x49, 0x96, 0xc9, 0x9d, 0x3c,
	0xb7, 0x4d, 0xe3, 0x60, 0x67, 0x47, 0xdc, 0x8a, 0xcd, 0x2e, 0xbf, 0xf8, 0x6c, 0x65, 0x38, 0x6d,
	0x96, 0xce, 0x8a, 0xe6, 0xf8, 0x69, 0x5d, 0xfd, 0x57, 0x38, 0xad, 0x7b, 0xf6, 0x53, 0x98, 0xb1,
	0x1a, 0x60, 0xfa, 0x50, 0x0d, 0x80, 0x65, 0x94, 0xfb, 0x88, 0x57, 0x24, 0x33, 0xa2, 0x8c, 0x72,
	0x1f, 0x61, 0x45, 0xc2, 0x4e, 0x6b, 0xdd, 0x47, 0x8e, 0xf0, 0xde, 0x59, 0x71, 0x5a, 0xeb, 0x3e,
	0xea, 0x70, 0x07, 0xa6, 0xf0, 0x4a, 0xaf, 0x1f, 0x25, 0xbe, 0xe7, 0xa4, 0x91, 0x13, 0xfa, 0x0f,
	0x87, 0x8b, 0xfd, 0x90, 0x93, 0xcd, 0x31, 0x27, 0xbb, 0xce, 0xc9, 0xed, 0xc8, 0xf0, 0x1f, 0x66,
	0x2b, 0x7f, 0xcc, 0xe9, 0xae, 0xc3, 0x34, 0x8a, 0xcc, 0x38, 0x89, 0x1d, 0xaa, 0xb1, 0xe7, 0x3e,
	0xca, 0x3a, 0x90, 0xff, 0x0e, 0x97, 0xb6, 0xe3, 0xc0, 0x0f, 0xbd, 0xfe, 0x81, 0xd3, 0xdb, 0x75,
	0xfb, 0x7d, 0x3f, 0xdc, 0xf1, 0x1d, 0x2f, 0x60, 0xd1, 0xc3, 0x63, 0x3b, 0x56, 0x8d, 0x5e, 0xc8,
	0x48, 0x5a, 0x19, 0x85, 0x2a, 0x08, 0x48, 0x13, 0xae, 0x08, 0x73, 0x0d, 0xd7, 0x83, 0x93, 0xec,
	0xc7, 0xbe, 0xeb, 0x89, 0xa3, 0x0c, 0xc2, 0x84, 0x5e, 0xe4, 0x54, 0x5a, 0xb6, 0x30, 0x2c, 0x46,
	0xc2, 0xef, 0x45, 0xb7, 0x30, 0xbf, 0xf1, 0x82, 0x34, 0x88, 0x42, 0xb7, 0xef, 0xb0, 0x97, 0x75,
	0x1f, 0xb4, 0xdf, 0x8d, 0xbd, 0x77, 0x65, 0x3b, 0x93, 0x34, 0x64, 0xc2, 0xd0, 0x89, 0xfc, 0xdd,
	0x12, 0xcc, 0x8e, 0xde, 0xf4, 0x62, 0x4c, 0x49, 0x82, 0x9d, 0x30, 0x7b, 0x0a, 0x87, 0xdf, 0xe4,
	0x0a, 0x00, 0x96, 0x01, 0x3b, 0x71, 0x34, 0x08, 0xf3, 0xa5, 0x39, 0x84, 0xb0, 0xa7, 0x72, 0xee,
	0xff, 0x8e, 0xe2, 0xec, 0x21, 0x21, 0x6b, 0x30, 0x68, 0x10, 0x46, 0x71, 0x76, 0xfd, 0xc5, 0x1a,
	0xf9, 0x1d, 0x74, 0x61, 0x5d, 0x7d, 0xf0, 0x1d, 0x34, 0xdf, 0xf5, 0x13, 0xf1, 0x25, 0xbf, 0x04,
	0x53, 0x22, 0x3d, 0x21, 0xd3, 0x50, 0x7a, 0xc4, 0x74, 0x2d, 0xd3, 0xd2, 0x23, 0x6c, 0xf1, 0xd2,
	0xb2, 0x4c, 0x4b, 0x07, 0x4b, 0x07, 0x50, 0xcf, 0x5f, 0x09, 0x93, 0x8b, 0x70, 0x4e, 0xb1, 0x2c,
	0xcd, 0xb6, 0xef, 0x76, 0xb5, 0x23, 0x9e, 0x41, 0x31, 0x9c, 0xc3, 0x90, 0x56, 0x4b, 0x33, 0x14,
	0xaa, 0x9b, 0x52, 0x29, 0xef, 0x24, 0x10, 0x1b, 0x4d, 0xfc, 0x6e, 0x29, 0x54, 0xe5, 0xcf, 0xaf,
	0x0b, 0x38, 0x55, 0x6b, 0xdd, 0x71, 0xe8, 0x46, 0x47, 0xb3, 0x34, 0x5b, 0xaa, 0x2c, 0xfd, 0x76,
	0x09, 0xe6, 0x9b, 0x6e, 0x9a, 0xf6, 0xfd, 0xae, 0x7b, 0xd0, 0x8d, 0xa3, 0x07, 0x01, 0xe6, 0x90,
	0x32, 0x5c, 0x69, 0x2a, 0xb6, 0xdd, 0xd1, 0xba, 0xca, 0xdd, 0x2e, 0x35, 0x37, 0x75, 0x55, 0xa3,
	0xe3, 0xba, 0x2c, 0xc2, 0x42, 0xb3, 0xeb, 0xe4, 0xd8, 0x66, 0x47, 0xff, 0xfc, 0xe7, 0x51, 0x60,
	0x89, 0x9c, 0x85, 0xf9, 0x22, 0x46, 0xe9, 0x76, 0x3b, 0x1a, 0xd7, 0xa3, 0x08, 0x6e, 0x9b, 0x66,
	0xbb, 0xa3, 0xb1, 0xf3, 0x72, 0xa9, 0x42, 0xce, 0x01, 0x19, 0xe9, 0xb3, 0xae, 0x7c, 0xde, 0x34,
	0xa4, 0x89, 0xa5, 0x9f, 0x55, 0x60, 0xba, 0x78, 0xcf, 0x46, 0xe6, 0xa0, 0xd1, 0x6c, 0xdb, 0x85,
	0xc3, 0x6f, 0x01, 0x58, 0xa5, 0xba, 0x66, 0xa8, 0x96, 0x54, 0x42, 0x23, 0x21, 0x80, 0x2a, 0xc6,
	0x9d, 0xe2, 0x6b, 0xad, 0x32, 0x99, 0x81, 0x3a, 0x22, 0x14, 0xaa, 0x19, 0x8a, 0x54, 0xc9, 0x9a,
	0x9b, 0x96, 0xa3, 0xe8, 0xd2, 0x04, 0x91, 0x60, 0x1a, 0x9b, 0xf6, 0x86, 0x6d, 0x52, 0x5d, 0xe9,
	0x48, 0xd5, 0x9c, 0xde, 0xba, 0x6b, 0xb4, 0xa4, 0x49, 0x72, 0x05, 0x2e, 0x62, 0xb3, 0xa5, 0x58,
	0x1b, 0x4a, 0x27, 0xe7, 0xeb, 0x18, 0xda, 0x56, 0x53, 0xd7, 0xa4, 0xfa, 0xb1, 0x78, 0x93, 0xae,
	0x2b, 0x1d, 0x09, 0x32, 0x76, 0xb6, 0x66, 0xd9, 0xb7, 0xa4, 0x46, 0xb1, 0xb9, 0x2c, 0x4d, 0x17,
	0x9b, 0xb7, 0xa5, 0x99, 0x6c, 0x10, 0xb6, 0xb2, 0xa9, 0x51, 0xa3, 0x49, 0x95, 0xad, 0x8e, 0xd3,
	0xdd, 0xec, 0x4a, 0x12, 0xb9, 0x06, 0xcf, 0x8f, 0x23, 0x6e, 0x75, 0x9d, 0x4d, 0x8d, 0x5a, 0x1b,
	0x6c, 0x20, 0xf3, 0xcc, 0xce, 0x63, 0x14, 0xcb, 0x5d, 0xa7, 0x65, 0x9a, 0x5d, 0x89, 0x90, 0x33,
	0x30, 0x57, 0x30, 0xce, 0x96, 0xde, 0x51, 0xa5, 0x2b, 0x19, 0x50, 0x68, 0xce, 0x80, 0x57, 0x33,
	0x36, 0xab, 0x56, 0xdb, 0xe1, 0x4c, 0x36, 0x2d, 0x61, 0x64, 0xe9, 0x06, 0x9b, 0xe2, 0x11, 0x24,
	0x2a, 0xf7, 0x6a, 0x66, 0x82, 0x21, 0x78, 0x44, 0xb5, 0x25, 0x72, 0x01, 0xce, 0x8e, 0xe2, 0x33,
	0xc5, 0x5e, 0x23, 0xd3, 0x50, 0x43, 0x54, 0x47, 0xb1, 0x6c, 0xe9, 0xb5, 0x8b, 0x65, 0xa9, 0xb4,
	0xf4, 0x5e, 0x09, 0xea, 0x79, 0x22, 0xc3, 0x1c, 0x84, 0x75, 0x61, 0x5e, 0x3c, 0x9c, 0x7e, 0x54,
	0x73, 0x08, 0xe7, 0x83, 0xe6, 0xcc, 0xa5, 0x12, 0x59, 0x00, 0xa9, 0x80, 0x5c, 0xd5, 0xa9, 0x65,
	0x4b, 0x25, 0x72, 0x1d, 0x2e, 0x8f, 0x42, 0x35, 0x4b, 0x57, 0x35, 0xa7, 0xad, 0xd8, 0x6b, 0x1a,
	0xd5, 0x8d, 0xb6, 0x54, 0x1e, 0xeb, 0xd8, 0x32, 0x37, 0x0c, 0x5b, 0xaa, 0x30, 0xad, 0xbe, 0x5f,
	0x82, 0xd9, 0xec, 0xb5, 0xae, 0xc2, 0x5f, 0x6f, 0x4b, 0x30, 0xad, 0x36, 0x1d, 0xa5, 0xa0, 0xd4,
	0x3c, 0xcc, 0x30, 0x48, 0x5b, 0xb3, 0xf9, 0x83, 0x3f, 0xa6, 0x0a, 0x03, 0xb5, 0xa8, 0xa6, 0xd8,
	0x7c, 0x19, 0x72, 0x39, 0x0c, 0x8a, 0x2e, 0xb9, 0x2e, 0xa0, 0x95, 0x1c, 0xaa, 0x6a, 0x1d, 0x2d,
	0xa3, 0x9d, 0xc8, 0x99, 0x5a, 0x19, 0xd3, 0x2a, 0x4e, 0x03, 0x03, 0x99, 0x5d, 0xcd, 0x70, 0x9a,
	0xa6, 0x69, 0xd9, 0x1a, 0x95, 0x26, 0x71, 0x3e, 0xb9, 0x78, 0x65, 0x5d, 0xb3, 0x1c, 0xdd, 0x58,
	0x35, 0xa5, 0xa9, 0xa5, 0x1f, 0x17, 0x14, 0x17, 0xf7, 0x48, 0x5c, 0xf1, 0xa2, 0x35, 0x17, 0xa1,
	0xc1, 0x20, 0xd6, 0xdb, 0x1d, 0x47, 0x7b, 0x47, 0xfa, 0x65, 0xf6, 0x5f, 0x29, 0xa7, 0xb5, 0x36,
	0x5a, 0x2d, 0x8d, 0x3d, 0xbd, 0x24, 0x30, 0xcb, 0x20, 0x86, 0x69, 0x3b, 0xfc, 0x77, 0x20, 0x65,
	0x21, 0x19, 0x2d, 0x66, 0x58, 0x36, 0x55, 0x74, 0x34, 0xdb, 0x08, 0xe1, 0xaa, 0xb9, 0x61, 0xa8,
	0xd2, 0x44, 0x0e, 0xd3, 0xde, 0x69, 0x69, 0x5d, 0xf6, 0x6c, 0xb2, 0x9e, 0xc3, 0x9a, 0x8a, 0xea,
	0x74, 0x15, 0xaa, 0xac, 0x4b, 0x0d, 0x5c, 0x07, 0x0c, 0xc6, 0xc2, 0x96, 0x6e, 0x39, 0xfc, 0x15,
	0xa5, 0x34, 0xbd, 0xf4, 0x1d, 0x1c, 0xce, 0xc8, 0x13, 0x53, 0xf2, 0x3c, 0x2c, 0x32, 0x32, 0xcb,
	0xdc, 0xa0, 0x2d, 0xed, 0x08, 0x47, 0x39, 0x84, 0x15, 0x6b, 0xb3, 0x44, 0x2e, 0xc3, 0x85, 0x43,
	0x48, 0x5b, 0x5b, 0xef, 0x76, 0x14, 0x1b, 0x43, 0xd7, 0x55, 0xb8, 0x74, 0x08, 0xdd, 0x54, 0x2c,
	0xbd, 0x95, 0xcd, 0xd8, 0x0b, 0x70, 0xf5, 0x10, 0x81, 0x6e, 0x18, 0x77, 0x34, 0xad, 0xab, 0x51,
	0x31, 0x81, 0x18, 0x6b, 0x6b, 0xd9, 0x4b, 0x63, 0x9c, 0xba, 0xec, 0x6a, 0x87, 0xf5, 0xc4, 0x2e,
	0x3c, 0x9a, 0x71, 0xa5, 0x32, 0xbf, 0x69, 0xc0, 0x94, 0xa2, 0x67, 0xee, 0x32, 0x0b, 0xa0, 0x52,
	0x65, 0xd5, 0xce, 0x5c, 0x62, 0x0e, 0x1a, 0x5d, 0xaa, 0xb5, 0x4c, 0xa3, 0xe0, 0x10, 0xc5, 0x25,
	0xc0, 0xc1, 0x93, 0x68, 0xd9, 0xe1, 0x9a, 0x63, 0xb0, 0x29, 0x22, 0x41, 0x63, 0x4d, 0x57, 0x55,
	0x4d, 0xf4, 0xfd, 0xc9, 0xd4, 0xd2, 0xf7, 0x66, 0xa0, 0x9e, 0xe7, 0xf6, 0xb8, 0x20, 0x35, 0x4a,
	0x4d, 0xea, 0x98, 0x77, 0xa4, 0xe7, 0xc8, 0x65, 0x38, 0xcf, 0x5b, 0x6b, 0x9a, 0x42, 0xed, 0x35,
	0xcb, 0x36, 0x0d, 0xcd, 0x69, 0x6a, 0x6d, 0xdd, 0x90, 0xfe, 0xec, 0xf1, 0x0a, 0xb9, 0x06, 0x17,
	0x39, 0xba, 0xdd, 0x31, 0x9b, 0x4a, 0x27, 0xdb, 0x26, 0x1c, 0xdd, 0xe8, 0x6e, 0xd8, 0xd2, 0x0f,
	0x1e, 0xaf, 0x90, 0x8b, 0xb0, 0x30, 0x42, 0x61, 0x98, 0x8e, 0xaa, 0xd8, 0x8a, 0xf4, 0xc3, 0xc7,
	0x2b, 0xe4, 0x65, 0xb8, 0x36, 0x86, 0xb3, 0x9d, 0xbb, 0x9a, 0xed, 0xe8, 0xeb, 0xdd, 0x8e, 0xb6,
	0xae, 0x19, 0xb6, 0xa6, 0x4a, 0x7f, 0x7e, 0x84, 0x14, 0x64, 0xe0, 0xac, 0x9b, 0xaa, 0xbe, 0xaa,
	0x6b, 0xaa, 0xf4, 0xa3, 0xc7, 0x2b, 0xe4, 0x45, 0xb8, 0x32, 0xa6, 0x87, 0xad, 0x51, 0x03, 0x49,
	0x9b, 0x0e, 0x43, 0x48, 0x7f, 0xf1, 0x78, 0x85, 0x5c, 0x87, 0x4b, 0xa3, 0x7c, 0x46, 0x9d, 0xeb,
	0x2f, 0x1f, 0xaf, 0x90, 0x17, 0xe0, 0xf2, 0x08, 0xc9, 0xaa, 0xa6, 0xd8, 0x1b, 0x54, 0x73, 0x54,
	0xdd, 0x52, 0x9a, 0x1d, 0x4d, 0x95, 0xfe, 0xea, 0xf1, 0xca, 0xd0, 0x28, 0x82, 0x68, 0xcd, 0xb6,
	0xbb, 0x42, 0xcc, 0x5f, 0x1f, 0xc1, 0xe3, 0x73, 0x96, 0x69, 0xa0, 0x63, 0x5b, 0x9a, 0x20, 0xfa,
	0x9b, 0x23, 0x74, 0xc9, 0x35, 0xe6, 0x24, 0x7f, 0x7b, 0x04, 0x09, 0x4e, 0x25, 0xb3, 0x2d, 0xdf,
	0x8a, 0xff, 0xee, 0xf1, 0x0a, 0x59, 0x82, 0x17, 0x0f, 0x6b, 0x62, 0xeb, 0xeb, 0x9a, 0xb9, 0x61,
	0x3b, 0x26, 0x75, 0x94, 0xa6, 0x49, 0xd1, 0x8a, 0x3f, 0x2e, 0xd2, 0x66, 0xf9, 0x83, 0xa3, 0x1b,
	0x2d, 0x93, 0x52, 0xad, 0x65, 0x3b, 0xc6, 0xc6, 0x3a, 0xdb, 0x91, 0x35, 0x6a, 0x49, 0xdf, 0xfd,
	0x4a, 0x61, 0x66, 0x72, 0x5a, 0x9c, 0x37, 0xe6, 0xe9, 0x5d, 0xad, 0xc5, 0xed, 0xfe, 0xbd, 0xaf,
	0xac, 0x90, 0x1b, 0x20, 0x8f, 0xd1, 0xad, 0x6f, 0x58, 0xb6, 0xd3, 0xd4, 0x1c, 0x4b, 0xa3, 0x9b,
	0x1a, 0x75, 0x4c, 0xa3, 0x73, 0x57, 0xfa, 0xfe, 0x57, 0x56, 0xc8, 0x6b, 0xf0, 0x12, 0xa7, 0x1c,
	0xf1, 0x53, 0x4b, 0x53, 0xd0, 0x38, 0xba, 0xd1, 0xa2, 0xd9, 0x84, 0x7f, 0xeb, 0x49, 0xc1, 0x82,
	0x23, 0xc4, 0xe8, 0x1e, 0x4a, 0xcb, 0xd6, 0x37, 0x35, 0xe9, 0x77, 0x9f, 0xac, 0x10, 0x19, 0x9e,
	0x3f, 0x92, 0xc8, 0xb1, 0xf5, 0xd6, 0x1d, 0xcd, 0x96, 0xbe, 0xfd, 0x64, 0x85, 0xbc, 0x04, 0x57,
	0x8f, 0xa0, 0xa1, 0x9a, 0xad, 0xd3, 0x6c, 0x5f, 0xf8, 0xbd, 0x27, 0x2b, 0xe4, 0x15, 0xb8, 0x7e,
	0x8c, 0x3c, 0xdd, 0x70, 0x2c, 0x8d, 0xfd, 0x0e, 0x4c, 0xfa, 0xfd, 0x27, 0x2b, 0xe4, 0x2d, 0xb8,
	0xf9, 0x81, 0x84, 0x4e, 0x73, 0xc3, 0xc6, 0xad, 0xa3, 0xa3, 0x3a, 0x4d, 0x4d, 0xfa, 0x83, 0x27,
	0x2b, 0xe4, 0x55, 0x78, 0xe1, 0x88, 0x5e, 0x87, 0x5c, 0xeb, 0x0f, 0x9f, 0xac, 0x90, 0xd7, 0xe1,
	0xe5, 0x23, 0x48, 0xf9, 0x88, 0x98, 0x1c, 0xaa, 0xbd, 0xbd, 0xa1, 0x53, 0x4d, 0x95, 0xfe, 0xe8,
	0x58, 0x75, 0xf8, 0x6e, 0xdd, 0xb9, 0x5b, 0xf8, 0x2d, 0x5b, 0x2e, 0xe3, 0x3b, 0x4f, 0x0a, 0x8e,
	0x50, 0xcc, 0x09, 0xd9, 0xdf, 0x2c, 0x6c, 0xf2, 0xa8, 0xf4, 0x1b, 0x4f, 0x0b, 0xd3, 0x76, 0x98,
	0x56, 0x6d, 0x3a, 0x54, 0x53, 0x54, 0xe1, 0xb0, 0xbf, 0xf9, 0xb4, 0x60, 0xc6, 0xc3, 0xc4, 0x9b,
	0xba, 0xd9, 0xe1, 0xcf, 0xe4, 0x7f, 0xeb, 0xe9, 0x0a, 0xf9, 0x08, 0xbc, 0x72, 0x04, 0x21, 0x6b,
	0xb0, 0xa7, 0xf8, 0xba, 0x9a, 0x07, 0xf0, 0xf7, 0x9e, 0xae, 0x90, 0x37, 0xe0, 0xd5, 0x23, 0xc8,
	0xf9, 0xef, 0x01, 0x90, 0xbc, 0xbd, 0x51, 0xe8, 0xf0, 0xf4, 0xd8, 0x0e, 0x43, 0xfe, 0x23, 0x1d,
	0xbe, 0xfa, 0x74, 0xdc, 0x24, 0xc3, 0x47, 0xfd, 0x38, 0xc8, 0x2d, 0xaa, 0xdb, 0xd9, 0xca, 0xfd,
	0xda, 0xd3, 0x82, 0xcf, 0x8f, 0xd3, 0x6e, 0x51, 0xd3, 0x68, 0x3b, 0xab, 0x18, 0xc6, 0x6d, 0xe9,
	0xeb, 0x4f, 0x0b, 0x93, 0x39, 0xa2, 0xc6, 0x51, 0x2b, 0xe4, 0x1b, 0x4f, 0x0b, 0x4e, 0x8f, 0x0b,
	0x91, 0xed, 0xe1, 0xbc, 0x5f, 0x1e, 0xe8, 0x7e, 0xf6, 0x7e, 0xc1, 0x95, 0x86, 0x44, 0x22, 0x2c,
	0xa0, 0x73, 0xb0, 0x5f, 0x36, 0x60, 0x26, 0xf3, 0x1f, 0xef, 0x17, 0x8c, 0x30, 0x4a, 0xda, 0x55,
	0x6c, 0x6a, 0x1a, 0x8c, 0xbc, 0xb5, 0xa6, 0xb1, 0xdf, 0x26, 0xe8, 0x86, 0xf4, 0x9f, 0xef, 0xaf,
	0x90, 0x37, 0x61, 0xe9, 0xa8, 0x0e, 0x8c, 0x72, 0x83, 0x52, 0xcd, 0xb0, 0x3b, 0x77, 0x19, 0x0e,
	0x5d, 0x49, 0xfa, 0xf9, 0xfb, 0x85, 0x40, 0xc8, 0xe9, 0x9c, 0xae, 0x46, 0xc5, 0xaf, 0x26, 0xa5,
	0x7f, 0xfe, 0x66, 0x41, 0x59, 0x44, 0xab, 0x1b, 0xdd, 0x8e, 0xde, 0xc2, 0x1c, 0x08, 0x5d, 0x58,
	0xb3, 0x6c, 0x47, 0x6f, 0x1b, 0x26, 0x7a, 0xf2, 0xbf, 0x7c, 0x73, 0x85, 0x2c, 0xc3, 0xeb, 0xcf,
	0x22, 0x35, 0xa9, 0xde, 0xd6, 0x59, 0x3c, 0xa7, 0x66, 0xb7, 0xab, 0xa9, 0xd2, 0xbf, 0x7e, 0x73,
	0x65, 0xe9, 0x53, 0x00, 0xc3, 0x23, 0x00, 0xdc, 0x23, 0x57, 0x8b, 0xf5, 0x41, 0x03, 0xa6, 0x56,
	0x6d, 0x9e, 0xd4, 0x96, 0x70, 0xc3, 0x5c, 0xb5, 0x0b, 0x35, 0xc1, 0xd2, 0x9f, 0x94, 0xa1, 0x96,
	0xd7, 0x16, 0xb3, 0x00, 0x23, 0xa5, 0xc5, 0x34, 0xd4, 0xf2, 0x02, 0x81, 0x65, 0x40, 0xbc, 0x25,
	0xb2, 0xe0, 0x32, 0x72, 0x2b, 0x56, 0x0c, 0x13, 0xa2, 0x03, 0x2f, 0x30, 0xaa, 0x28, 0x59, 0x64,
	0xf4, 0xd2, 0x24, 0x7b, 0x0d, 0x94, 0xe5, 0xdd, 0xd2, 0x94, 0x68, 0xf2, 0x8c, 0x5b, 0xaa, 0xe1,
	0x06, 0x3d, 0x9a, 0xb2, 0xf3, 0x1f, 0xa5, 0x20, 0xac, 0xc9, 0x92, 0x68, 0x91, 0xdb, 0xcf, 0xc3,
	0x0c, 0x87, 0x0d, 0x33, 0xfa, 0x8b, 0x70, 0xee, 0x98, 0x34, 0xfd, 0x8c, 0x50, 0x39, 0xc7, 0x49,
	0x0b, 0x98, 0x81, 0x1f, 0x4a, 0xd0, 0x19, 0xef, 0xb3, 0x58, 0xd0, 0x1d, 0x99, 0x9b, 0x9f, 0x13,
	0x03, 0x61, 0xa9, 0xf9, 0x39, 0x96, 0x04, 0xff, 0xbc, 0x04, 0x67, 0xa8, 0xdf, 0x8b, 0x07, 0x41,
	0xaa, 0xac, 0xb2, 0x13, 0x05, 0x2b, 0x75, 0x53, 0x9f, 0xbc, 0x08, 0xd7, 0xa8, 0xd6, 0xa2, 0x1b,
	0xba, 0xad, 0x88, 0x7a, 0xcc, 0xc6, 0xd9, 0x1b, 0xab, 0x1c, 0xcf, 0xc0, 0x1c, 0x55, 0x56, 0x9d,
	0x8c, 0x12, 0x9d, 0xa8, 0x84, 0x23, 0x2b, 0x00, 0x59, 0x32, 0x29, 0x40, 0x6d, 0xaa, 0xa8, 0x1b,
	0x0a, 0x7f, 0xbb, 0x74, 0x16, 0xe6, 0x11, 0xb4, 0xa9, 0x74, 0x34, 0x55, 0x6f, 0x31, 0xbb, 0x1b,
	0x12, 0xfb, 0xf1, 0x2e, 0x82, 0x79, 0x5c, 0xcc, 0xb9, 0x8a, 0x85, 0x48, 0xb5, 0x36, 0x3a, 0xe2,
	0x4f, 0xa6, 0xc8, 0x35, 0xb8, 0x74, 0x14, 0x99, 0x6d, 0x9a, 0x8e, 0xd9, 0x51, 0xa5, 0x9f, 0x4e,
	0x91, 0x17, 0xe1, 0xea, 0x88, 0x48, 0x67, 0x4b, 0xb7, 0xd7, 0x70, 0x0f, 0xcd, 0xf4, 0xa2, 0xd2,
	0xbf, 0x4f, 0x2d, 0x7d, 0xbb, 0x04, 0x67, 0xa9, 0x9f, 0x0e, 0xe2, 0x30, 0x08, 0x77, 0xc4, 0x39,
	0x2a, 0x3f, 0x55, 0x9e, 0x83, 0x06, 0xed, 0x5a, 0x05, 0x17, 0x7a, 0x1e, 0x16, 0x11, 0xc0, 0x45,
	0xda, 0x1b, 0xd4, 0xd0, 0x8d, 0xb6, 0xd8, 0x61, 0xf9, 0xc3, 0x1d, 0xc4, 0x8a, 0xcd, 0x8c, 0xfd,
	0x7a, 0x09, 0xdb, 0x2d, 0x13, 0x13, 0x1f, 0x5b, 0x93, 0x2a, 0x98, 0x79, 0x0e, 0x29, 0x1c, 0xb3,
	0x8b, 0x3a, 0xa1, 0x3e, 0x6c, 0x39, 0xdc, 0x92, 0x26, 0xc6, 0x08, 0x50, 0x5d, 0x67, 0x5d, 0x31,
	0xee, 0x3a, 0x1d, 0xd3, 0xb2, 0x34, 0x4b, 0xaa, 0x2e, 0xfd, 0x4e, 0x09, 0x66, 0x46, 0xce, 0xda,
	0xd0, 0x63, 0xa8, 0xb6, 0x85, 0xf1, 0xcf, 0xa6, 0x7a, 0xbb, 0xad, 0x15, 0x9f, 0x92, 0x9d, 0x87,
	0x33, 0x63, 0x38, 0xc3, 0x34, 0x34, 0xfe, 0x0b, 0xef, 0x31, 0xc4, 0x96, 0x6e, 0xb0, 0xe0, 0x20,
	0x95, 0xb1, 0xee, 0x1b, 0x43, 0xae, 0xea, 0x86, 0x6e, 0xad, 0x71, 0x7c, 0x05, 0x2b, 0xae, 0xa3,
	0xf1, 0xd9, 0x9e, 0x3a, 0xb1, 0xf4, 0x83, 0x0a, 0xc0, 0xf0, 0x7c, 0x12, 0x9d, 0x5f, 0xf4, 0x18,
	0xa9, 0xf4, 0x05, 0x4c, 0xe8, 0x74, 0x19, 0x2e, 0x08, 0x80, 0xa2, 0x6e, 0x6a, 0x06, 0xdb, 0x45,
	0xbb, 0xd4, 0x6c, 0x53, 0x2c, 0x50, 0xca, 0x58, 0x32, 0x66, 0x68, 0xda, 0x52, 0x0c, 0xcd, 0x51,
	0x37, 0x2c, 0x5b, 0x38, 0x11, 0x87, 0xf3, 0x1c, 0x9e, 0x9d, 0x93, 0x4c, 0xa0, 0xff, 0x67, 0x60,
	0x5e, 0x49, 0x39, 0x5d, 0xa5, 0x75, 0xc7, 0x92, 0xaa, 0x58, 0x8f, 0x09, 0xcc, 0xf0, 0x07, 0x62,
	0x93, 0x05, 0x15, 0xc5, 0x5e, 0x25, 0x4d, 0x15, 0x58, 0x67, 0xfb, 0xd7, 0xf2, 0x3b, 0x52, 0x8d,
	0x79, 0x7c, 0x01, 0x6c, 0x69, 0xb6, 0x54, 0x27, 0x2f, 0x83, 0xac, 0x6a, 0x98, 0xbe, 0x33, 0x47,
	0xcb, 0xf0, 0x98, 0xde, 0x33, 0xaf, 0x6c, 0x9b, 0x1d, 0x55, 0x33, 0x24, 0x28, 0x0c, 0x1b, 0x41,
	0x52, 0xa3, 0xa0, 0x0e, 0x02, 0xf8, 0x0f, 0xd4, 0xa6, 0x0b, 0xea, 0xaf, 0x9a, 0xb4, 0xad, 0x89,
	0x5c, 0xc1, 0x92, 0x66, 0x0a, 0x0c, 0x18, 0xe9, 0x6c, 0x61, 0xba, 0xb4, 0x77, 0x44, 0xb6, 0xc9,
	0xa2, 0xfc, 0x3a, 0xab, 0x73, 0xe7, 0x98, 0x1b, 0x0a, 0x75, 0xd6, 0x30, 0x7a, 0x49, 0x7c, 0x61,
	0x33, 0xc8, 0xb8, 0x17, 0x0f, 0x9d, 0x75, 0x7e, 0x49, 0x83, 0x5a, 0x76, 0xf5, 0x85, 0x01, 0x8e,
	0x6d, 0xf8, 0x6c, 0xaa, 0x9e, 0x63, 0x3a, 0x63, 0xb3, 0xb5, 0x66, 0x9a, 0x96, 0xc6, 0x15, 0x29,
	0x8d, 0x43, 0x79, 0x95, 0xb3, 0x74, 0x00, 0xf3, 0x87, 0xae, 0x6f, 0x58, 0x65, 0xd3, 0xc4, 0xc8,
	0x6d, 0x6f, 0x58, 0x85, 0x58, 0x72, 0x19, 0x2e, 0x0c, 0xc1, 0x22, 0x3d, 0xca, 0x53, 0x23, 0x26,
	0x60, 0x88, 0xce, 0x97, 0xd9, 0x22, 0x2c, 0x14, 0x79, 0x09, 0xdb, 0x5b, 0x52, 0x65, 0xe9, 0x4e,
	0xf1, 0x98, 0x31, 0x2b, 0x2a, 0x45, 0x52, 0x65, 0xe9, 0x6d, 0x23, 0x3b, 0x43, 0x5b, 0x55, 0x36,
	0x3a, 0x36, 0x2f, 0x2a, 0x0f, 0x61, 0x5b, 0x1b, 0x96, 0x6d, 0xae, 0x4b, 0xa5, 0x7b, 0x93, 0xec,
	0x1f, 0x97, 0xb8, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xc0, 0x1b, 0xab, 0x89, 0x42,
	0x00, 0x00,
}
