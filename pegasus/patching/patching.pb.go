// Code generated by protoc-gen-go.
// source: github.com/HearthSim/hs-proto-go/pegasus/patching/patching.proto
// DO NOT EDIT!

/*
Package patching is a generated protocol buffer package.

It is generated from these files:
	github.com/HearthSim/hs-proto-go/pegasus/patching/patching.proto

It has these top-level messages:
	DataOnlyPatching
	BnetId
	PlayerIdentity
	Telemetry
	PresenceChange
	FSGInfo
*/
package patching

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DataOnlyPatching_Status int32

const (
	DataOnlyPatching_SUCCEED                DataOnlyPatching_Status = 0
	DataOnlyPatching_SUCCEED_WITH_CACHE     DataOnlyPatching_Status = 1
	DataOnlyPatching_SUCCEED_WITH_TIMEOVER  DataOnlyPatching_Status = 2
	DataOnlyPatching_FAILED_GENERIC         DataOnlyPatching_Status = 3
	DataOnlyPatching_FAILED_DOWNLOADING     DataOnlyPatching_Status = 4
	DataOnlyPatching_FAILED_BAD_DATA        DataOnlyPatching_Status = 5
	DataOnlyPatching_FAILED_MD5_MISMATCH    DataOnlyPatching_Status = 6
	DataOnlyPatching_FAILED_BAD_ASSETBUNDLE DataOnlyPatching_Status = 7
	DataOnlyPatching_STARTED                DataOnlyPatching_Status = 8
)

var DataOnlyPatching_Status_name = map[int32]string{
	0: "SUCCEED",
	1: "SUCCEED_WITH_CACHE",
	2: "SUCCEED_WITH_TIMEOVER",
	3: "FAILED_GENERIC",
	4: "FAILED_DOWNLOADING",
	5: "FAILED_BAD_DATA",
	6: "FAILED_MD5_MISMATCH",
	7: "FAILED_BAD_ASSETBUNDLE",
	8: "STARTED",
}
var DataOnlyPatching_Status_value = map[string]int32{
	"SUCCEED":                0,
	"SUCCEED_WITH_CACHE":     1,
	"SUCCEED_WITH_TIMEOVER":  2,
	"FAILED_GENERIC":         3,
	"FAILED_DOWNLOADING":     4,
	"FAILED_BAD_DATA":        5,
	"FAILED_MD5_MISMATCH":    6,
	"FAILED_BAD_ASSETBUNDLE": 7,
	"STARTED":                8,
}

func (x DataOnlyPatching_Status) Enum() *DataOnlyPatching_Status {
	p := new(DataOnlyPatching_Status)
	*p = x
	return p
}
func (x DataOnlyPatching_Status) String() string {
	return proto.EnumName(DataOnlyPatching_Status_name, int32(x))
}
func (x *DataOnlyPatching_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataOnlyPatching_Status_value, data, "DataOnlyPatching_Status")
	if err != nil {
		return err
	}
	*x = DataOnlyPatching_Status(value)
	return nil
}
func (DataOnlyPatching_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type DataOnlyPatching_Locale int32

const (
	DataOnlyPatching_UnknownLocale DataOnlyPatching_Locale = 0
	DataOnlyPatching_enUS          DataOnlyPatching_Locale = 1
	DataOnlyPatching_enGB          DataOnlyPatching_Locale = 2
	DataOnlyPatching_frFR          DataOnlyPatching_Locale = 3
	DataOnlyPatching_deDE          DataOnlyPatching_Locale = 4
	DataOnlyPatching_koKR          DataOnlyPatching_Locale = 5
	DataOnlyPatching_esES          DataOnlyPatching_Locale = 6
	DataOnlyPatching_esMX          DataOnlyPatching_Locale = 7
	DataOnlyPatching_ruRU          DataOnlyPatching_Locale = 8
	DataOnlyPatching_zhTW          DataOnlyPatching_Locale = 9
	DataOnlyPatching_zhCN          DataOnlyPatching_Locale = 10
	DataOnlyPatching_itIT          DataOnlyPatching_Locale = 11
	DataOnlyPatching_ptBR          DataOnlyPatching_Locale = 12
	DataOnlyPatching_plPL          DataOnlyPatching_Locale = 13
	DataOnlyPatching_Locale15      DataOnlyPatching_Locale = 15
	DataOnlyPatching_Locale16      DataOnlyPatching_Locale = 16
)

var DataOnlyPatching_Locale_name = map[int32]string{
	0:  "UnknownLocale",
	1:  "enUS",
	2:  "enGB",
	3:  "frFR",
	4:  "deDE",
	5:  "koKR",
	6:  "esES",
	7:  "esMX",
	8:  "ruRU",
	9:  "zhTW",
	10: "zhCN",
	11: "itIT",
	12: "ptBR",
	13: "plPL",
	15: "Locale15",
	16: "Locale16",
}
var DataOnlyPatching_Locale_value = map[string]int32{
	"UnknownLocale": 0,
	"enUS":          1,
	"enGB":          2,
	"frFR":          3,
	"deDE":          4,
	"koKR":          5,
	"esES":          6,
	"esMX":          7,
	"ruRU":          8,
	"zhTW":          9,
	"zhCN":          10,
	"itIT":          11,
	"ptBR":          12,
	"plPL":          13,
	"Locale15":      15,
	"Locale16":      16,
}

func (x DataOnlyPatching_Locale) Enum() *DataOnlyPatching_Locale {
	p := new(DataOnlyPatching_Locale)
	*p = x
	return p
}
func (x DataOnlyPatching_Locale) String() string {
	return proto.EnumName(DataOnlyPatching_Locale_name, int32(x))
}
func (x *DataOnlyPatching_Locale) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataOnlyPatching_Locale_value, data, "DataOnlyPatching_Locale")
	if err != nil {
		return err
	}
	*x = DataOnlyPatching_Locale(value)
	return nil
}
func (DataOnlyPatching_Locale) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type DataOnlyPatching_Platform int32

const (
	DataOnlyPatching_UnknownPlatform DataOnlyPatching_Platform = 0
	DataOnlyPatching_Windows         DataOnlyPatching_Platform = 1
	DataOnlyPatching_Mac             DataOnlyPatching_Platform = 2
	DataOnlyPatching_iPad            DataOnlyPatching_Platform = 3
	DataOnlyPatching_iPhone          DataOnlyPatching_Platform = 4
	DataOnlyPatching_Android_Tablet  DataOnlyPatching_Platform = 5
	DataOnlyPatching_Android_Phone   DataOnlyPatching_Platform = 6
)

var DataOnlyPatching_Platform_name = map[int32]string{
	0: "UnknownPlatform",
	1: "Windows",
	2: "Mac",
	3: "iPad",
	4: "iPhone",
	5: "Android_Tablet",
	6: "Android_Phone",
}
var DataOnlyPatching_Platform_value = map[string]int32{
	"UnknownPlatform": 0,
	"Windows":         1,
	"Mac":             2,
	"iPad":            3,
	"iPhone":          4,
	"Android_Tablet":  5,
	"Android_Phone":   6,
}

func (x DataOnlyPatching_Platform) Enum() *DataOnlyPatching_Platform {
	p := new(DataOnlyPatching_Platform)
	*p = x
	return p
}
func (x DataOnlyPatching_Platform) String() string {
	return proto.EnumName(DataOnlyPatching_Platform_name, int32(x))
}
func (x *DataOnlyPatching_Platform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataOnlyPatching_Platform_value, data, "DataOnlyPatching_Platform")
	if err != nil {
		return err
	}
	*x = DataOnlyPatching_Platform(value)
	return nil
}
func (DataOnlyPatching_Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

type DataOnlyPatching_BnetRegion int32

const (
	DataOnlyPatching_REGION_UNINITIALIZED     DataOnlyPatching_BnetRegion = -1
	DataOnlyPatching_REGION_UNKNOWN           DataOnlyPatching_BnetRegion = 0
	DataOnlyPatching_REGION_US                DataOnlyPatching_BnetRegion = 1
	DataOnlyPatching_REGION_EU                DataOnlyPatching_BnetRegion = 2
	DataOnlyPatching_REGION_KR                DataOnlyPatching_BnetRegion = 3
	DataOnlyPatching_REGION_TW                DataOnlyPatching_BnetRegion = 4
	DataOnlyPatching_REGION_CN                DataOnlyPatching_BnetRegion = 5
	DataOnlyPatching_REGION_LIVE_VERIFICATION DataOnlyPatching_BnetRegion = 40
	DataOnlyPatching_REGION_PTR_LOC           DataOnlyPatching_BnetRegion = 41
	DataOnlyPatching_REGION_DEV               DataOnlyPatching_BnetRegion = 60
)

var DataOnlyPatching_BnetRegion_name = map[int32]string{
	-1: "REGION_UNINITIALIZED",
	0:  "REGION_UNKNOWN",
	1:  "REGION_US",
	2:  "REGION_EU",
	3:  "REGION_KR",
	4:  "REGION_TW",
	5:  "REGION_CN",
	40: "REGION_LIVE_VERIFICATION",
	41: "REGION_PTR_LOC",
	60: "REGION_DEV",
}
var DataOnlyPatching_BnetRegion_value = map[string]int32{
	"REGION_UNINITIALIZED":     -1,
	"REGION_UNKNOWN":           0,
	"REGION_US":                1,
	"REGION_EU":                2,
	"REGION_KR":                3,
	"REGION_TW":                4,
	"REGION_CN":                5,
	"REGION_LIVE_VERIFICATION": 40,
	"REGION_PTR_LOC":           41,
	"REGION_DEV":               60,
}

func (x DataOnlyPatching_BnetRegion) Enum() *DataOnlyPatching_BnetRegion {
	p := new(DataOnlyPatching_BnetRegion)
	*p = x
	return p
}
func (x DataOnlyPatching_BnetRegion) String() string {
	return proto.EnumName(DataOnlyPatching_BnetRegion_name, int32(x))
}
func (x *DataOnlyPatching_BnetRegion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataOnlyPatching_BnetRegion_value, data, "DataOnlyPatching_BnetRegion")
	if err != nil {
		return err
	}
	*x = DataOnlyPatching_BnetRegion(value)
	return nil
}
func (DataOnlyPatching_BnetRegion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 3}
}

type Telemetry_Level int32

const (
	Telemetry_LEVEL_NONE  Telemetry_Level = 0
	Telemetry_LEVEL_INFO  Telemetry_Level = 1
	Telemetry_LEVEL_WARN  Telemetry_Level = 2
	Telemetry_LEVEL_ERROR Telemetry_Level = 3
)

var Telemetry_Level_name = map[int32]string{
	0: "LEVEL_NONE",
	1: "LEVEL_INFO",
	2: "LEVEL_WARN",
	3: "LEVEL_ERROR",
}
var Telemetry_Level_value = map[string]int32{
	"LEVEL_NONE":  0,
	"LEVEL_INFO":  1,
	"LEVEL_WARN":  2,
	"LEVEL_ERROR": 3,
}

func (x Telemetry_Level) Enum() *Telemetry_Level {
	p := new(Telemetry_Level)
	*p = x
	return p
}
func (x Telemetry_Level) String() string {
	return proto.EnumName(Telemetry_Level_name, int32(x))
}
func (x *Telemetry_Level) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Telemetry_Level_value, data, "Telemetry_Level")
	if err != nil {
		return err
	}
	*x = Telemetry_Level(value)
	return nil
}
func (Telemetry_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Telemetry_Locale int32

const (
	Telemetry_LOCALE_UNKNOWN Telemetry_Locale = 0
	Telemetry_LOCALE_ENUS    Telemetry_Locale = 1
	Telemetry_LOCALE_ENGB    Telemetry_Locale = 2
	Telemetry_LOCALE_FRFR    Telemetry_Locale = 3
	Telemetry_LOCALE_DEDE    Telemetry_Locale = 4
	Telemetry_LOCALE_KOKR    Telemetry_Locale = 5
	Telemetry_LOCALE_ESES    Telemetry_Locale = 6
	Telemetry_LOCALE_ESMX    Telemetry_Locale = 7
	Telemetry_LOCALE_RURU    Telemetry_Locale = 8
	Telemetry_LOCALE_ZHTW    Telemetry_Locale = 9
	Telemetry_LOCALE_ZHCN    Telemetry_Locale = 10
	Telemetry_LOCALE_ITIT    Telemetry_Locale = 11
	Telemetry_LOCALE_PTBR    Telemetry_Locale = 12
	Telemetry_LOCALE_PLPL    Telemetry_Locale = 13
	Telemetry_LOCALE_15      Telemetry_Locale = 15
	Telemetry_LOCALE_16      Telemetry_Locale = 16
)

var Telemetry_Locale_name = map[int32]string{
	0:  "LOCALE_UNKNOWN",
	1:  "LOCALE_ENUS",
	2:  "LOCALE_ENGB",
	3:  "LOCALE_FRFR",
	4:  "LOCALE_DEDE",
	5:  "LOCALE_KOKR",
	6:  "LOCALE_ESES",
	7:  "LOCALE_ESMX",
	8:  "LOCALE_RURU",
	9:  "LOCALE_ZHTW",
	10: "LOCALE_ZHCN",
	11: "LOCALE_ITIT",
	12: "LOCALE_PTBR",
	13: "LOCALE_PLPL",
	15: "LOCALE_15",
	16: "LOCALE_16",
}
var Telemetry_Locale_value = map[string]int32{
	"LOCALE_UNKNOWN": 0,
	"LOCALE_ENUS":    1,
	"LOCALE_ENGB":    2,
	"LOCALE_FRFR":    3,
	"LOCALE_DEDE":    4,
	"LOCALE_KOKR":    5,
	"LOCALE_ESES":    6,
	"LOCALE_ESMX":    7,
	"LOCALE_RURU":    8,
	"LOCALE_ZHTW":    9,
	"LOCALE_ZHCN":    10,
	"LOCALE_ITIT":    11,
	"LOCALE_PTBR":    12,
	"LOCALE_PLPL":    13,
	"LOCALE_15":      15,
	"LOCALE_16":      16,
}

func (x Telemetry_Locale) Enum() *Telemetry_Locale {
	p := new(Telemetry_Locale)
	*p = x
	return p
}
func (x Telemetry_Locale) String() string {
	return proto.EnumName(Telemetry_Locale_name, int32(x))
}
func (x *Telemetry_Locale) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Telemetry_Locale_value, data, "Telemetry_Locale")
	if err != nil {
		return err
	}
	*x = Telemetry_Locale(value)
	return nil
}
func (Telemetry_Locale) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

type Telemetry_Platform int32

const (
	Telemetry_PLATFORM_UNKNOWN Telemetry_Platform = 0
	Telemetry_PLATFORM_PC      Telemetry_Platform = 1
	Telemetry_PLATFORM_MAC     Telemetry_Platform = 2
	Telemetry_PLATFORM_IOS     Telemetry_Platform = 3
	Telemetry_PLATFORM_ANDROID Telemetry_Platform = 4
)

var Telemetry_Platform_name = map[int32]string{
	0: "PLATFORM_UNKNOWN",
	1: "PLATFORM_PC",
	2: "PLATFORM_MAC",
	3: "PLATFORM_IOS",
	4: "PLATFORM_ANDROID",
}
var Telemetry_Platform_value = map[string]int32{
	"PLATFORM_UNKNOWN": 0,
	"PLATFORM_PC":      1,
	"PLATFORM_MAC":     2,
	"PLATFORM_IOS":     3,
	"PLATFORM_ANDROID": 4,
}

func (x Telemetry_Platform) Enum() *Telemetry_Platform {
	p := new(Telemetry_Platform)
	*p = x
	return p
}
func (x Telemetry_Platform) String() string {
	return proto.EnumName(Telemetry_Platform_name, int32(x))
}
func (x *Telemetry_Platform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Telemetry_Platform_value, data, "Telemetry_Platform")
	if err != nil {
		return err
	}
	*x = Telemetry_Platform(value)
	return nil
}
func (Telemetry_Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 2} }

type Telemetry_ScreenUI int32

const (
	Telemetry_SCREENUI_UNKNOWN Telemetry_ScreenUI = 0
	Telemetry_SCREENUI_DESKTOP Telemetry_ScreenUI = 1
	Telemetry_SCREENUI_TABLET  Telemetry_ScreenUI = 2
	Telemetry_SCREENUI_PHONE   Telemetry_ScreenUI = 3
)

var Telemetry_ScreenUI_name = map[int32]string{
	0: "SCREENUI_UNKNOWN",
	1: "SCREENUI_DESKTOP",
	2: "SCREENUI_TABLET",
	3: "SCREENUI_PHONE",
}
var Telemetry_ScreenUI_value = map[string]int32{
	"SCREENUI_UNKNOWN": 0,
	"SCREENUI_DESKTOP": 1,
	"SCREENUI_TABLET":  2,
	"SCREENUI_PHONE":   3,
}

func (x Telemetry_ScreenUI) Enum() *Telemetry_ScreenUI {
	p := new(Telemetry_ScreenUI)
	*p = x
	return p
}
func (x Telemetry_ScreenUI) String() string {
	return proto.EnumName(Telemetry_ScreenUI_name, int32(x))
}
func (x *Telemetry_ScreenUI) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Telemetry_ScreenUI_value, data, "Telemetry_ScreenUI")
	if err != nil {
		return err
	}
	*x = Telemetry_ScreenUI(value)
	return nil
}
func (Telemetry_ScreenUI) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 3} }

type Telemetry_Store int32

const (
	Telemetry_STORE_BLIZZARD   Telemetry_Store = 0
	Telemetry_STORE_IOS        Telemetry_Store = 1
	Telemetry_STORE_GOOGLEPLAY Telemetry_Store = 2
	Telemetry_STORE_AMAZON     Telemetry_Store = 3
)

var Telemetry_Store_name = map[int32]string{
	0: "STORE_BLIZZARD",
	1: "STORE_IOS",
	2: "STORE_GOOGLEPLAY",
	3: "STORE_AMAZON",
}
var Telemetry_Store_value = map[string]int32{
	"STORE_BLIZZARD":   0,
	"STORE_IOS":        1,
	"STORE_GOOGLEPLAY": 2,
	"STORE_AMAZON":     3,
}

func (x Telemetry_Store) Enum() *Telemetry_Store {
	p := new(Telemetry_Store)
	*p = x
	return p
}
func (x Telemetry_Store) String() string {
	return proto.EnumName(Telemetry_Store_name, int32(x))
}
func (x *Telemetry_Store) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Telemetry_Store_value, data, "Telemetry_Store")
	if err != nil {
		return err
	}
	*x = Telemetry_Store(value)
	return nil
}
func (Telemetry_Store) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 4} }

type Telemetry_BnetRegion int32

const (
	Telemetry_REGION_UNINITIALIZED     Telemetry_BnetRegion = -1
	Telemetry_REGION_UNKNOWN           Telemetry_BnetRegion = 0
	Telemetry_REGION_US                Telemetry_BnetRegion = 1
	Telemetry_REGION_EU                Telemetry_BnetRegion = 2
	Telemetry_REGION_KR                Telemetry_BnetRegion = 3
	Telemetry_REGION_TW                Telemetry_BnetRegion = 4
	Telemetry_REGION_CN                Telemetry_BnetRegion = 5
	Telemetry_REGION_LIVE_VERIFICATION Telemetry_BnetRegion = 40
	Telemetry_REGION_PTR_LOC           Telemetry_BnetRegion = 41
	Telemetry_REGION_DEV               Telemetry_BnetRegion = 60
	Telemetry_REGION_PTR               Telemetry_BnetRegion = 98
)

var Telemetry_BnetRegion_name = map[int32]string{
	-1: "REGION_UNINITIALIZED",
	0:  "REGION_UNKNOWN",
	1:  "REGION_US",
	2:  "REGION_EU",
	3:  "REGION_KR",
	4:  "REGION_TW",
	5:  "REGION_CN",
	40: "REGION_LIVE_VERIFICATION",
	41: "REGION_PTR_LOC",
	60: "REGION_DEV",
	98: "REGION_PTR",
}
var Telemetry_BnetRegion_value = map[string]int32{
	"REGION_UNINITIALIZED":     -1,
	"REGION_UNKNOWN":           0,
	"REGION_US":                1,
	"REGION_EU":                2,
	"REGION_KR":                3,
	"REGION_TW":                4,
	"REGION_CN":                5,
	"REGION_LIVE_VERIFICATION": 40,
	"REGION_PTR_LOC":           41,
	"REGION_DEV":               60,
	"REGION_PTR":               98,
}

func (x Telemetry_BnetRegion) Enum() *Telemetry_BnetRegion {
	p := new(Telemetry_BnetRegion)
	*p = x
	return p
}
func (x Telemetry_BnetRegion) String() string {
	return proto.EnumName(Telemetry_BnetRegion_name, int32(x))
}
func (x *Telemetry_BnetRegion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Telemetry_BnetRegion_value, data, "Telemetry_BnetRegion")
	if err != nil {
		return err
	}
	*x = Telemetry_BnetRegion(value)
	return nil
}
func (Telemetry_BnetRegion) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 5} }

type DataOnlyPatching struct {
	Status                 *DataOnlyPatching_Status     `protobuf:"varint,1,req,name=status,enum=patching.DataOnlyPatching_Status" json:"status,omitempty"`
	Locale                 *DataOnlyPatching_Locale     `protobuf:"varint,2,req,name=locale,enum=patching.DataOnlyPatching_Locale" json:"locale,omitempty"`
	Platform               *DataOnlyPatching_Platform   `protobuf:"varint,3,req,name=platform,enum=patching.DataOnlyPatching_Platform" json:"platform,omitempty"`
	BnetRegion             *DataOnlyPatching_BnetRegion `protobuf:"varint,4,req,name=bnet_region,json=bnetRegion,enum=patching.DataOnlyPatching_BnetRegion" json:"bnet_region,omitempty"`
	GameAccountId          *uint64                      `protobuf:"varint,5,req,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
	CurrentBuild           *int32                       `protobuf:"varint,6,opt,name=current_build,json=currentBuild" json:"current_build,omitempty"`
	NewBuild               *int32                       `protobuf:"varint,7,opt,name=new_build,json=newBuild" json:"new_build,omitempty"`
	SessionId              *string                      `protobuf:"bytes,8,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceUniqueIdentifier *string                      `protobuf:"bytes,9,req,name=device_unique_identifier,json=deviceUniqueIdentifier" json:"device_unique_identifier,omitempty"`
	XXX_unrecognized       []byte                       `json:"-"`
}

func (m *DataOnlyPatching) Reset()                    { *m = DataOnlyPatching{} }
func (m *DataOnlyPatching) String() string            { return proto.CompactTextString(m) }
func (*DataOnlyPatching) ProtoMessage()               {}
func (*DataOnlyPatching) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DataOnlyPatching) GetStatus() DataOnlyPatching_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return DataOnlyPatching_SUCCEED
}

func (m *DataOnlyPatching) GetLocale() DataOnlyPatching_Locale {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return DataOnlyPatching_UnknownLocale
}

func (m *DataOnlyPatching) GetPlatform() DataOnlyPatching_Platform {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return DataOnlyPatching_UnknownPlatform
}

func (m *DataOnlyPatching) GetBnetRegion() DataOnlyPatching_BnetRegion {
	if m != nil && m.BnetRegion != nil {
		return *m.BnetRegion
	}
	return DataOnlyPatching_REGION_UNINITIALIZED
}

func (m *DataOnlyPatching) GetGameAccountId() uint64 {
	if m != nil && m.GameAccountId != nil {
		return *m.GameAccountId
	}
	return 0
}

func (m *DataOnlyPatching) GetCurrentBuild() int32 {
	if m != nil && m.CurrentBuild != nil {
		return *m.CurrentBuild
	}
	return 0
}

func (m *DataOnlyPatching) GetNewBuild() int32 {
	if m != nil && m.NewBuild != nil {
		return *m.NewBuild
	}
	return 0
}

func (m *DataOnlyPatching) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *DataOnlyPatching) GetDeviceUniqueIdentifier() string {
	if m != nil && m.DeviceUniqueIdentifier != nil {
		return *m.DeviceUniqueIdentifier
	}
	return ""
}

type BnetId struct {
	Hi               *uint64 `protobuf:"varint,1,req,name=hi" json:"hi,omitempty"`
	Lo               *uint64 `protobuf:"varint,2,req,name=lo" json:"lo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BnetId) Reset()                    { *m = BnetId{} }
func (m *BnetId) String() string            { return proto.CompactTextString(m) }
func (*BnetId) ProtoMessage()               {}
func (*BnetId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BnetId) GetHi() uint64 {
	if m != nil && m.Hi != nil {
		return *m.Hi
	}
	return 0
}

func (m *BnetId) GetLo() uint64 {
	if m != nil && m.Lo != nil {
		return *m.Lo
	}
	return 0
}

type PlayerIdentity struct {
	PlayerId         *int64  `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	GameAccount      *BnetId `protobuf:"bytes,2,opt,name=game_account,json=gameAccount" json:"game_account,omitempty"`
	Account          *BnetId `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerIdentity) Reset()                    { *m = PlayerIdentity{} }
func (m *PlayerIdentity) String() string            { return proto.CompactTextString(m) }
func (*PlayerIdentity) ProtoMessage()               {}
func (*PlayerIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PlayerIdentity) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerIdentity) GetGameAccount() *BnetId {
	if m != nil {
		return m.GameAccount
	}
	return nil
}

func (m *PlayerIdentity) GetAccount() *BnetId {
	if m != nil {
		return m.Account
	}
	return nil
}

type Telemetry struct {
	Time                   *int64                `protobuf:"varint,1,req,name=time" json:"time,omitempty"`
	Level                  *Telemetry_Level      `protobuf:"varint,2,req,name=level,enum=patching.Telemetry_Level" json:"level,omitempty"`
	Locale                 *Telemetry_Locale     `protobuf:"varint,3,req,name=locale,enum=patching.Telemetry_Locale" json:"locale,omitempty"`
	Version                *string               `protobuf:"bytes,4,req,name=version" json:"version,omitempty"`
	Platform               *Telemetry_Platform   `protobuf:"varint,5,req,name=platform,enum=patching.Telemetry_Platform" json:"platform,omitempty"`
	Os                     *string               `protobuf:"bytes,6,req,name=os" json:"os,omitempty"`
	ScreenUI               *Telemetry_ScreenUI   `protobuf:"varint,7,req,name=screen_u_i,json=screenUI,enum=patching.Telemetry_ScreenUI" json:"screen_u_i,omitempty"`
	Store                  *Telemetry_Store      `protobuf:"varint,8,req,name=store,enum=patching.Telemetry_Store" json:"store,omitempty"`
	SessionId              *string               `protobuf:"bytes,9,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceUniqueIdentifier *string               `protobuf:"bytes,10,req,name=device_unique_identifier,json=deviceUniqueIdentifier" json:"device_unique_identifier,omitempty"`
	Event                  *uint64               `protobuf:"varint,11,req,name=event" json:"event,omitempty"`
	BnetRegion             *Telemetry_BnetRegion `protobuf:"varint,12,opt,name=bnet_region,json=bnetRegion,enum=patching.Telemetry_BnetRegion,def=-1" json:"bnet_region,omitempty"`
	GameAccountId          *uint64               `protobuf:"varint,13,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
	PlayerIdentity         *PlayerIdentity       `protobuf:"bytes,16,opt,name=player_identity,json=playerIdentity" json:"player_identity,omitempty"`
	ErrorCode              *int64                `protobuf:"varint,14,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Message                *string               `protobuf:"bytes,15,opt,name=message" json:"message,omitempty"`
	PresenceChange         *PresenceChange       `protobuf:"bytes,17,opt,name=presence_change,json=presenceChange" json:"presence_change,omitempty"`
	FsgInfo                *FSGInfo              `protobuf:"bytes,18,opt,name=fsg_info,json=fsgInfo" json:"fsg_info,omitempty"`
	XXX_unrecognized       []byte                `json:"-"`
}

func (m *Telemetry) Reset()                    { *m = Telemetry{} }
func (m *Telemetry) String() string            { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()               {}
func (*Telemetry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

const Default_Telemetry_BnetRegion Telemetry_BnetRegion = Telemetry_REGION_UNINITIALIZED

func (m *Telemetry) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *Telemetry) GetLevel() Telemetry_Level {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return Telemetry_LEVEL_NONE
}

func (m *Telemetry) GetLocale() Telemetry_Locale {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return Telemetry_LOCALE_UNKNOWN
}

func (m *Telemetry) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *Telemetry) GetPlatform() Telemetry_Platform {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return Telemetry_PLATFORM_UNKNOWN
}

func (m *Telemetry) GetOs() string {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return ""
}

func (m *Telemetry) GetScreenUI() Telemetry_ScreenUI {
	if m != nil && m.ScreenUI != nil {
		return *m.ScreenUI
	}
	return Telemetry_SCREENUI_UNKNOWN
}

func (m *Telemetry) GetStore() Telemetry_Store {
	if m != nil && m.Store != nil {
		return *m.Store
	}
	return Telemetry_STORE_BLIZZARD
}

func (m *Telemetry) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

func (m *Telemetry) GetDeviceUniqueIdentifier() string {
	if m != nil && m.DeviceUniqueIdentifier != nil {
		return *m.DeviceUniqueIdentifier
	}
	return ""
}

func (m *Telemetry) GetEvent() uint64 {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return 0
}

func (m *Telemetry) GetBnetRegion() Telemetry_BnetRegion {
	if m != nil && m.BnetRegion != nil {
		return *m.BnetRegion
	}
	return Default_Telemetry_BnetRegion
}

func (m *Telemetry) GetGameAccountId() uint64 {
	if m != nil && m.GameAccountId != nil {
		return *m.GameAccountId
	}
	return 0
}

func (m *Telemetry) GetPlayerIdentity() *PlayerIdentity {
	if m != nil {
		return m.PlayerIdentity
	}
	return nil
}

func (m *Telemetry) GetErrorCode() int64 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

func (m *Telemetry) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *Telemetry) GetPresenceChange() *PresenceChange {
	if m != nil {
		return m.PresenceChange
	}
	return nil
}

func (m *Telemetry) GetFsgInfo() *FSGInfo {
	if m != nil {
		return m.FsgInfo
	}
	return nil
}

type PresenceChange struct {
	NewStatus                       *int32  `protobuf:"varint,1,req,name=new_status,json=newStatus" json:"new_status,omitempty"`
	NewStatusParameters             []int32 `protobuf:"varint,2,rep,name=new_status_parameters,json=newStatusParameters" json:"new_status_parameters,omitempty"`
	MillisecondsSincePreviousStatus *int64  `protobuf:"varint,3,opt,name=milliseconds_since_previous_status,json=millisecondsSincePreviousStatus" json:"milliseconds_since_previous_status,omitempty"`
	PreviousStatus                  *int32  `protobuf:"varint,4,opt,name=previous_status,json=previousStatus" json:"previous_status,omitempty"`
	PreviousStatusParameters        []int32 `protobuf:"varint,5,rep,name=previous_status_parameters,json=previousStatusParameters" json:"previous_status_parameters,omitempty"`
	XXX_unrecognized                []byte  `json:"-"`
}

func (m *PresenceChange) Reset()                    { *m = PresenceChange{} }
func (m *PresenceChange) String() string            { return proto.CompactTextString(m) }
func (*PresenceChange) ProtoMessage()               {}
func (*PresenceChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PresenceChange) GetNewStatus() int32 {
	if m != nil && m.NewStatus != nil {
		return *m.NewStatus
	}
	return 0
}

func (m *PresenceChange) GetNewStatusParameters() []int32 {
	if m != nil {
		return m.NewStatusParameters
	}
	return nil
}

func (m *PresenceChange) GetMillisecondsSincePreviousStatus() int64 {
	if m != nil && m.MillisecondsSincePreviousStatus != nil {
		return *m.MillisecondsSincePreviousStatus
	}
	return 0
}

func (m *PresenceChange) GetPreviousStatus() int32 {
	if m != nil && m.PreviousStatus != nil {
		return *m.PreviousStatus
	}
	return 0
}

func (m *PresenceChange) GetPreviousStatusParameters() []int32 {
	if m != nil {
		return m.PreviousStatusParameters
	}
	return nil
}

type FSGInfo struct {
	FsgId            *int64 `protobuf:"varint,1,opt,name=fsg_id,json=fsgId" json:"fsg_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FSGInfo) Reset()                    { *m = FSGInfo{} }
func (m *FSGInfo) String() string            { return proto.CompactTextString(m) }
func (*FSGInfo) ProtoMessage()               {}
func (*FSGInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FSGInfo) GetFsgId() int64 {
	if m != nil && m.FsgId != nil {
		return *m.FsgId
	}
	return 0
}

func init() {
	proto.RegisterType((*DataOnlyPatching)(nil), "patching.DataOnlyPatching")
	proto.RegisterType((*BnetId)(nil), "patching.BnetId")
	proto.RegisterType((*PlayerIdentity)(nil), "patching.PlayerIdentity")
	proto.RegisterType((*Telemetry)(nil), "patching.Telemetry")
	proto.RegisterType((*PresenceChange)(nil), "patching.PresenceChange")
	proto.RegisterType((*FSGInfo)(nil), "patching.FSGInfo")
	proto.RegisterEnum("patching.DataOnlyPatching_Status", DataOnlyPatching_Status_name, DataOnlyPatching_Status_value)
	proto.RegisterEnum("patching.DataOnlyPatching_Locale", DataOnlyPatching_Locale_name, DataOnlyPatching_Locale_value)
	proto.RegisterEnum("patching.DataOnlyPatching_Platform", DataOnlyPatching_Platform_name, DataOnlyPatching_Platform_value)
	proto.RegisterEnum("patching.DataOnlyPatching_BnetRegion", DataOnlyPatching_BnetRegion_name, DataOnlyPatching_BnetRegion_value)
	proto.RegisterEnum("patching.Telemetry_Level", Telemetry_Level_name, Telemetry_Level_value)
	proto.RegisterEnum("patching.Telemetry_Locale", Telemetry_Locale_name, Telemetry_Locale_value)
	proto.RegisterEnum("patching.Telemetry_Platform", Telemetry_Platform_name, Telemetry_Platform_value)
	proto.RegisterEnum("patching.Telemetry_ScreenUI", Telemetry_ScreenUI_name, Telemetry_ScreenUI_value)
	proto.RegisterEnum("patching.Telemetry_Store", Telemetry_Store_name, Telemetry_Store_value)
	proto.RegisterEnum("patching.Telemetry_BnetRegion", Telemetry_BnetRegion_name, Telemetry_BnetRegion_value)
}

func init() {
	proto.RegisterFile("github.com/HearthSim/hs-proto-go/pegasus/patching/patching.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x57, 0xdd, 0x72, 0xe3, 0x48,
	0x15, 0x8e, 0xe4, 0xff, 0x93, 0xc4, 0xe9, 0xe9, 0xf9, 0x41, 0x3b, 0xec, 0x82, 0xd7, 0x5b, 0x80,
	0xa1, 0xd8, 0xa4, 0x08, 0xb5, 0xd4, 0xb2, 0xb5, 0x55, 0xa0, 0x58, 0xed, 0x44, 0x15, 0x59, 0x52,
	0xb5, 0xe4, 0x04, 0x72, 0xa3, 0x52, 0xac, 0x8e, 0xad, 0x1a, 0x5b, 0x32, 0x92, 0x9c, 0xa9, 0xe1,
	0x21, 0xb8, 0xa5, 0x78, 0x00, 0x1e, 0x82, 0x67, 0xe0, 0x86, 0x47, 0xe0, 0x4d, 0xa0, 0xba, 0x25,
	0x4b, 0xf2, 0x6c, 0x66, 0xb6, 0xb8, 0x25, 0x57, 0xe7, 0x7c, 0xfd, 0x9d, 0xd3, 0xad, 0xf6, 0x39,
	0xdf, 0xe9, 0xc0, 0xef, 0x17, 0x61, 0xb6, 0xdc, 0xde, 0x9f, 0xce, 0xe3, 0xf5, 0xd9, 0x15, 0xf3,
	0x93, 0x6c, 0xe9, 0x84, 0xeb, 0xb3, 0x65, 0xfa, 0xe5, 0x26, 0x89, 0xb3, 0xf8, 0xcb, 0x45, 0x7c,
	0xb6, 0x61, 0x0b, 0x3f, 0xdd, 0xa6, 0x67, 0x1b, 0x3f, 0x9b, 0x2f, 0xc3, 0x68, 0x51, 0x1a, 0xa7,
	0x82, 0x82, 0xbb, 0x3b, 0x7f, 0xf8, 0xf7, 0x1e, 0x20, 0xcd, 0xcf, 0x7c, 0x2b, 0x5a, 0xbd, 0xb3,
	0x0b, 0x10, 0xff, 0x16, 0xda, 0x69, 0xe6, 0x67, 0xdb, 0x54, 0x91, 0x06, 0xf2, 0xa8, 0x7f, 0xfe,
	0xf9, 0x69, 0x19, 0xff, 0x3e, 0xf7, 0xd4, 0x11, 0x44, 0x5a, 0x04, 0xf0, 0xd0, 0x55, 0x3c, 0xf7,
	0x57, 0x4c, 0x91, 0xbf, 0x37, 0xd4, 0x10, 0x44, 0x5a, 0x04, 0xe0, 0xdf, 0x41, 0x77, 0xb3, 0xf2,
	0xb3, 0x87, 0x38, 0x59, 0x2b, 0x0d, 0x11, 0xfc, 0xc5, 0x47, 0x82, 0xed, 0x82, 0x4a, 0xcb, 0x20,
	0x3c, 0x81, 0xc3, 0xfb, 0x88, 0x65, 0x5e, 0xc2, 0x16, 0x61, 0x1c, 0x29, 0x4d, 0x91, 0xe3, 0x27,
	0x1f, 0xc9, 0x71, 0x11, 0xb1, 0x8c, 0x0a, 0x32, 0x85, 0xfb, 0xd2, 0xc6, 0x3f, 0x85, 0x93, 0x85,
	0xbf, 0x66, 0x9e, 0x3f, 0x9f, 0xc7, 0xdb, 0x28, 0xf3, 0xc2, 0x40, 0x69, 0x0d, 0xe4, 0x51, 0x93,
	0x1e, 0x73, 0x58, 0xcd, 0x51, 0x3d, 0xc0, 0x5f, 0xc0, 0xf1, 0x7c, 0x9b, 0x24, 0x2c, 0xca, 0xbc,
	0xfb, 0x6d, 0xb8, 0x0a, 0x94, 0xf6, 0x40, 0x1a, 0xb5, 0xe8, 0x51, 0x01, 0x5e, 0x70, 0x0c, 0xff,
	0x10, 0x7a, 0x11, 0x7b, 0x5b, 0x10, 0x3a, 0x82, 0xd0, 0x8d, 0xd8, 0xdb, 0x7c, 0xf1, 0x33, 0x80,
	0x94, 0xa5, 0x69, 0x18, 0x47, 0x7c, 0x93, 0xee, 0x40, 0x1e, 0xf5, 0x68, 0xaf, 0x40, 0xf4, 0x00,
	0x7f, 0x0d, 0x4a, 0xc0, 0x1e, 0xc3, 0x39, 0xf3, 0xb6, 0x51, 0xf8, 0xa7, 0x2d, 0xf3, 0xc2, 0x80,
	0x45, 0x59, 0xf8, 0x10, 0xb2, 0x44, 0xe9, 0x09, 0xf2, 0xab, 0x7c, 0x7d, 0x26, 0x96, 0xf5, 0x72,
	0x75, 0xf8, 0x4f, 0x09, 0xda, 0xf9, 0x2f, 0x83, 0x0f, 0xa1, 0xe3, 0xcc, 0xc6, 0x63, 0x42, 0x34,
	0x74, 0x80, 0x5f, 0x01, 0x2e, 0x1c, 0xef, 0x56, 0x77, 0xaf, 0xbc, 0xb1, 0x3a, 0xbe, 0x22, 0x48,
	0xc2, 0x9f, 0xc0, 0xcb, 0x3d, 0xdc, 0xd5, 0xa7, 0xc4, 0xba, 0x21, 0x14, 0xc9, 0x18, 0x43, 0x7f,
	0xa2, 0xea, 0x06, 0xd1, 0xbc, 0x4b, 0x62, 0x12, 0xaa, 0x8f, 0x51, 0x83, 0xa7, 0x29, 0x30, 0xcd,
	0xba, 0x35, 0x0d, 0x4b, 0xd5, 0x74, 0xf3, 0x12, 0x35, 0xf1, 0x73, 0x38, 0x29, 0xf0, 0x0b, 0x55,
	0xf3, 0x34, 0xd5, 0x55, 0x51, 0x0b, 0xff, 0x00, 0x9e, 0x17, 0xe0, 0x54, 0xfb, 0xca, 0x9b, 0xea,
	0xce, 0x54, 0x75, 0xc7, 0x57, 0xa8, 0x8d, 0x5f, 0xc3, 0xab, 0x1a, 0x5b, 0x75, 0x1c, 0xe2, 0x5e,
	0xcc, 0x4c, 0xcd, 0x20, 0xa8, 0x23, 0x4e, 0xed, 0xaa, 0xd4, 0x25, 0x1a, 0xea, 0x0e, 0xff, 0x21,
	0x41, 0x3b, 0x2f, 0x16, 0xfc, 0x0c, 0x8e, 0x67, 0xd1, 0x9b, 0x28, 0x7e, 0x1b, 0xe5, 0x00, 0x3a,
	0xc0, 0x5d, 0x68, 0xb2, 0x68, 0xe6, 0x20, 0x29, 0xb7, 0x2e, 0x2f, 0x90, 0xcc, 0xad, 0x87, 0x64,
	0x42, 0x51, 0x83, 0x5b, 0x01, 0xd3, 0x08, 0x6a, 0x72, 0xeb, 0x4d, 0x7c, 0x4d, 0x51, 0x4b, 0xf0,
	0x52, 0xe2, 0xa0, 0x76, 0x6e, 0x4d, 0xff, 0x80, 0x3a, 0xdc, 0x4a, 0xb6, 0x74, 0x86, 0xba, 0xdc,
	0xfa, 0xf3, 0xd2, 0xbd, 0x45, 0xbd, 0xdc, 0x1a, 0x9b, 0x08, 0xb8, 0x15, 0x66, 0xba, 0x8b, 0x0e,
	0xb9, 0xb5, 0xc9, 0x2e, 0x28, 0x3a, 0x12, 0xd6, 0xca, 0x36, 0xd0, 0x31, 0x3e, 0x82, 0x6e, 0x7e,
	0x9a, 0x5f, 0x7d, 0x85, 0x4e, 0x6a, 0xde, 0x6f, 0x10, 0x1a, 0x26, 0xd0, 0xdd, 0x95, 0x2a, 0xbf,
	0x9e, 0xe2, 0xf0, 0x3b, 0x08, 0x1d, 0xf0, 0x2f, 0xbd, 0x0d, 0xa3, 0x20, 0x7e, 0x9b, 0x22, 0x09,
	0x77, 0xa0, 0x31, 0xf5, 0xe7, 0xf9, 0x07, 0x84, 0xb6, 0x1f, 0xa0, 0x06, 0x06, 0x68, 0x87, 0xf6,
	0x32, 0x8e, 0x18, 0x6a, 0xf2, 0xdf, 0x42, 0x8d, 0x82, 0x24, 0x0e, 0x03, 0xcf, 0xf5, 0xef, 0x57,
	0x2c, 0x43, 0x2d, 0x7e, 0x23, 0x3b, 0x2c, 0xa7, 0xb5, 0x87, 0xff, 0x92, 0x00, 0xaa, 0xda, 0xc6,
	0x9f, 0xc3, 0x0b, 0x4a, 0x2e, 0x75, 0xcb, 0xf4, 0x66, 0xa6, 0x6e, 0xea, 0xae, 0xae, 0x1a, 0xfa,
	0x1d, 0xd1, 0xd0, 0x7f, 0x76, 0x7f, 0x12, 0x4f, 0x5c, 0x52, 0xae, 0x4d, 0xeb, 0xd6, 0x44, 0x07,
	0xf8, 0x18, 0x7a, 0x3b, 0x8c, 0x5f, 0x6e, 0xe5, 0x92, 0x19, 0x92, 0x6b, 0xee, 0x35, 0xbf, 0xe6,
	0xca, 0x75, 0x6f, 0x51, 0xb3, 0xe6, 0x8e, 0x4d, 0xd4, 0xc2, 0x9f, 0x82, 0x52, 0xb8, 0x86, 0x7e,
	0x43, 0xbc, 0x1b, 0x42, 0xf5, 0x89, 0x3e, 0x56, 0x5d, 0xdd, 0x32, 0xd1, 0xa8, 0xb6, 0xb9, 0xed,
	0x52, 0xcf, 0xb0, 0xc6, 0xe8, 0xe7, 0xb8, 0x0f, 0x50, 0x60, 0x1a, 0xb9, 0x41, 0xdf, 0x0e, 0x47,
	0xd0, 0xe6, 0x5f, 0xa4, 0x07, 0xb8, 0x0f, 0xf2, 0x32, 0x14, 0xc2, 0xd4, 0xa4, 0xf2, 0x32, 0xe4,
	0xfe, 0x2a, 0x16, 0x6a, 0xd3, 0xa4, 0xf2, 0x2a, 0x1e, 0xfe, 0x45, 0x82, 0xbe, 0xbd, 0xf2, 0xdf,
	0xb1, 0x24, 0xef, 0x87, 0xec, 0x1d, 0xef, 0xc1, 0x8d, 0x40, 0x78, 0x97, 0x49, 0x03, 0x69, 0xd4,
	0x10, 0xaa, 0x21, 0x28, 0xf8, 0xd7, 0x70, 0x54, 0xef, 0x76, 0x45, 0x1e, 0x48, 0xa3, 0xc3, 0x73,
	0x54, 0xc9, 0x46, 0xbe, 0x2f, 0x3d, 0xac, 0x35, 0x3f, 0xfe, 0x05, 0x74, 0x76, 0xfc, 0xc6, 0x07,
	0xf8, 0x3b, 0xc2, 0xf0, 0x6f, 0xc7, 0xd0, 0x73, 0xd9, 0x8a, 0xad, 0x59, 0x96, 0xbc, 0xc3, 0x18,
	0x9a, 0x59, 0xb8, 0x66, 0xe2, 0x03, 0x1a, 0x54, 0xd8, 0xf8, 0x0c, 0x5a, 0x2b, 0xf6, 0xc8, 0x56,
	0x85, 0x66, 0x7e, 0x52, 0xe5, 0x2a, 0xe3, 0x4e, 0x0d, 0x4e, 0xa0, 0x39, 0x0f, 0x9f, 0x97, 0x2a,
	0x9b, 0x0b, 0xe5, 0xeb, 0x27, 0x23, 0xf6, 0xe5, 0x55, 0x81, 0xce, 0x23, 0x4b, 0xd2, 0x9d, 0x32,
	0xf6, 0xe8, 0xce, 0xc5, 0x5f, 0xd7, 0x84, 0xb7, 0x25, 0xf2, 0x7d, 0xfa, 0x54, 0xbe, 0x27, 0x14,
	0xb7, 0x0f, 0x72, 0x9c, 0x2a, 0x6d, 0x91, 0x4e, 0x8e, 0x53, 0xfc, 0x0d, 0x40, 0x3a, 0x4f, 0x18,
	0x8b, 0xbc, 0xad, 0x17, 0x2a, 0x9d, 0x0f, 0xe7, 0x72, 0x04, 0x6b, 0xa6, 0xd3, 0x6e, 0x5a, 0x58,
	0xfc, 0x12, 0xd2, 0x2c, 0x4e, 0x98, 0x90, 0xc1, 0x0f, 0x5c, 0x82, 0xc3, 0x09, 0x34, 0xe7, 0xbd,
	0x27, 0x9e, 0xbd, 0xff, 0x45, 0x3c, 0xe1, 0x63, 0xe2, 0x89, 0x5f, 0x40, 0x8b, 0x3d, 0xb2, 0x28,
	0x53, 0x0e, 0x45, 0x51, 0xe5, 0x0e, 0x9e, 0xed, 0x4f, 0x97, 0xa3, 0x81, 0x34, 0xea, 0x9f, 0xff,
	0xe8, 0xa9, 0x53, 0x56, 0xad, 0xf7, 0xcd, 0x93, 0x8d, 0xf7, 0x7d, 0xc3, 0xe6, 0x78, 0x20, 0x7d,
	0x77, 0xd8, 0xa8, 0x70, 0x52, 0xd6, 0x70, 0x5e, 0xd6, 0x0a, 0x12, 0x95, 0xa7, 0x54, 0x47, 0xd8,
	0x2f, 0x7b, 0xda, 0xdf, 0xec, 0xb7, 0xc1, 0x67, 0x00, 0x2c, 0x49, 0xe2, 0xc4, 0x9b, 0xc7, 0x01,
	0x53, 0xfa, 0xa2, 0x0f, 0x7a, 0x02, 0x19, 0xc7, 0x81, 0x28, 0x90, 0x35, 0x4b, 0x53, 0x7f, 0xc1,
	0x94, 0x93, 0x81, 0xc4, 0x0b, 0xa4, 0x70, 0xc5, 0xde, 0x09, 0x4b, 0x59, 0x34, 0x67, 0xde, 0x7c,
	0xe9, 0x47, 0x0b, 0xa6, 0x3c, 0xfb, 0xce, 0xde, 0x05, 0x61, 0x2c, 0xd6, 0x69, 0x7f, 0xb3, 0xe7,
	0xe3, 0x5f, 0x42, 0xf7, 0x21, 0x5d, 0x78, 0x61, 0xf4, 0x10, 0x2b, 0x58, 0xc4, 0x3e, 0xab, 0x62,
	0x27, 0xce, 0xa5, 0x1e, 0x3d, 0xc4, 0xb4, 0xf3, 0x90, 0x2e, 0xb8, 0x31, 0xbc, 0x82, 0x96, 0xa8,
	0x77, 0x2e, 0x03, 0x06, 0xb9, 0x21, 0x86, 0x67, 0x5a, 0x26, 0x41, 0x07, 0x95, 0xaf, 0x9b, 0x13,
	0x0b, 0x49, 0x95, 0x7f, 0xab, 0x52, 0x13, 0xc9, 0xf8, 0x04, 0x0e, 0x73, 0x9f, 0x50, 0x6a, 0x51,
	0xd4, 0x18, 0xfe, 0x55, 0x2e, 0x47, 0x07, 0x86, 0xbe, 0x61, 0x8d, 0x55, 0x83, 0xd4, 0x34, 0x8e,
	0xf3, 0x73, 0x8c, 0x98, 0x42, 0xe5, 0xea, 0x80, 0x98, 0x24, 0x15, 0x30, 0xa1, 0x62, 0xa0, 0x54,
	0x80, 0x46, 0xc4, 0x5c, 0xa9, 0x80, 0x6b, 0x4b, 0x8c, 0x97, 0x5a, 0x0e, 0x47, 0x4c, 0x99, 0x3a,
	0x20, 0x86, 0x4d, 0x05, 0xd0, 0x99, 0x98, 0x39, 0x15, 0x70, 0x77, 0x25, 0x46, 0x4f, 0x1d, 0x10,
	0x13, 0xa8, 0x02, 0x74, 0x57, 0x0c, 0xa2, 0x0a, 0xb0, 0x5d, 0x31, 0x8f, 0x6a, 0x80, 0x21, 0xc6,
	0xd2, 0x31, 0xf4, 0x0a, 0x40, 0xcc, 0xa5, 0x9a, 0xcb, 0x07, 0xd3, 0x9b, 0xda, 0x60, 0x7a, 0x01,
	0xc8, 0x36, 0x54, 0x77, 0x62, 0xd1, 0xe9, 0xfe, 0xe5, 0x94, 0xa8, 0x3d, 0x46, 0x12, 0x46, 0x70,
	0x54, 0x02, 0x53, 0x75, 0x8c, 0xe4, 0x3d, 0x44, 0xb7, 0x1c, 0xd4, 0xd8, 0x4b, 0xa5, 0x9a, 0x1a,
	0xb5, 0x74, 0x0d, 0x35, 0x87, 0x1e, 0x74, 0x77, 0x2d, 0xcf, 0x19, 0xce, 0x98, 0x12, 0x62, 0xce,
	0xf4, 0xda, 0x66, 0x75, 0x54, 0x23, 0xce, 0xb5, 0x6b, 0xd9, 0x48, 0xe2, 0x13, 0xb3, 0x44, 0x5d,
	0xf5, 0xc2, 0x20, 0x6e, 0xfe, 0x22, 0x29, 0x41, 0xfb, 0x8a, 0x17, 0x46, 0x63, 0x48, 0xa1, 0x25,
	0xc4, 0x41, 0x2c, 0xba, 0x16, 0x25, 0xde, 0x85, 0xa1, 0xdf, 0xdd, 0xa9, 0x54, 0xcb, 0x27, 0x59,
	0x8e, 0xf1, 0x23, 0x4a, 0x62, 0x2b, 0xe1, 0x5e, 0x5a, 0xd6, 0xa5, 0x41, 0x6c, 0x43, 0xfd, 0x63,
	0xfe, 0x29, 0x39, 0xaa, 0x4e, 0xd5, 0x3b, 0xcb, 0x44, 0x8d, 0xe1, 0xbf, 0xff, 0xef, 0xc6, 0x68,
	0xcd, 0xb7, 0x5d, 0x8a, 0xee, 0x79, 0x7b, 0xf4, 0xf7, 0x3b, 0x97, 0xab, 0x04, 0x7f, 0xb0, 0xd6,
	0xfe, 0x01, 0x68, 0x51, 0xfe, 0x84, 0x2d, 0x9e, 0x93, 0xe7, 0xf0, 0xb2, 0x5a, 0xf6, 0x36, 0x7e,
	0xe2, 0xaf, 0x59, 0xc6, 0x92, 0x54, 0x91, 0x07, 0x8d, 0x51, 0x8b, 0x3e, 0x2f, 0x99, 0x76, 0xb9,
	0x84, 0xaf, 0x61, 0xb8, 0x0e, 0x57, 0xab, 0x30, 0x65, 0xf3, 0x38, 0x0a, 0x52, 0x2f, 0x0d, 0xb9,
	0x92, 0x6c, 0x12, 0xf6, 0x18, 0xc6, 0xdb, 0x74, 0xb7, 0x55, 0x43, 0x08, 0xd2, 0x8f, 0xeb, 0x4c,
	0x87, 0x13, 0xed, 0x82, 0x57, 0x1c, 0xe0, 0x67, 0x42, 0x8c, 0xf6, 0x22, 0x9b, 0xe2, 0x59, 0xdd,
	0xdf, 0xec, 0x13, 0xbf, 0x85, 0xd7, 0xef, 0x11, 0xeb, 0xc7, 0x6d, 0x89, 0xe3, 0x2a, 0xfb, 0x31,
	0xd5, 0x99, 0x87, 0x03, 0xe8, 0x14, 0xb2, 0x84, 0x5f, 0x42, 0x5b, 0x68, 0xd7, 0xee, 0xed, 0xd0,
	0xe2, 0x32, 0x15, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x42, 0xcf, 0x89, 0x56, 0x87, 0x0d, 0x00,
	0x00,
}
