// Code generated by protoc-gen-go.
// source: blizzard/telemetry/wtcg/client/client.proto
// DO NOT EDIT!

/*
Package blizzard_telemetry_wtcg_client is a generated protocol buffer package.

It is generated from these files:
	blizzard/telemetry/wtcg/client/client.proto

It has these top-level messages:
	DeckCopied
	DeviceInfo
	NetworkError
	Player
	PresenceChanged
	PresenceStatus
	ReturningPlayerDeckNotCreated
*/
package blizzard_telemetry_wtcg_client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ref: Blizzard.Telemetry.WTCG.Client.DeviceInfo/ConnectionType
type DeviceInfo_ConnectionType int32

const (
	DeviceInfo_WIRED    DeviceInfo_ConnectionType = 1
	DeviceInfo_WIFI     DeviceInfo_ConnectionType = 2
	DeviceInfo_CELLULAR DeviceInfo_ConnectionType = 3
	DeviceInfo_UNKNOWN  DeviceInfo_ConnectionType = 4
)

var DeviceInfo_ConnectionType_name = map[int32]string{
	1: "WIRED",
	2: "WIFI",
	3: "CELLULAR",
	4: "UNKNOWN",
}
var DeviceInfo_ConnectionType_value = map[string]int32{
	"WIRED":    1,
	"WIFI":     2,
	"CELLULAR": 3,
	"UNKNOWN":  4,
}

func (x DeviceInfo_ConnectionType) Enum() *DeviceInfo_ConnectionType {
	p := new(DeviceInfo_ConnectionType)
	*p = x
	return p
}
func (x DeviceInfo_ConnectionType) String() string {
	return proto.EnumName(DeviceInfo_ConnectionType_name, int32(x))
}
func (x *DeviceInfo_ConnectionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceInfo_ConnectionType_value, data, "DeviceInfo_ConnectionType")
	if err != nil {
		return err
	}
	*x = DeviceInfo_ConnectionType(value)
	return nil
}
func (DeviceInfo_ConnectionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// ref: Blizzard.Telemetry.WTCG.Client.DeviceInfo/OSCategory
type DeviceInfo_OSCategory int32

const (
	DeviceInfo_WINDOWS DeviceInfo_OSCategory = 1
	DeviceInfo_MAC     DeviceInfo_OSCategory = 2
	DeviceInfo_IOS     DeviceInfo_OSCategory = 3
	DeviceInfo_ANDROID DeviceInfo_OSCategory = 4
)

var DeviceInfo_OSCategory_name = map[int32]string{
	1: "WINDOWS",
	2: "MAC",
	3: "IOS",
	4: "ANDROID",
}
var DeviceInfo_OSCategory_value = map[string]int32{
	"WINDOWS": 1,
	"MAC":     2,
	"IOS":     3,
	"ANDROID": 4,
}

func (x DeviceInfo_OSCategory) Enum() *DeviceInfo_OSCategory {
	p := new(DeviceInfo_OSCategory)
	*p = x
	return p
}
func (x DeviceInfo_OSCategory) String() string {
	return proto.EnumName(DeviceInfo_OSCategory_name, int32(x))
}
func (x *DeviceInfo_OSCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceInfo_OSCategory_value, data, "DeviceInfo_OSCategory")
	if err != nil {
		return err
	}
	*x = DeviceInfo_OSCategory(value)
	return nil
}
func (DeviceInfo_OSCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

// ref: Blizzard.Telemetry.WTCG.Client.DeviceInfo/ScreenCategory
type DeviceInfo_ScreenCategory int32

const (
	DeviceInfo_PHONE       DeviceInfo_ScreenCategory = 1
	DeviceInfo_MINI_TABLET DeviceInfo_ScreenCategory = 2
	DeviceInfo_TABLET      DeviceInfo_ScreenCategory = 3
	DeviceInfo_PC          DeviceInfo_ScreenCategory = 4
)

var DeviceInfo_ScreenCategory_name = map[int32]string{
	1: "PHONE",
	2: "MINI_TABLET",
	3: "TABLET",
	4: "PC",
}
var DeviceInfo_ScreenCategory_value = map[string]int32{
	"PHONE":       1,
	"MINI_TABLET": 2,
	"TABLET":      3,
	"PC":          4,
}

func (x DeviceInfo_ScreenCategory) Enum() *DeviceInfo_ScreenCategory {
	p := new(DeviceInfo_ScreenCategory)
	*p = x
	return p
}
func (x DeviceInfo_ScreenCategory) String() string {
	return proto.EnumName(DeviceInfo_ScreenCategory_name, int32(x))
}
func (x *DeviceInfo_ScreenCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceInfo_ScreenCategory_value, data, "DeviceInfo_ScreenCategory")
	if err != nil {
		return err
	}
	*x = DeviceInfo_ScreenCategory(value)
	return nil
}
func (DeviceInfo_ScreenCategory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

// ref: Blizzard.Telemetry.WTCG.Client.NetworkError/ErrorType
type NetworkError_ErrorType int32

const (
	NetworkError_PRIVATE_SERVER                NetworkError_ErrorType = 1
	NetworkError_SERVICE_UNAVAILABLE           NetworkError_ErrorType = 2
	NetworkError_PEER_UNAVAILABLE              NetworkError_ErrorType = 3
	NetworkError_TIMEOUT_DEFERRED_RESPONSE     NetworkError_ErrorType = 4
	NetworkError_TIMEOUT_NOT_DEFERRED_RESPONSE NetworkError_ErrorType = 5
	NetworkError_REQUEST_ERROR                 NetworkError_ErrorType = 6
	NetworkError_OTHER_UNKNOWN                 NetworkError_ErrorType = 7
)

var NetworkError_ErrorType_name = map[int32]string{
	1: "PRIVATE_SERVER",
	2: "SERVICE_UNAVAILABLE",
	3: "PEER_UNAVAILABLE",
	4: "TIMEOUT_DEFERRED_RESPONSE",
	5: "TIMEOUT_NOT_DEFERRED_RESPONSE",
	6: "REQUEST_ERROR",
	7: "OTHER_UNKNOWN",
}
var NetworkError_ErrorType_value = map[string]int32{
	"PRIVATE_SERVER":                1,
	"SERVICE_UNAVAILABLE":           2,
	"PEER_UNAVAILABLE":              3,
	"TIMEOUT_DEFERRED_RESPONSE":     4,
	"TIMEOUT_NOT_DEFERRED_RESPONSE": 5,
	"REQUEST_ERROR":                 6,
	"OTHER_UNKNOWN":                 7,
}

func (x NetworkError_ErrorType) Enum() *NetworkError_ErrorType {
	p := new(NetworkError_ErrorType)
	*p = x
	return p
}
func (x NetworkError_ErrorType) String() string {
	return proto.EnumName(NetworkError_ErrorType_name, int32(x))
}
func (x *NetworkError_ErrorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NetworkError_ErrorType_value, data, "NetworkError_ErrorType")
	if err != nil {
		return err
	}
	*x = NetworkError_ErrorType(value)
	return nil
}
func (NetworkError_ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// ref: Blizzard.Telemetry.WTCG.Client.DeckCopied
type DeckCopied struct {
	Player           *Player     `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	DeviceInfo       *DeviceInfo `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	DeckId           *int64      `protobuf:"varint,3,opt,name=deck_id,json=deckId" json:"deck_id,omitempty"`
	DeckHash         *string     `protobuf:"bytes,4,opt,name=deck_hash,json=deckHash" json:"deck_hash,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *DeckCopied) Reset()                    { *m = DeckCopied{} }
func (m *DeckCopied) String() string            { return proto.CompactTextString(m) }
func (*DeckCopied) ProtoMessage()               {}
func (*DeckCopied) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeckCopied) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *DeckCopied) GetDeviceInfo() *DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *DeckCopied) GetDeckId() int64 {
	if m != nil && m.DeckId != nil {
		return *m.DeckId
	}
	return 0
}

func (m *DeckCopied) GetDeckHash() string {
	if m != nil && m.DeckHash != nil {
		return *m.DeckHash
	}
	return ""
}

// ref: Blizzard.Telemetry.WTCG.Client.DeviceInfo
type DeviceInfo struct {
	Os                      *DeviceInfo_OSCategory     `protobuf:"varint,1,opt,name=os,enum=blizzard.telemetry.wtcg.client.DeviceInfo_OSCategory,def=1" json:"os,omitempty"`
	OsVersion               *string                    `protobuf:"bytes,2,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	Model                   *string                    `protobuf:"bytes,3,opt,name=model" json:"model,omitempty"`
	Screen                  *DeviceInfo_ScreenCategory `protobuf:"varint,4,opt,name=screen,enum=blizzard.telemetry.wtcg.client.DeviceInfo_ScreenCategory,def=1" json:"screen,omitempty"`
	ConnectionType          *DeviceInfo_ConnectionType `protobuf:"varint,5,opt,name=connection_type,json=connectionType,enum=blizzard.telemetry.wtcg.client.DeviceInfo_ConnectionType,def=1" json:"connection_type,omitempty"`
	DroidTextureCompression *string                    `protobuf:"bytes,6,opt,name=droid_texture_compression,json=droidTextureCompression" json:"droid_texture_compression,omitempty"`
	XXX_unrecognized        []byte                     `json:"-"`
}

func (m *DeviceInfo) Reset()                    { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string            { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()               {}
func (*DeviceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_DeviceInfo_Os DeviceInfo_OSCategory = DeviceInfo_WINDOWS
const Default_DeviceInfo_Screen DeviceInfo_ScreenCategory = DeviceInfo_PHONE
const Default_DeviceInfo_ConnectionType DeviceInfo_ConnectionType = DeviceInfo_WIRED

func (m *DeviceInfo) GetOs() DeviceInfo_OSCategory {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return Default_DeviceInfo_Os
}

func (m *DeviceInfo) GetOsVersion() string {
	if m != nil && m.OsVersion != nil {
		return *m.OsVersion
	}
	return ""
}

func (m *DeviceInfo) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *DeviceInfo) GetScreen() DeviceInfo_ScreenCategory {
	if m != nil && m.Screen != nil {
		return *m.Screen
	}
	return Default_DeviceInfo_Screen
}

func (m *DeviceInfo) GetConnectionType() DeviceInfo_ConnectionType {
	if m != nil && m.ConnectionType != nil {
		return *m.ConnectionType
	}
	return Default_DeviceInfo_ConnectionType
}

func (m *DeviceInfo) GetDroidTextureCompression() string {
	if m != nil && m.DroidTextureCompression != nil {
		return *m.DroidTextureCompression
	}
	return ""
}

// ref: Blizzard.Telemetry.WTCG.Client.NetworkError
type NetworkError struct {
	DeviceInfo       *DeviceInfo             `protobuf:"bytes,1,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	ErrorType        *NetworkError_ErrorType `protobuf:"varint,2,opt,name=error_type,json=errorType,enum=blizzard.telemetry.wtcg.client.NetworkError_ErrorType,def=1" json:"error_type,omitempty"`
	Description      *string                 `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	ErrorCode        *int32                  `protobuf:"varint,4,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *NetworkError) Reset()                    { *m = NetworkError{} }
func (m *NetworkError) String() string            { return proto.CompactTextString(m) }
func (*NetworkError) ProtoMessage()               {}
func (*NetworkError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_NetworkError_ErrorType NetworkError_ErrorType = NetworkError_PRIVATE_SERVER

func (m *NetworkError) GetDeviceInfo() *DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *NetworkError) GetErrorType() NetworkError_ErrorType {
	if m != nil && m.ErrorType != nil {
		return *m.ErrorType
	}
	return Default_NetworkError_ErrorType
}

func (m *NetworkError) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *NetworkError) GetErrorCode() int32 {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return 0
}

// ref: Blizzard.Telemetry.WTCG.Client.Player
type Player struct {
	BattleNetIdLo    *int64  `protobuf:"varint,1,opt,name=battle_net_id_lo,json=battleNetIdLo" json:"battle_net_id_lo,omitempty"`
	GameAccountId    *int64  `protobuf:"varint,2,opt,name=game_account_id,json=gameAccountId" json:"game_account_id,omitempty"`
	BnetRegion       *string `protobuf:"bytes,3,opt,name=bnet_region,json=bnetRegion" json:"bnet_region,omitempty"`
	Locale           *string `protobuf:"bytes,4,opt,name=locale" json:"locale,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Player) GetBattleNetIdLo() int64 {
	if m != nil && m.BattleNetIdLo != nil {
		return *m.BattleNetIdLo
	}
	return 0
}

func (m *Player) GetGameAccountId() int64 {
	if m != nil && m.GameAccountId != nil {
		return *m.GameAccountId
	}
	return 0
}

func (m *Player) GetBnetRegion() string {
	if m != nil && m.BnetRegion != nil {
		return *m.BnetRegion
	}
	return ""
}

func (m *Player) GetLocale() string {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return ""
}

// ref: Blizzard.Telemetry.WTCG.Client.PresenceChanged
type PresenceChanged struct {
	Player                *Player         `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	DeviceInfo            *DeviceInfo     `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	NewPresenceStatus     *PresenceStatus `protobuf:"bytes,3,opt,name=new_presence_status,json=newPresenceStatus" json:"new_presence_status,omitempty"`
	PrevPresenceStatus    *PresenceStatus `protobuf:"bytes,4,opt,name=prev_presence_status,json=prevPresenceStatus" json:"prev_presence_status,omitempty"`
	MillisecondsSincePrev *int64          `protobuf:"varint,5,opt,name=milliseconds_since_prev,json=millisecondsSincePrev" json:"milliseconds_since_prev,omitempty"`
	XXX_unrecognized      []byte          `json:"-"`
}

func (m *PresenceChanged) Reset()                    { *m = PresenceChanged{} }
func (m *PresenceChanged) String() string            { return proto.CompactTextString(m) }
func (*PresenceChanged) ProtoMessage()               {}
func (*PresenceChanged) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PresenceChanged) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *PresenceChanged) GetDeviceInfo() *DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *PresenceChanged) GetNewPresenceStatus() *PresenceStatus {
	if m != nil {
		return m.NewPresenceStatus
	}
	return nil
}

func (m *PresenceChanged) GetPrevPresenceStatus() *PresenceStatus {
	if m != nil {
		return m.PrevPresenceStatus
	}
	return nil
}

func (m *PresenceChanged) GetMillisecondsSincePrev() int64 {
	if m != nil && m.MillisecondsSincePrev != nil {
		return *m.MillisecondsSincePrev
	}
	return 0
}

// ref: Blizzard.Telemetry.WTCG.Client.PresenceStatus
type PresenceStatus struct {
	PresenceId       *int64 `protobuf:"varint,1,opt,name=presence_id,json=presenceId" json:"presence_id,omitempty"`
	PresenceSubId    *int64 `protobuf:"varint,2,opt,name=presence_sub_id,json=presenceSubId" json:"presence_sub_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PresenceStatus) Reset()                    { *m = PresenceStatus{} }
func (m *PresenceStatus) String() string            { return proto.CompactTextString(m) }
func (*PresenceStatus) ProtoMessage()               {}
func (*PresenceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PresenceStatus) GetPresenceId() int64 {
	if m != nil && m.PresenceId != nil {
		return *m.PresenceId
	}
	return 0
}

func (m *PresenceStatus) GetPresenceSubId() int64 {
	if m != nil && m.PresenceSubId != nil {
		return *m.PresenceSubId
	}
	return 0
}

// ref: Blizzard.Telemetry.WTCG.Client.ReturningPlayerDeckNotCreated
type ReturningPlayerDeckNotCreated struct {
	Player           *Player `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Abgroup          *uint32 `protobuf:"varint,2,opt,name=abgroup" json:"abgroup,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReturningPlayerDeckNotCreated) Reset()                    { *m = ReturningPlayerDeckNotCreated{} }
func (m *ReturningPlayerDeckNotCreated) String() string            { return proto.CompactTextString(m) }
func (*ReturningPlayerDeckNotCreated) ProtoMessage()               {}
func (*ReturningPlayerDeckNotCreated) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReturningPlayerDeckNotCreated) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *ReturningPlayerDeckNotCreated) GetAbgroup() uint32 {
	if m != nil && m.Abgroup != nil {
		return *m.Abgroup
	}
	return 0
}

func init() {
	proto.RegisterType((*DeckCopied)(nil), "blizzard.telemetry.wtcg.client.DeckCopied")
	proto.RegisterType((*DeviceInfo)(nil), "blizzard.telemetry.wtcg.client.DeviceInfo")
	proto.RegisterType((*NetworkError)(nil), "blizzard.telemetry.wtcg.client.NetworkError")
	proto.RegisterType((*Player)(nil), "blizzard.telemetry.wtcg.client.Player")
	proto.RegisterType((*PresenceChanged)(nil), "blizzard.telemetry.wtcg.client.PresenceChanged")
	proto.RegisterType((*PresenceStatus)(nil), "blizzard.telemetry.wtcg.client.PresenceStatus")
	proto.RegisterType((*ReturningPlayerDeckNotCreated)(nil), "blizzard.telemetry.wtcg.client.ReturningPlayerDeckNotCreated")
	proto.RegisterEnum("blizzard.telemetry.wtcg.client.DeviceInfo_ConnectionType", DeviceInfo_ConnectionType_name, DeviceInfo_ConnectionType_value)
	proto.RegisterEnum("blizzard.telemetry.wtcg.client.DeviceInfo_OSCategory", DeviceInfo_OSCategory_name, DeviceInfo_OSCategory_value)
	proto.RegisterEnum("blizzard.telemetry.wtcg.client.DeviceInfo_ScreenCategory", DeviceInfo_ScreenCategory_name, DeviceInfo_ScreenCategory_value)
	proto.RegisterEnum("blizzard.telemetry.wtcg.client.NetworkError_ErrorType", NetworkError_ErrorType_name, NetworkError_ErrorType_value)
}

func init() { proto.RegisterFile("blizzard/telemetry/wtcg/client/client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xe3, 0xfc, 0x34, 0x27, 0xdb, 0xd4, 0x3b, 0x5b, 0x68, 0x56, 0xa8, 0x6c, 0xc9, 0xc5,
	0x52, 0x81, 0x94, 0x4a, 0x95, 0x58, 0x41, 0x2f, 0x10, 0xc1, 0x99, 0x55, 0xad, 0x4d, 0xed, 0x30,
	0x4e, 0x5b, 0xb8, 0xc1, 0x38, 0xf6, 0xd9, 0xd4, 0xaa, 0xeb, 0x89, 0xc6, 0x93, 0x96, 0xec, 0x63,
	0x70, 0xc5, 0x93, 0x70, 0xc5, 0x3b, 0xc0, 0x23, 0xa1, 0x19, 0x3b, 0x69, 0xd3, 0x45, 0x94, 0x05,
	0x2e, 0xb8, 0x49, 0x66, 0xbe, 0x73, 0xce, 0xf7, 0x7d, 0x33, 0xe7, 0x68, 0x0c, 0x9f, 0x4e, 0xd2,
	0xe4, 0xcd, 0x9b, 0x50, 0xc4, 0x07, 0x12, 0x53, 0xbc, 0x42, 0x29, 0x16, 0x07, 0x37, 0x32, 0x9a,
	0x1e, 0x44, 0x69, 0x82, 0x99, 0x2c, 0xff, 0x7a, 0x33, 0xc1, 0x25, 0x27, 0x1f, 0x2e, 0x93, 0x7b,
	0xab, 0xe4, 0x9e, 0x4a, 0xee, 0x15, 0x59, 0xdd, 0xdf, 0x0c, 0x80, 0x01, 0x46, 0x97, 0x36, 0x9f,
	0x25, 0x18, 0x93, 0x2f, 0xa1, 0x3e, 0x4b, 0xc3, 0x05, 0x8a, 0x8e, 0xb1, 0x67, 0xec, 0xb7, 0x0e,
	0x9f, 0xf7, 0xfe, 0xba, 0xbe, 0x37, 0xd2, 0xd9, 0xac, 0xac, 0x22, 0xaf, 0xa0, 0x15, 0xe3, 0x75,
	0x12, 0x61, 0x90, 0x64, 0xaf, 0x79, 0xa7, 0xa2, 0x49, 0x3e, 0x79, 0x88, 0x64, 0xa0, 0x4b, 0x9c,
	0xec, 0x35, 0x67, 0x10, 0xaf, 0xd6, 0x64, 0x07, 0x1a, 0x31, 0x46, 0x97, 0x41, 0x12, 0x77, 0xcc,
	0x3d, 0x63, 0xdf, 0x64, 0x75, 0xb5, 0x75, 0x62, 0xf2, 0x01, 0x34, 0x75, 0xe0, 0x22, 0xcc, 0x2f,
	0x3a, 0xd5, 0x3d, 0x63, 0xbf, 0xc9, 0x36, 0x14, 0x70, 0x1c, 0xe6, 0x17, 0xdd, 0xdf, 0xab, 0xea,
	0x44, 0x2b, 0x12, 0x17, 0x2a, 0x3c, 0xd7, 0xa7, 0x69, 0x1f, 0x7e, 0xf6, 0xf7, 0x8d, 0xf4, 0x3c,
	0xdf, 0x0e, 0x25, 0x4e, 0xb9, 0x58, 0x1c, 0x35, 0xce, 0x1d, 0x77, 0xe0, 0x9d, 0xfb, 0xac, 0xc2,
	0x73, 0xb2, 0x0b, 0xc0, 0xf3, 0xe0, 0x1a, 0x45, 0x9e, 0xf0, 0x4c, 0x1f, 0xb0, 0xc9, 0x9a, 0x3c,
	0x3f, 0x2b, 0x00, 0xb2, 0x0d, 0xb5, 0x2b, 0x1e, 0x63, 0xaa, 0x1d, 0x37, 0x59, 0xb1, 0x21, 0xdf,
	0x42, 0x3d, 0x8f, 0x04, 0x62, 0xa6, 0xdd, 0xb6, 0x0f, 0xbf, 0x78, 0x07, 0x23, 0xbe, 0x2e, 0x5c,
	0x99, 0xa9, 0x8d, 0x8e, 0x3d, 0x97, 0xb2, 0x92, 0x8f, 0x24, 0xb0, 0x15, 0xf1, 0x2c, 0xc3, 0x48,
	0x26, 0x3c, 0x0b, 0xe4, 0x62, 0x86, 0x9d, 0xda, 0x3b, 0x4b, 0xd8, 0x2b, 0x86, 0xf1, 0x62, 0x86,
	0x47, 0xb5, 0x73, 0x87, 0xd1, 0x01, 0x6b, 0x47, 0x6b, 0x30, 0x39, 0x82, 0xa7, 0xb1, 0xe0, 0x49,
	0x1c, 0x48, 0xfc, 0x51, 0xce, 0x05, 0x06, 0x11, 0xbf, 0x9a, 0x09, 0xcc, 0xf5, 0x45, 0xd4, 0xf5,
	0x71, 0x77, 0x74, 0xc2, 0xb8, 0x88, 0xdb, 0xb7, 0xe1, 0xee, 0x57, 0xd0, 0x5e, 0x17, 0x21, 0x4d,
	0x28, 0x64, 0x2c, 0x83, 0x6c, 0x40, 0xf5, 0xdc, 0x79, 0xe9, 0x58, 0x15, 0xf2, 0x08, 0x36, 0x6c,
	0x3a, 0x1c, 0x9e, 0x0e, 0xfb, 0xcc, 0x32, 0x49, 0x0b, 0x1a, 0xa7, 0xee, 0x2b, 0xd7, 0x3b, 0x77,
	0xad, 0x6a, 0xf7, 0x73, 0x80, 0xdb, 0x96, 0xa8, 0x50, 0xd9, 0x14, 0xcb, 0x20, 0x0d, 0x30, 0x4f,
	0xfa, 0xb6, 0x55, 0x51, 0x0b, 0xc7, 0xf3, 0x8b, 0xca, 0xbe, 0x3b, 0x60, 0x9e, 0x33, 0xb0, 0xaa,
	0x4a, 0x7b, 0xfd, 0x0e, 0x95, 0xb6, 0xbe, 0x45, 0xcb, 0x20, 0x5b, 0xd0, 0x3a, 0x71, 0x5c, 0x27,
	0x18, 0xf7, 0xbf, 0x1e, 0xd2, 0xb1, 0x55, 0x21, 0x00, 0xf5, 0x72, 0x6d, 0x92, 0x3a, 0x54, 0x46,
	0xb6, 0x55, 0xed, 0xfe, 0x6a, 0xc2, 0x23, 0x17, 0xe5, 0x0d, 0x17, 0x97, 0x54, 0x08, 0xfe, 0xd6,
	0x98, 0x1b, 0xff, 0x6a, 0xcc, 0x11, 0x00, 0x15, 0x6b, 0xd1, 0xbd, 0x8a, 0xee, 0xde, 0x8b, 0x87,
	0xb8, 0xee, 0xda, 0xe9, 0xe9, 0x5f, 0xdd, 0xba, 0xf6, 0x88, 0x39, 0x67, 0xfd, 0x31, 0x0d, 0x7c,
	0xca, 0xce, 0x28, 0x63, 0x4d, 0x5c, 0x86, 0xc8, 0x9e, 0xf2, 0x9c, 0x47, 0x22, 0x99, 0xa9, 0x1e,
	0x94, 0xf3, 0x79, 0x17, 0x52, 0xa3, 0x5d, 0x18, 0x89, 0x78, 0x8c, 0x7a, 0x52, 0x6b, 0x25, 0x81,
	0xcd, 0x63, 0xec, 0xfe, 0x62, 0x40, 0x73, 0xa5, 0x44, 0x08, 0xdc, 0xd3, 0xb2, 0x0c, 0xb2, 0x03,
	0x4f, 0xd4, 0xda, 0xb1, 0x69, 0x70, 0xea, 0xf6, 0xcf, 0xfa, 0xce, 0x50, 0xdd, 0xa4, 0x55, 0x21,
	0xdb, 0x60, 0x8d, 0x28, 0x65, 0x6b, 0xa8, 0x49, 0x76, 0xe1, 0xe9, 0xd8, 0x39, 0xa1, 0xde, 0xe9,
	0x38, 0x18, 0xd0, 0x97, 0x94, 0x31, 0x3a, 0x08, 0x18, 0xf5, 0x47, 0x9e, 0xeb, 0x53, 0xab, 0x4a,
	0x3e, 0x82, 0xdd, 0x65, 0xd8, 0xf5, 0xfe, 0x2c, 0xa5, 0x46, 0x1e, 0xc3, 0x26, 0xa3, 0xdf, 0x9c,
	0x52, 0x7f, 0x1c, 0x50, 0xc6, 0x3c, 0x66, 0xd5, 0x15, 0xe4, 0x8d, 0x8f, 0xb5, 0x56, 0x31, 0x3a,
	0x8d, 0xee, 0x4f, 0x06, 0xd4, 0x8b, 0x77, 0x8a, 0x7c, 0x0c, 0xd6, 0x24, 0x94, 0x32, 0xc5, 0x20,
	0x43, 0x19, 0x24, 0x71, 0x90, 0x16, 0xdd, 0x33, 0xd9, 0x66, 0x81, 0xbb, 0x28, 0x9d, 0x78, 0xc8,
	0xc9, 0x73, 0xd8, 0x9a, 0x86, 0x57, 0x18, 0x84, 0x51, 0xc4, 0xe7, 0x99, 0x4a, 0xd5, 0x9d, 0x31,
	0xd9, 0xa6, 0x82, 0xfb, 0x05, 0xea, 0xc4, 0xe4, 0x19, 0xb4, 0x26, 0x8a, 0x4a, 0xe0, 0xf4, 0xf6,
	0x56, 0x41, 0x41, 0x4c, 0x23, 0xe4, 0x7d, 0xa8, 0xa7, 0x3c, 0x0a, 0x53, 0x2c, 0x1f, 0xaa, 0x72,
	0xd7, 0xfd, 0xd9, 0x84, 0xad, 0x91, 0xc0, 0x1c, 0xb3, 0x08, 0xed, 0x8b, 0x30, 0x9b, 0xfe, 0xdf,
	0x5e, 0xdf, 0xef, 0xe1, 0x49, 0x86, 0x37, 0xc1, 0xac, 0xf4, 0x18, 0xe4, 0x32, 0x94, 0xf3, 0x5c,
	0x9f, 0xb0, 0x75, 0xd8, 0x7b, 0xd0, 0x59, 0x59, 0xe6, 0xeb, 0x2a, 0xf6, 0x38, 0xc3, 0x9b, 0x75,
	0x88, 0xfc, 0x00, 0xdb, 0x33, 0x81, 0xd7, 0x6f, 0x09, 0x54, 0xff, 0x91, 0x00, 0x51, 0x5c, 0xf7,
	0x14, 0x5e, 0xc0, 0xce, 0x55, 0x92, 0xa6, 0x49, 0x8e, 0x11, 0xcf, 0xe2, 0x3c, 0xc8, 0x13, 0x25,
	0xa3, 0x12, 0xf5, 0x1b, 0x69, 0xb2, 0xf7, 0xee, 0x86, 0x7d, 0x15, 0x1d, 0x09, 0xbc, 0xee, 0x7e,
	0x07, 0xed, 0x7b, 0x4c, 0xcf, 0xa0, 0xb5, 0xb2, 0x99, 0xc4, 0xe5, 0xc4, 0xc0, 0x12, 0x72, 0x62,
	0x35, 0x2e, 0xb7, 0xe7, 0x98, 0x4f, 0xee, 0x8c, 0xcb, 0x12, 0xf6, 0xe7, 0x13, 0x27, 0xee, 0x2e,
	0x60, 0x97, 0xa1, 0x9c, 0x8b, 0x2c, 0xc9, 0xa6, 0x45, 0xf3, 0xd4, 0xc7, 0xd7, 0xe5, 0xd2, 0x16,
	0x18, 0xca, 0xff, 0x60, 0x04, 0x3a, 0xd0, 0x08, 0x27, 0x53, 0xc1, 0xe7, 0x33, 0x6d, 0x60, 0x93,
	0x2d, 0xb7, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x28, 0xd0, 0x56, 0x37, 0x08, 0x00, 0x00,
}
