// Code generated by protoc-gen-go.
// source: Pegasus/PegasusShared/PegasusShared.proto
// DO NOT EDIT!

/*
Package pegasus_pegasusshared is a generated protocol buffer package.

It is generated from these files:
	Pegasus/PegasusShared/PegasusShared.proto

It has these top-level messages:
	AccountLicenseInfo
	AdventureProgress
	AssetKey
	AssetRecordInfo
	BnetId
	BoosterInfo
	CachedCard
	CachedCollection
	CardDef
	CardStack
	DatabaseDeckCard
	DatabaseDeckContent
	Date
	DeckCardData
	DeckInfo
	DeckRulesetDbRecord
	DeckRulesetRuleDbRecord
	DeckRulesetValidationResults
	DeckRulesetViolation
	FavoriteHero
	LocalizedString
	LocalizedStringValue
	Platform
	PlayerIdentity
	PlayQueueInfo
	ProfileNoticeAccountLicense
	ProfileNoticeAdventureProgress
	ProfileNoticeBonusStars
	ProfileNoticeCardBack
	ProfileNoticeDisconnectedGameResult
	ProfileNoticeLevelUp
	ProfileNoticeMedal
	ProfileNoticePreconDeck
	ProfileNoticePurchase
	ProfileNoticeRewardBooster
	ProfileNoticeRewardCard
	ProfileNoticeRewardCard2X
	ProfileNoticeRewardDust
	ProfileNoticeRewardForge
	ProfileNoticeRewardGold
	ProfileNoticeRewardMount
	ProfileNoticeTavernBrawlRewards
	ProfileNoticeTavernBrawlTicket
	RewardBag
	RewardChest
	ScenarioDbRecord
	SubsetCardListDbRecord
	TavernBrawlPlayerRecord
	TavernBrawlPlayerSession
	TavernBrawlSpec
	Vector2
*/
package pegasus_pegasusshared

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AssetType int32

const (
	AssetType_ASSET_TYPE_SCENARIO     AssetType = 1
	AssetType_ASSET_TYPE_SUBSET_CARD  AssetType = 2
	AssetType_ASSET_TYPE_DECK_RULESET AssetType = 3
)

var AssetType_name = map[int32]string{
	1: "ASSET_TYPE_SCENARIO",
	2: "ASSET_TYPE_SUBSET_CARD",
	3: "ASSET_TYPE_DECK_RULESET",
}
var AssetType_value = map[string]int32{
	"ASSET_TYPE_SCENARIO":     1,
	"ASSET_TYPE_SUBSET_CARD":  2,
	"ASSET_TYPE_DECK_RULESET": 3,
}

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}
func (x AssetType) String() string {
	return proto.EnumName(AssetType_name, int32(x))
}
func (x *AssetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AssetType_value, data, "AssetType")
	if err != nil {
		return err
	}
	*x = AssetType(value)
	return nil
}
func (AssetType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BattlePayProvider int32

const (
	BattlePayProvider_BP_PROVIDER_BLIZZARD    BattlePayProvider = 1
	BattlePayProvider_BP_PROVIDER_APPLE       BattlePayProvider = 2
	BattlePayProvider_BP_PROVIDER_GOOGLE_PLAY BattlePayProvider = 3
	BattlePayProvider_BP_PROVIDER_AMAZON      BattlePayProvider = 4
)

var BattlePayProvider_name = map[int32]string{
	1: "BP_PROVIDER_BLIZZARD",
	2: "BP_PROVIDER_APPLE",
	3: "BP_PROVIDER_GOOGLE_PLAY",
	4: "BP_PROVIDER_AMAZON",
}
var BattlePayProvider_value = map[string]int32{
	"BP_PROVIDER_BLIZZARD":    1,
	"BP_PROVIDER_APPLE":       2,
	"BP_PROVIDER_GOOGLE_PLAY": 3,
	"BP_PROVIDER_AMAZON":      4,
}

func (x BattlePayProvider) Enum() *BattlePayProvider {
	p := new(BattlePayProvider)
	*p = x
	return p
}
func (x BattlePayProvider) String() string {
	return proto.EnumName(BattlePayProvider_name, int32(x))
}
func (x *BattlePayProvider) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BattlePayProvider_value, data, "BattlePayProvider")
	if err != nil {
		return err
	}
	*x = BattlePayProvider(value)
	return nil
}
func (BattlePayProvider) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BnetGameType int32

const (
	BnetGameType_BGT_UNKNOWN                  BnetGameType = 0
	BnetGameType_BGT_FRIENDS                  BnetGameType = 1
	BnetGameType_BGT_RANKED_STANDARD          BnetGameType = 2
	BnetGameType_BGT_ARENA                    BnetGameType = 3
	BnetGameType_BGT_VS_AI                    BnetGameType = 4
	BnetGameType_BGT_TUTORIAL                 BnetGameType = 5
	BnetGameType_BGT_ASYNC                    BnetGameType = 6
	BnetGameType_BGT_NEWBIE                   BnetGameType = 9
	BnetGameType_BGT_CASUAL_STANDARD          BnetGameType = 10
	BnetGameType_BGT_TEST1                    BnetGameType = 11
	BnetGameType_BGT_TEST2                    BnetGameType = 12
	BnetGameType_BGT_TEST3                    BnetGameType = 13
	BnetGameType_BGT_TAVERNBRAWL_PVP          BnetGameType = 16
	BnetGameType_BGT_TAVERNBRAWL_1P_VERSUS_AI BnetGameType = 17
	BnetGameType_BGT_TAVERNBRAWL_2P_COOP      BnetGameType = 18
	BnetGameType_BGT_RANKED_WILD              BnetGameType = 30
	BnetGameType_BGT_CASUAL_WILD              BnetGameType = 31
	BnetGameType_BGT_LAST                     BnetGameType = 32
)

var BnetGameType_name = map[int32]string{
	0:  "BGT_UNKNOWN",
	1:  "BGT_FRIENDS",
	2:  "BGT_RANKED_STANDARD",
	3:  "BGT_ARENA",
	4:  "BGT_VS_AI",
	5:  "BGT_TUTORIAL",
	6:  "BGT_ASYNC",
	9:  "BGT_NEWBIE",
	10: "BGT_CASUAL_STANDARD",
	11: "BGT_TEST1",
	12: "BGT_TEST2",
	13: "BGT_TEST3",
	16: "BGT_TAVERNBRAWL_PVP",
	17: "BGT_TAVERNBRAWL_1P_VERSUS_AI",
	18: "BGT_TAVERNBRAWL_2P_COOP",
	30: "BGT_RANKED_WILD",
	31: "BGT_CASUAL_WILD",
	32: "BGT_LAST",
}
var BnetGameType_value = map[string]int32{
	"BGT_UNKNOWN":                  0,
	"BGT_FRIENDS":                  1,
	"BGT_RANKED_STANDARD":          2,
	"BGT_ARENA":                    3,
	"BGT_VS_AI":                    4,
	"BGT_TUTORIAL":                 5,
	"BGT_ASYNC":                    6,
	"BGT_NEWBIE":                   9,
	"BGT_CASUAL_STANDARD":          10,
	"BGT_TEST1":                    11,
	"BGT_TEST2":                    12,
	"BGT_TEST3":                    13,
	"BGT_TAVERNBRAWL_PVP":          16,
	"BGT_TAVERNBRAWL_1P_VERSUS_AI": 17,
	"BGT_TAVERNBRAWL_2P_COOP":      18,
	"BGT_RANKED_WILD":              30,
	"BGT_CASUAL_WILD":              31,
	"BGT_LAST":                     32,
}

func (x BnetGameType) Enum() *BnetGameType {
	p := new(BnetGameType)
	*p = x
	return p
}
func (x BnetGameType) String() string {
	return proto.EnumName(BnetGameType_name, int32(x))
}
func (x *BnetGameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BnetGameType_value, data, "BnetGameType")
	if err != nil {
		return err
	}
	*x = BnetGameType(value)
	return nil
}
func (BnetGameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DatabaseAction int32

const (
	DatabaseAction_DB_A_UNKNOWN      DatabaseAction = 0
	DatabaseAction_DB_A_GET_DECK     DatabaseAction = 1
	DatabaseAction_DB_A_CREATE_DECK  DatabaseAction = 2
	DatabaseAction_DB_A_RENAME_DECK  DatabaseAction = 3
	DatabaseAction_DB_A_DELETE_DECK  DatabaseAction = 4
	DatabaseAction_DB_A_SET_DECK     DatabaseAction = 5
	DatabaseAction_DB_A_OPEN_BOOSTER DatabaseAction = 6
	DatabaseAction_DB_A_GAMES_INFO   DatabaseAction = 7
)

var DatabaseAction_name = map[int32]string{
	0: "DB_A_UNKNOWN",
	1: "DB_A_GET_DECK",
	2: "DB_A_CREATE_DECK",
	3: "DB_A_RENAME_DECK",
	4: "DB_A_DELETE_DECK",
	5: "DB_A_SET_DECK",
	6: "DB_A_OPEN_BOOSTER",
	7: "DB_A_GAMES_INFO",
}
var DatabaseAction_value = map[string]int32{
	"DB_A_UNKNOWN":      0,
	"DB_A_GET_DECK":     1,
	"DB_A_CREATE_DECK":  2,
	"DB_A_RENAME_DECK":  3,
	"DB_A_DELETE_DECK":  4,
	"DB_A_SET_DECK":     5,
	"DB_A_OPEN_BOOSTER": 6,
	"DB_A_GAMES_INFO":   7,
}

func (x DatabaseAction) Enum() *DatabaseAction {
	p := new(DatabaseAction)
	*p = x
	return p
}
func (x DatabaseAction) String() string {
	return proto.EnumName(DatabaseAction_name, int32(x))
}
func (x *DatabaseAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DatabaseAction_value, data, "DatabaseAction")
	if err != nil {
		return err
	}
	*x = DatabaseAction(value)
	return nil
}
func (DatabaseAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DatabaseResult int32

const (
	DatabaseResult_DB_E_SQL_EX         DatabaseResult = -1
	DatabaseResult_DB_E_UNKNOWN        DatabaseResult = 0
	DatabaseResult_DB_E_SUCCESS        DatabaseResult = 1
	DatabaseResult_DB_E_NOT_OWNED      DatabaseResult = 2
	DatabaseResult_DB_E_CONSTRAINT     DatabaseResult = 3
	DatabaseResult_DB_E_NOT_FOUND      DatabaseResult = 4
	DatabaseResult_DB_E_EXCEPTION      DatabaseResult = 9
	DatabaseResult_DB_E_BAD_PARAM      DatabaseResult = 11
	DatabaseResult_DB_E_DECK_IS_LOCKED DatabaseResult = 12
)

var DatabaseResult_name = map[int32]string{
	-1: "DB_E_SQL_EX",
	0:  "DB_E_UNKNOWN",
	1:  "DB_E_SUCCESS",
	2:  "DB_E_NOT_OWNED",
	3:  "DB_E_CONSTRAINT",
	4:  "DB_E_NOT_FOUND",
	9:  "DB_E_EXCEPTION",
	11: "DB_E_BAD_PARAM",
	12: "DB_E_DECK_IS_LOCKED",
}
var DatabaseResult_value = map[string]int32{
	"DB_E_SQL_EX":         -1,
	"DB_E_UNKNOWN":        0,
	"DB_E_SUCCESS":        1,
	"DB_E_NOT_OWNED":      2,
	"DB_E_CONSTRAINT":     3,
	"DB_E_NOT_FOUND":      4,
	"DB_E_EXCEPTION":      9,
	"DB_E_BAD_PARAM":      11,
	"DB_E_DECK_IS_LOCKED": 12,
}

func (x DatabaseResult) Enum() *DatabaseResult {
	p := new(DatabaseResult)
	*p = x
	return p
}
func (x DatabaseResult) String() string {
	return proto.EnumName(DatabaseResult_name, int32(x))
}
func (x *DatabaseResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DatabaseResult_value, data, "DatabaseResult")
	if err != nil {
		return err
	}
	*x = DatabaseResult(value)
	return nil
}
func (DatabaseResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DeckSourceType int32

const (
	DeckSourceType_DECK_SOURCE_TYPE_UNKNOWN        DeckSourceType = 0
	DeckSourceType_DECK_SOURCE_TYPE_NORMAL         DeckSourceType = 1
	DeckSourceType_DECK_SOURCE_TYPE_TEMPLATE       DeckSourceType = 2
	DeckSourceType_DECK_SOURCE_TYPE_BASIC_DECK     DeckSourceType = 3
	DeckSourceType_DECK_SOURCE_TYPE_INNKEEPER_DECK DeckSourceType = 4
)

var DeckSourceType_name = map[int32]string{
	0: "DECK_SOURCE_TYPE_UNKNOWN",
	1: "DECK_SOURCE_TYPE_NORMAL",
	2: "DECK_SOURCE_TYPE_TEMPLATE",
	3: "DECK_SOURCE_TYPE_BASIC_DECK",
	4: "DECK_SOURCE_TYPE_INNKEEPER_DECK",
}
var DeckSourceType_value = map[string]int32{
	"DECK_SOURCE_TYPE_UNKNOWN":        0,
	"DECK_SOURCE_TYPE_NORMAL":         1,
	"DECK_SOURCE_TYPE_TEMPLATE":       2,
	"DECK_SOURCE_TYPE_BASIC_DECK":     3,
	"DECK_SOURCE_TYPE_INNKEEPER_DECK": 4,
}

func (x DeckSourceType) Enum() *DeckSourceType {
	p := new(DeckSourceType)
	*p = x
	return p
}
func (x DeckSourceType) String() string {
	return proto.EnumName(DeckSourceType_name, int32(x))
}
func (x *DeckSourceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeckSourceType_value, data, "DeckSourceType")
	if err != nil {
		return err
	}
	*x = DeckSourceType(value)
	return nil
}
func (DeckSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeckType int32

const (
	DeckType_NORMAL_DECK       DeckType = 1
	DeckType_AI_DECK           DeckType = 2
	DeckType_DRAFT_DECK        DeckType = 4
	DeckType_PRECON_DECK       DeckType = 5
	DeckType_TAVERN_BRAWL_DECK DeckType = 6
	DeckType_HIDDEN_DECK       DeckType = 1000
)

var DeckType_name = map[int32]string{
	1:    "NORMAL_DECK",
	2:    "AI_DECK",
	4:    "DRAFT_DECK",
	5:    "PRECON_DECK",
	6:    "TAVERN_BRAWL_DECK",
	1000: "HIDDEN_DECK",
}
var DeckType_value = map[string]int32{
	"NORMAL_DECK":       1,
	"AI_DECK":           2,
	"DRAFT_DECK":        4,
	"PRECON_DECK":       5,
	"TAVERN_BRAWL_DECK": 6,
	"HIDDEN_DECK":       1000,
}

func (x DeckType) Enum() *DeckType {
	p := new(DeckType)
	*p = x
	return p
}
func (x DeckType) String() string {
	return proto.EnumName(DeckType_name, int32(x))
}
func (x *DeckType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeckType_value, data, "DeckType")
	if err != nil {
		return err
	}
	*x = DeckType(value)
	return nil
}
func (DeckType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ErrorCode int32

const (
	ErrorCode_ERROR_OK                                       ErrorCode = 0
	ErrorCode_ERROR_HEARTHSTONE_BEGIN                        ErrorCode = 1000000
	ErrorCode_ERROR_GLOBAL_INVALID_INPUT                     ErrorCode = 1000001
	ErrorCode_ERROR_GLOBAL_NO_DATA                           ErrorCode = 1000002
	ErrorCode_ERROR_GLOBAL_NOT_YET_IMPLEMENTED               ErrorCode = 1000003
	ErrorCode_ERROR_GLOBAL_DATA_MODIFIED                     ErrorCode = 1000004
	ErrorCode_ERROR_GLOBAL_INTERNAL_DB_ERROR                 ErrorCode = 1000005
	ErrorCode_ERROR_GLOBAL_DECK_IS_LOCKED                    ErrorCode = 1000006
	ErrorCode_ERROR_GLOBAL_FEATURE_DISABLED                  ErrorCode = 1000007
	ErrorCode_ERROR_SCENARIO_INCORRECT_NUM_PLAYERS           ErrorCode = 1000500
	ErrorCode_ERROR_SCENARIO_NO_DECK_SPECIFIED               ErrorCode = 1000501
	ErrorCode_ERROR_SCENARIO_MUST_BE_SERVER_ONLY             ErrorCode = 1000502
	ErrorCode_ERROR_TAVERN_BRAWL_SEASON_INCREMENTED          ErrorCode = 1001000
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_ACTIVE                  ErrorCode = 1001001
	ErrorCode_ERROR_TAVERN_BRAWL_NO_TICKET                   ErrorCode = 1001002
	ErrorCode_ERROR_TAVERN_BRAWL_RETIRE_FIRST                ErrorCode = 1001003
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_IN_SESSION              ErrorCode = 1001004
	ErrorCode_ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE ErrorCode = 1001005
	ErrorCode_ERROR_TAVERN_BRAWL_FEATURE_DISABLED            ErrorCode = 1001006
	ErrorCode_ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED         ErrorCode = 1001007
	ErrorCode_ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED ErrorCode = 1001008
	ErrorCode_ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE           ErrorCode = 1002000
	ErrorCode_ERROR_DECK_RULESET_RULE_DB_READ_ERROR          ErrorCode = 1002001
	ErrorCode_ERROR_DECK_RULESET_RULE_VIOLATION              ErrorCode = 1002002
	ErrorCode_ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN        ErrorCode = 1002003
	ErrorCode_ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN      ErrorCode = 1002004
	ErrorCode_ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN      ErrorCode = 1002005
	ErrorCode_ERROR_DECK_VALIDATION_DB_WRITE_ERROR           ErrorCode = 1002006
	ErrorCode_ERROR_DECK_VALIDATION_WRONG_FORMAT             ErrorCode = 1002007
	ErrorCode_ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY         ErrorCode = 1002008
	ErrorCode_ERROR_PLAY_GAME_DECK_MODIFIED                  ErrorCode = 1003000
)

var ErrorCode_name = map[int32]string{
	0:       "ERROR_OK",
	1000000: "ERROR_HEARTHSTONE_BEGIN",
	1000001: "ERROR_GLOBAL_INVALID_INPUT",
	1000002: "ERROR_GLOBAL_NO_DATA",
	1000003: "ERROR_GLOBAL_NOT_YET_IMPLEMENTED",
	1000004: "ERROR_GLOBAL_DATA_MODIFIED",
	1000005: "ERROR_GLOBAL_INTERNAL_DB_ERROR",
	1000006: "ERROR_GLOBAL_DECK_IS_LOCKED",
	1000007: "ERROR_GLOBAL_FEATURE_DISABLED",
	1000500: "ERROR_SCENARIO_INCORRECT_NUM_PLAYERS",
	1000501: "ERROR_SCENARIO_NO_DECK_SPECIFIED",
	1000502: "ERROR_SCENARIO_MUST_BE_SERVER_ONLY",
	1001000: "ERROR_TAVERN_BRAWL_SEASON_INCREMENTED",
	1001001: "ERROR_TAVERN_BRAWL_NOT_ACTIVE",
	1001002: "ERROR_TAVERN_BRAWL_NO_TICKET",
	1001003: "ERROR_TAVERN_BRAWL_RETIRE_FIRST",
	1001004: "ERROR_TAVERN_BRAWL_NOT_IN_SESSION",
	1001005: "ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE",
	1001006: "ERROR_TAVERN_BRAWL_FEATURE_DISABLED",
	1001007: "ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED",
	1001008: "ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED",
	1002000: "ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE",
	1002001: "ERROR_DECK_RULESET_RULE_DB_READ_ERROR",
	1002002: "ERROR_DECK_RULESET_RULE_VIOLATION",
	1002003: "ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN",
	1002004: "ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN",
	1002005: "ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN",
	1002006: "ERROR_DECK_VALIDATION_DB_WRITE_ERROR",
	1002007: "ERROR_DECK_VALIDATION_WRONG_FORMAT",
	1002008: "ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY",
	1003000: "ERROR_PLAY_GAME_DECK_MODIFIED",
}
var ErrorCode_value = map[string]int32{
	"ERROR_OK":                                       0,
	"ERROR_HEARTHSTONE_BEGIN":                        1000000,
	"ERROR_GLOBAL_INVALID_INPUT":                     1000001,
	"ERROR_GLOBAL_NO_DATA":                           1000002,
	"ERROR_GLOBAL_NOT_YET_IMPLEMENTED":               1000003,
	"ERROR_GLOBAL_DATA_MODIFIED":                     1000004,
	"ERROR_GLOBAL_INTERNAL_DB_ERROR":                 1000005,
	"ERROR_GLOBAL_DECK_IS_LOCKED":                    1000006,
	"ERROR_GLOBAL_FEATURE_DISABLED":                  1000007,
	"ERROR_SCENARIO_INCORRECT_NUM_PLAYERS":           1000500,
	"ERROR_SCENARIO_NO_DECK_SPECIFIED":               1000501,
	"ERROR_SCENARIO_MUST_BE_SERVER_ONLY":             1000502,
	"ERROR_TAVERN_BRAWL_SEASON_INCREMENTED":          1001000,
	"ERROR_TAVERN_BRAWL_NOT_ACTIVE":                  1001001,
	"ERROR_TAVERN_BRAWL_NO_TICKET":                   1001002,
	"ERROR_TAVERN_BRAWL_RETIRE_FIRST":                1001003,
	"ERROR_TAVERN_BRAWL_NOT_IN_SESSION":              1001004,
	"ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE": 1001005,
	"ERROR_TAVERN_BRAWL_FEATURE_DISABLED":            1001006,
	"ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED":         1001007,
	"ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED": 1001008,
	"ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE":           1002000,
	"ERROR_DECK_RULESET_RULE_DB_READ_ERROR":          1002001,
	"ERROR_DECK_RULESET_RULE_VIOLATION":              1002002,
	"ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN":        1002003,
	"ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN":      1002004,
	"ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN":      1002005,
	"ERROR_DECK_VALIDATION_DB_WRITE_ERROR":           1002006,
	"ERROR_DECK_VALIDATION_WRONG_FORMAT":             1002007,
	"ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY":         1002008,
	"ERROR_PLAY_GAME_DECK_MODIFIED":                  1003000,
}

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}
func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}
func (x *ErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ErrorCode_value, data, "ErrorCode")
	if err != nil {
		return err
	}
	*x = ErrorCode(value)
	return nil
}
func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type FormatType int32

const (
	FormatType_FT_UNKNOWN  FormatType = 0
	FormatType_FT_WILD     FormatType = 1
	FormatType_FT_STANDARD FormatType = 2
)

var FormatType_name = map[int32]string{
	0: "FT_UNKNOWN",
	1: "FT_WILD",
	2: "FT_STANDARD",
}
var FormatType_value = map[string]int32{
	"FT_UNKNOWN":  0,
	"FT_WILD":     1,
	"FT_STANDARD": 2,
}

func (x FormatType) Enum() *FormatType {
	p := new(FormatType)
	*p = x
	return p
}
func (x FormatType) String() string {
	return proto.EnumName(FormatType_name, int32(x))
}
func (x *FormatType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FormatType_value, data, "FormatType")
	if err != nil {
		return err
	}
	*x = FormatType(value)
	return nil
}
func (FormatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GameType int32

const (
	GameType_GT_UNKNOWN     GameType = 0
	GameType_GT_VS_AI       GameType = 1
	GameType_GT_VS_FRIEND   GameType = 2
	GameType_GT_TUTORIAL    GameType = 4
	GameType_GT_ARENA       GameType = 5
	GameType_GT_TEST        GameType = 6
	GameType_GT_RANKED      GameType = 7
	GameType_GT_CASUAL      GameType = 8
	GameType_GT_TAVERNBRAWL GameType = 16
	GameType_GT_TB_1P_VS_AI GameType = 17
	GameType_GT_TB_2P_COOP  GameType = 18
	GameType_GT_LAST        GameType = 19
)

var GameType_name = map[int32]string{
	0:  "GT_UNKNOWN",
	1:  "GT_VS_AI",
	2:  "GT_VS_FRIEND",
	4:  "GT_TUTORIAL",
	5:  "GT_ARENA",
	6:  "GT_TEST",
	7:  "GT_RANKED",
	8:  "GT_CASUAL",
	16: "GT_TAVERNBRAWL",
	17: "GT_TB_1P_VS_AI",
	18: "GT_TB_2P_COOP",
	19: "GT_LAST",
}
var GameType_value = map[string]int32{
	"GT_UNKNOWN":     0,
	"GT_VS_AI":       1,
	"GT_VS_FRIEND":   2,
	"GT_TUTORIAL":    4,
	"GT_ARENA":       5,
	"GT_TEST":        6,
	"GT_RANKED":      7,
	"GT_CASUAL":      8,
	"GT_TAVERNBRAWL": 16,
	"GT_TB_1P_VS_AI": 17,
	"GT_TB_2P_COOP":  18,
	"GT_LAST":        19,
}

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}
func (x GameType) String() string {
	return proto.EnumName(GameType_name, int32(x))
}
func (x *GameType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameType_value, data, "GameType")
	if err != nil {
		return err
	}
	*x = GameType(value)
	return nil
}
func (GameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type RecruitAFriendState int32

const (
	RecruitAFriendState_RAF_RECRUITABLE                  RecruitAFriendState = 1
	RecruitAFriendState_RAF_RECRUITED                    RecruitAFriendState = 2
	RecruitAFriendState_RAF_GRADUATED                    RecruitAFriendState = 3
	RecruitAFriendState_RAF_VALEDICTORIAN                RecruitAFriendState = 4
	RecruitAFriendState_RAF_NOT_RECRUITABLE_WRONG_REGION RecruitAFriendState = 1000
	RecruitAFriendState_RAF_NOT_RECRUITABLE_TOO_OLD      RecruitAFriendState = 1001
	RecruitAFriendState_RAF_GRADUATED_WITHOUT_RECRUITER  RecruitAFriendState = 1002
)

var RecruitAFriendState_name = map[int32]string{
	1:    "RAF_RECRUITABLE",
	2:    "RAF_RECRUITED",
	3:    "RAF_GRADUATED",
	4:    "RAF_VALEDICTORIAN",
	1000: "RAF_NOT_RECRUITABLE_WRONG_REGION",
	1001: "RAF_NOT_RECRUITABLE_TOO_OLD",
	1002: "RAF_GRADUATED_WITHOUT_RECRUITER",
}
var RecruitAFriendState_value = map[string]int32{
	"RAF_RECRUITABLE":                  1,
	"RAF_RECRUITED":                    2,
	"RAF_GRADUATED":                    3,
	"RAF_VALEDICTORIAN":                4,
	"RAF_NOT_RECRUITABLE_WRONG_REGION": 1000,
	"RAF_NOT_RECRUITABLE_TOO_OLD":      1001,
	"RAF_GRADUATED_WITHOUT_RECRUITER":  1002,
}

func (x RecruitAFriendState) Enum() *RecruitAFriendState {
	p := new(RecruitAFriendState)
	*p = x
	return p
}
func (x RecruitAFriendState) String() string {
	return proto.EnumName(RecruitAFriendState_name, int32(x))
}
func (x *RecruitAFriendState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RecruitAFriendState_value, data, "RecruitAFriendState")
	if err != nil {
		return err
	}
	*x = RecruitAFriendState(value)
	return nil
}
func (RecruitAFriendState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type ReturningPlayerStatus int32

const (
	ReturningPlayerStatus_RPS_UNKNOWN                 ReturningPlayerStatus = 0
	ReturningPlayerStatus_RPS_NOT_RETURNING_PLAYER    ReturningPlayerStatus = 1
	ReturningPlayerStatus_RPS_ACTIVE                  ReturningPlayerStatus = 2
	ReturningPlayerStatus_RPS_COMPLETE                ReturningPlayerStatus = 3
	ReturningPlayerStatus_RPS_ACTIVE_OPTED_OUT_QUEST1 ReturningPlayerStatus = 4
	ReturningPlayerStatus_RPS_ACTIVE_WITH_MANY_LOSSES ReturningPlayerStatus = 5
)

var ReturningPlayerStatus_name = map[int32]string{
	0: "RPS_UNKNOWN",
	1: "RPS_NOT_RETURNING_PLAYER",
	2: "RPS_ACTIVE",
	3: "RPS_COMPLETE",
	4: "RPS_ACTIVE_OPTED_OUT_QUEST1",
	5: "RPS_ACTIVE_WITH_MANY_LOSSES",
}
var ReturningPlayerStatus_value = map[string]int32{
	"RPS_UNKNOWN":                 0,
	"RPS_NOT_RETURNING_PLAYER":    1,
	"RPS_ACTIVE":                  2,
	"RPS_COMPLETE":                3,
	"RPS_ACTIVE_OPTED_OUT_QUEST1": 4,
	"RPS_ACTIVE_WITH_MANY_LOSSES": 5,
}

func (x ReturningPlayerStatus) Enum() *ReturningPlayerStatus {
	p := new(ReturningPlayerStatus)
	*p = x
	return p
}
func (x ReturningPlayerStatus) String() string {
	return proto.EnumName(ReturningPlayerStatus_name, int32(x))
}
func (x *ReturningPlayerStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReturningPlayerStatus_value, data, "ReturningPlayerStatus")
	if err != nil {
		return err
	}
	*x = ReturningPlayerStatus(value)
	return nil
}
func (ReturningPlayerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type RewardTrigger int32

const (
	RewardTrigger_REWARD_TRIGGER_UNKNOWN        RewardTrigger = 0
	RewardTrigger_REWARD_TRIGGER_NONE           RewardTrigger = 1
	RewardTrigger_REWARD_TRIGGER_WIN_GAME       RewardTrigger = 2
	RewardTrigger_REWARD_TRIGGER_FINISH_GAME    RewardTrigger = 3
	RewardTrigger_REWARD_TRIGGER_FINISH_SESSION RewardTrigger = 4
)

var RewardTrigger_name = map[int32]string{
	0: "REWARD_TRIGGER_UNKNOWN",
	1: "REWARD_TRIGGER_NONE",
	2: "REWARD_TRIGGER_WIN_GAME",
	3: "REWARD_TRIGGER_FINISH_GAME",
	4: "REWARD_TRIGGER_FINISH_SESSION",
}
var RewardTrigger_value = map[string]int32{
	"REWARD_TRIGGER_UNKNOWN":        0,
	"REWARD_TRIGGER_NONE":           1,
	"REWARD_TRIGGER_WIN_GAME":       2,
	"REWARD_TRIGGER_FINISH_GAME":    3,
	"REWARD_TRIGGER_FINISH_SESSION": 4,
}

func (x RewardTrigger) Enum() *RewardTrigger {
	p := new(RewardTrigger)
	*p = x
	return p
}
func (x RewardTrigger) String() string {
	return proto.EnumName(RewardTrigger_name, int32(x))
}
func (x *RewardTrigger) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RewardTrigger_value, data, "RewardTrigger")
	if err != nil {
		return err
	}
	*x = RewardTrigger(value)
	return nil
}
func (RewardTrigger) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type RewardType int32

const (
	RewardType_REWARD_UNKNOWN                     RewardType = 0
	RewardType_REWARD_NONE                        RewardType = 1
	RewardType_REWARD_ADVENTURE_PROGRESS          RewardType = 2
	RewardType_REWARD_ARCANE_DUST                 RewardType = 3
	RewardType_REWARD_BASIC_CARD                  RewardType = 4
	RewardType_REWARD_BOOSTER_PACKS               RewardType = 5
	RewardType_REWARD_CARD_BACK                   RewardType = 6
	RewardType_REWARD_CARD_ID                     RewardType = 7
	RewardType_REWARD_CARD_ID_2X                  RewardType = 8
	RewardType_REWARD_CARD_SET                    RewardType = 9
	RewardType_DEPRECATED_REWARD_CRAFTABLE_GOLDEN RewardType = 10
	RewardType_REWARD_GOLD                        RewardType = 11
	RewardType_REWARD_GOLD_HERO                   RewardType = 12
	RewardType_REWARD_FORGE_TICKETS               RewardType = 13
	RewardType_REWARD_HERO                        RewardType = 14
	RewardType_REWARD_EXTERNAL_GAME_MOUNT         RewardType = 15
	RewardType_REWARD_CHEST                       RewardType = 16
	RewardType_REWARD_RETURNING_PLAYER_COMPLETE   RewardType = 17
)

var RewardType_name = map[int32]string{
	0:  "REWARD_UNKNOWN",
	1:  "REWARD_NONE",
	2:  "REWARD_ADVENTURE_PROGRESS",
	3:  "REWARD_ARCANE_DUST",
	4:  "REWARD_BASIC_CARD",
	5:  "REWARD_BOOSTER_PACKS",
	6:  "REWARD_CARD_BACK",
	7:  "REWARD_CARD_ID",
	8:  "REWARD_CARD_ID_2X",
	9:  "REWARD_CARD_SET",
	10: "DEPRECATED_REWARD_CRAFTABLE_GOLDEN",
	11: "REWARD_GOLD",
	12: "REWARD_GOLD_HERO",
	13: "REWARD_FORGE_TICKETS",
	14: "REWARD_HERO",
	15: "REWARD_EXTERNAL_GAME_MOUNT",
	16: "REWARD_CHEST",
	17: "REWARD_RETURNING_PLAYER_COMPLETE",
}
var RewardType_value = map[string]int32{
	"REWARD_UNKNOWN":                     0,
	"REWARD_NONE":                        1,
	"REWARD_ADVENTURE_PROGRESS":          2,
	"REWARD_ARCANE_DUST":                 3,
	"REWARD_BASIC_CARD":                  4,
	"REWARD_BOOSTER_PACKS":               5,
	"REWARD_CARD_BACK":                   6,
	"REWARD_CARD_ID":                     7,
	"REWARD_CARD_ID_2X":                  8,
	"REWARD_CARD_SET":                    9,
	"DEPRECATED_REWARD_CRAFTABLE_GOLDEN": 10,
	"REWARD_GOLD":                        11,
	"REWARD_GOLD_HERO":                   12,
	"REWARD_FORGE_TICKETS":               13,
	"REWARD_HERO":                        14,
	"REWARD_EXTERNAL_GAME_MOUNT":         15,
	"REWARD_CHEST":                       16,
	"REWARD_RETURNING_PLAYER_COMPLETE":   17,
}

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}
func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}
func (x *RewardType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RewardType_value, data, "RewardType")
	if err != nil {
		return err
	}
	*x = RewardType(value)
	return nil
}
func (RewardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type RuleType int32

const (
	RuleType_RULE_NONE        RuleType = 0
	RuleType_RULE_CHOOSE_HERO RuleType = 1
	RuleType_RULE_CHOOSE_DECK RuleType = 2
)

var RuleType_name = map[int32]string{
	0: "RULE_NONE",
	1: "RULE_CHOOSE_HERO",
	2: "RULE_CHOOSE_DECK",
}
var RuleType_value = map[string]int32{
	"RULE_NONE":        0,
	"RULE_CHOOSE_HERO": 1,
	"RULE_CHOOSE_DECK": 2,
}

func (x RuleType) Enum() *RuleType {
	p := new(RuleType)
	*p = x
	return p
}
func (x RuleType) String() string {
	return proto.EnumName(RuleType_name, int32(x))
}
func (x *RuleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RuleType_value, data, "RuleType")
	if err != nil {
		return err
	}
	*x = RuleType(value)
	return nil
}
func (RuleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type TavernBrawlStatus int32

const (
	TavernBrawlStatus_TB_STATUS_INVALID         TavernBrawlStatus = 0
	TavernBrawlStatus_TB_STATUS_TICKET_REQUIRED TavernBrawlStatus = 1
	TavernBrawlStatus_TB_STATUS_ACTIVE          TavernBrawlStatus = 2
	TavernBrawlStatus_TB_STATUS_IN_REWARDS      TavernBrawlStatus = 3
)

var TavernBrawlStatus_name = map[int32]string{
	0: "TB_STATUS_INVALID",
	1: "TB_STATUS_TICKET_REQUIRED",
	2: "TB_STATUS_ACTIVE",
	3: "TB_STATUS_IN_REWARDS",
}
var TavernBrawlStatus_value = map[string]int32{
	"TB_STATUS_INVALID":         0,
	"TB_STATUS_TICKET_REQUIRED": 1,
	"TB_STATUS_ACTIVE":          2,
	"TB_STATUS_IN_REWARDS":      3,
}

func (x TavernBrawlStatus) Enum() *TavernBrawlStatus {
	p := new(TavernBrawlStatus)
	*p = x
	return p
}
func (x TavernBrawlStatus) String() string {
	return proto.EnumName(TavernBrawlStatus_name, int32(x))
}
func (x *TavernBrawlStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TavernBrawlStatus_value, data, "TavernBrawlStatus")
	if err != nil {
		return err
	}
	*x = TavernBrawlStatus(value)
	return nil
}
func (TavernBrawlStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type AccountLicenseInfo_Flags int32

const (
	AccountLicenseInfo_OWNED AccountLicenseInfo_Flags = 1
)

var AccountLicenseInfo_Flags_name = map[int32]string{
	1: "OWNED",
}
var AccountLicenseInfo_Flags_value = map[string]int32{
	"OWNED": 1,
}

func (x AccountLicenseInfo_Flags) Enum() *AccountLicenseInfo_Flags {
	p := new(AccountLicenseInfo_Flags)
	*p = x
	return p
}
func (x AccountLicenseInfo_Flags) String() string {
	return proto.EnumName(AccountLicenseInfo_Flags_name, int32(x))
}
func (x *AccountLicenseInfo_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccountLicenseInfo_Flags_value, data, "AccountLicenseInfo_Flags")
	if err != nil {
		return err
	}
	*x = AccountLicenseInfo_Flags(value)
	return nil
}
func (AccountLicenseInfo_Flags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type AdventureProgress_Flags int32

const (
	AdventureProgress_OWNED                            AdventureProgress_Flags = 1
	AdventureProgress_DEFEAT_HEROIC_MISSION_1          AdventureProgress_Flags = 2
	AdventureProgress_DEFEAT_HEROIC_MISSION_2          AdventureProgress_Flags = 4
	AdventureProgress_DEFEAT_HEROIC_MISSION_3          AdventureProgress_Flags = 8
	AdventureProgress_DEFEAT_HEROIC_MISSION_4          AdventureProgress_Flags = 16
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_1 AdventureProgress_Flags = 256
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_2 AdventureProgress_Flags = 512
	AdventureProgress_DEFEAT_CLASS_CHALLENGE_MISSION_3 AdventureProgress_Flags = 1024
)

var AdventureProgress_Flags_name = map[int32]string{
	1:    "OWNED",
	2:    "DEFEAT_HEROIC_MISSION_1",
	4:    "DEFEAT_HEROIC_MISSION_2",
	8:    "DEFEAT_HEROIC_MISSION_3",
	16:   "DEFEAT_HEROIC_MISSION_4",
	256:  "DEFEAT_CLASS_CHALLENGE_MISSION_1",
	512:  "DEFEAT_CLASS_CHALLENGE_MISSION_2",
	1024: "DEFEAT_CLASS_CHALLENGE_MISSION_3",
}
var AdventureProgress_Flags_value = map[string]int32{
	"OWNED":                            1,
	"DEFEAT_HEROIC_MISSION_1":          2,
	"DEFEAT_HEROIC_MISSION_2":          4,
	"DEFEAT_HEROIC_MISSION_3":          8,
	"DEFEAT_HEROIC_MISSION_4":          16,
	"DEFEAT_CLASS_CHALLENGE_MISSION_1": 256,
	"DEFEAT_CLASS_CHALLENGE_MISSION_2": 512,
	"DEFEAT_CLASS_CHALLENGE_MISSION_3": 1024,
}

func (x AdventureProgress_Flags) Enum() *AdventureProgress_Flags {
	p := new(AdventureProgress_Flags)
	*p = x
	return p
}
func (x AdventureProgress_Flags) String() string {
	return proto.EnumName(AdventureProgress_Flags_name, int32(x))
}
func (x *AdventureProgress_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdventureProgress_Flags_value, data, "AdventureProgress_Flags")
	if err != nil {
		return err
	}
	*x = AdventureProgress_Flags(value)
	return nil
}
func (AdventureProgress_Flags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type DeckInfo_ValidityFlags int32

const (
	DeckInfo_UNLOCKED_HERO_CLASS DeckInfo_ValidityFlags = 1
	DeckInfo_OWNS_CARDS          DeckInfo_ValidityFlags = 2
	DeckInfo_HAS_30_CARDS        DeckInfo_ValidityFlags = 4
	DeckInfo_OBEYS_MAXES         DeckInfo_ValidityFlags = 8
	DeckInfo_CLASS_MATCHES       DeckInfo_ValidityFlags = 16
	DeckInfo_OWNS_CARD_BACK      DeckInfo_ValidityFlags = 32
	DeckInfo_OWNS_HERO           DeckInfo_ValidityFlags = 64
	DeckInfo_TAGGED_STANDARD     DeckInfo_ValidityFlags = 128
	DeckInfo_NEEDS_VALIDATION    DeckInfo_ValidityFlags = 256
	DeckInfo_NEEDS_NAME          DeckInfo_ValidityFlags = 512
	DeckInfo_LOCKED_DECK         DeckInfo_ValidityFlags = 1024
)

var DeckInfo_ValidityFlags_name = map[int32]string{
	1:    "UNLOCKED_HERO_CLASS",
	2:    "OWNS_CARDS",
	4:    "HAS_30_CARDS",
	8:    "OBEYS_MAXES",
	16:   "CLASS_MATCHES",
	32:   "OWNS_CARD_BACK",
	64:   "OWNS_HERO",
	128:  "TAGGED_STANDARD",
	256:  "NEEDS_VALIDATION",
	512:  "NEEDS_NAME",
	1024: "LOCKED_DECK",
}
var DeckInfo_ValidityFlags_value = map[string]int32{
	"UNLOCKED_HERO_CLASS": 1,
	"OWNS_CARDS":          2,
	"HAS_30_CARDS":        4,
	"OBEYS_MAXES":         8,
	"CLASS_MATCHES":       16,
	"OWNS_CARD_BACK":      32,
	"OWNS_HERO":           64,
	"TAGGED_STANDARD":     128,
	"NEEDS_VALIDATION":    256,
	"NEEDS_NAME":          512,
	"LOCKED_DECK":         1024,
}

func (x DeckInfo_ValidityFlags) Enum() *DeckInfo_ValidityFlags {
	p := new(DeckInfo_ValidityFlags)
	*p = x
	return p
}
func (x DeckInfo_ValidityFlags) String() string {
	return proto.EnumName(DeckInfo_ValidityFlags_name, int32(x))
}
func (x *DeckInfo_ValidityFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeckInfo_ValidityFlags_value, data, "DeckInfo_ValidityFlags")
	if err != nil {
		return err
	}
	*x = DeckInfo_ValidityFlags(value)
	return nil
}
func (DeckInfo_ValidityFlags) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

type ProfileNoticeAccountLicense_NoticeID int32

const (
	ProfileNoticeAccountLicense_ID ProfileNoticeAccountLicense_NoticeID = 16
)

var ProfileNoticeAccountLicense_NoticeID_name = map[int32]string{
	16: "ID",
}
var ProfileNoticeAccountLicense_NoticeID_value = map[string]int32{
	"ID": 16,
}

func (x ProfileNoticeAccountLicense_NoticeID) Enum() *ProfileNoticeAccountLicense_NoticeID {
	p := new(ProfileNoticeAccountLicense_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeAccountLicense_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeAccountLicense_NoticeID_name, int32(x))
}
func (x *ProfileNoticeAccountLicense_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeAccountLicense_NoticeID_value, data, "ProfileNoticeAccountLicense_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeAccountLicense_NoticeID(value)
	return nil
}
func (ProfileNoticeAccountLicense_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 0}
}

type ProfileNoticeAdventureProgress_NoticeID int32

const (
	ProfileNoticeAdventureProgress_ID ProfileNoticeAdventureProgress_NoticeID = 14
)

var ProfileNoticeAdventureProgress_NoticeID_name = map[int32]string{
	14: "ID",
}
var ProfileNoticeAdventureProgress_NoticeID_value = map[string]int32{
	"ID": 14,
}

func (x ProfileNoticeAdventureProgress_NoticeID) Enum() *ProfileNoticeAdventureProgress_NoticeID {
	p := new(ProfileNoticeAdventureProgress_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeAdventureProgress_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeAdventureProgress_NoticeID_name, int32(x))
}
func (x *ProfileNoticeAdventureProgress_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeAdventureProgress_NoticeID_value, data, "ProfileNoticeAdventureProgress_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeAdventureProgress_NoticeID(value)
	return nil
}
func (ProfileNoticeAdventureProgress_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

type ProfileNoticeBonusStars_NoticeID int32

const (
	ProfileNoticeBonusStars_ID ProfileNoticeBonusStars_NoticeID = 12
)

var ProfileNoticeBonusStars_NoticeID_name = map[int32]string{
	12: "ID",
}
var ProfileNoticeBonusStars_NoticeID_value = map[string]int32{
	"ID": 12,
}

func (x ProfileNoticeBonusStars_NoticeID) Enum() *ProfileNoticeBonusStars_NoticeID {
	p := new(ProfileNoticeBonusStars_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeBonusStars_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeBonusStars_NoticeID_name, int32(x))
}
func (x *ProfileNoticeBonusStars_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeBonusStars_NoticeID_value, data, "ProfileNoticeBonusStars_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeBonusStars_NoticeID(value)
	return nil
}
func (ProfileNoticeBonusStars_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27, 0}
}

type ProfileNoticeCardBack_NoticeID int32

const (
	ProfileNoticeCardBack_ID ProfileNoticeCardBack_NoticeID = 11
)

var ProfileNoticeCardBack_NoticeID_name = map[int32]string{
	11: "ID",
}
var ProfileNoticeCardBack_NoticeID_value = map[string]int32{
	"ID": 11,
}

func (x ProfileNoticeCardBack_NoticeID) Enum() *ProfileNoticeCardBack_NoticeID {
	p := new(ProfileNoticeCardBack_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeCardBack_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeCardBack_NoticeID_name, int32(x))
}
func (x *ProfileNoticeCardBack_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeCardBack_NoticeID_value, data, "ProfileNoticeCardBack_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeCardBack_NoticeID(value)
	return nil
}
func (ProfileNoticeCardBack_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28, 0}
}

type ProfileNoticeDisconnectedGameResult_GameResult int32

const (
	ProfileNoticeDisconnectedGameResult_GR_UNKNOWN ProfileNoticeDisconnectedGameResult_GameResult = 0
	ProfileNoticeDisconnectedGameResult_GR_PLAYING ProfileNoticeDisconnectedGameResult_GameResult = 1
	ProfileNoticeDisconnectedGameResult_GR_WINNER  ProfileNoticeDisconnectedGameResult_GameResult = 2
	ProfileNoticeDisconnectedGameResult_GR_TIE     ProfileNoticeDisconnectedGameResult_GameResult = 3
)

var ProfileNoticeDisconnectedGameResult_GameResult_name = map[int32]string{
	0: "GR_UNKNOWN",
	1: "GR_PLAYING",
	2: "GR_WINNER",
	3: "GR_TIE",
}
var ProfileNoticeDisconnectedGameResult_GameResult_value = map[string]int32{
	"GR_UNKNOWN": 0,
	"GR_PLAYING": 1,
	"GR_WINNER":  2,
	"GR_TIE":     3,
}

func (x ProfileNoticeDisconnectedGameResult_GameResult) Enum() *ProfileNoticeDisconnectedGameResult_GameResult {
	p := new(ProfileNoticeDisconnectedGameResult_GameResult)
	*p = x
	return p
}
func (x ProfileNoticeDisconnectedGameResult_GameResult) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_GameResult_name, int32(x))
}
func (x *ProfileNoticeDisconnectedGameResult_GameResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeDisconnectedGameResult_GameResult_value, data, "ProfileNoticeDisconnectedGameResult_GameResult")
	if err != nil {
		return err
	}
	*x = ProfileNoticeDisconnectedGameResult_GameResult(value)
	return nil
}
func (ProfileNoticeDisconnectedGameResult_GameResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 0}
}

type ProfileNoticeDisconnectedGameResult_NoticeID int32

const (
	ProfileNoticeDisconnectedGameResult_ID ProfileNoticeDisconnectedGameResult_NoticeID = 4
)

var ProfileNoticeDisconnectedGameResult_NoticeID_name = map[int32]string{
	4: "ID",
}
var ProfileNoticeDisconnectedGameResult_NoticeID_value = map[string]int32{
	"ID": 4,
}

func (x ProfileNoticeDisconnectedGameResult_NoticeID) Enum() *ProfileNoticeDisconnectedGameResult_NoticeID {
	p := new(ProfileNoticeDisconnectedGameResult_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeDisconnectedGameResult_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_NoticeID_name, int32(x))
}
func (x *ProfileNoticeDisconnectedGameResult_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeDisconnectedGameResult_NoticeID_value, data, "ProfileNoticeDisconnectedGameResult_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeDisconnectedGameResult_NoticeID(value)
	return nil
}
func (ProfileNoticeDisconnectedGameResult_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 1}
}

type ProfileNoticeDisconnectedGameResult_PlayerResult int32

const (
	ProfileNoticeDisconnectedGameResult_PR_UNKNOWN      ProfileNoticeDisconnectedGameResult_PlayerResult = 0
	ProfileNoticeDisconnectedGameResult_PR_WON          ProfileNoticeDisconnectedGameResult_PlayerResult = 1
	ProfileNoticeDisconnectedGameResult_PR_LOST         ProfileNoticeDisconnectedGameResult_PlayerResult = 2
	ProfileNoticeDisconnectedGameResult_PR_DISCONNECTED ProfileNoticeDisconnectedGameResult_PlayerResult = 3
	ProfileNoticeDisconnectedGameResult_PR_QUIT         ProfileNoticeDisconnectedGameResult_PlayerResult = 4
)

var ProfileNoticeDisconnectedGameResult_PlayerResult_name = map[int32]string{
	0: "PR_UNKNOWN",
	1: "PR_WON",
	2: "PR_LOST",
	3: "PR_DISCONNECTED",
	4: "PR_QUIT",
}
var ProfileNoticeDisconnectedGameResult_PlayerResult_value = map[string]int32{
	"PR_UNKNOWN":      0,
	"PR_WON":          1,
	"PR_LOST":         2,
	"PR_DISCONNECTED": 3,
	"PR_QUIT":         4,
}

func (x ProfileNoticeDisconnectedGameResult_PlayerResult) Enum() *ProfileNoticeDisconnectedGameResult_PlayerResult {
	p := new(ProfileNoticeDisconnectedGameResult_PlayerResult)
	*p = x
	return p
}
func (x ProfileNoticeDisconnectedGameResult_PlayerResult) String() string {
	return proto.EnumName(ProfileNoticeDisconnectedGameResult_PlayerResult_name, int32(x))
}
func (x *ProfileNoticeDisconnectedGameResult_PlayerResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeDisconnectedGameResult_PlayerResult_value, data, "ProfileNoticeDisconnectedGameResult_PlayerResult")
	if err != nil {
		return err
	}
	*x = ProfileNoticeDisconnectedGameResult_PlayerResult(value)
	return nil
}
func (ProfileNoticeDisconnectedGameResult_PlayerResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 2}
}

type ProfileNoticeLevelUp_NoticeID int32

const (
	ProfileNoticeLevelUp_ID ProfileNoticeLevelUp_NoticeID = 15
)

var ProfileNoticeLevelUp_NoticeID_name = map[int32]string{
	15: "ID",
}
var ProfileNoticeLevelUp_NoticeID_value = map[string]int32{
	"ID": 15,
}

func (x ProfileNoticeLevelUp_NoticeID) Enum() *ProfileNoticeLevelUp_NoticeID {
	p := new(ProfileNoticeLevelUp_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeLevelUp_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeLevelUp_NoticeID_name, int32(x))
}
func (x *ProfileNoticeLevelUp_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeLevelUp_NoticeID_value, data, "ProfileNoticeLevelUp_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeLevelUp_NoticeID(value)
	return nil
}
func (ProfileNoticeLevelUp_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30, 0}
}

type ProfileNoticeMedal_MedalType int32

const (
	ProfileNoticeMedal_UNKNOWN_MEDAL  ProfileNoticeMedal_MedalType = 0
	ProfileNoticeMedal_STANDARD_MEDAL ProfileNoticeMedal_MedalType = 1
	ProfileNoticeMedal_WILD_MEDAL     ProfileNoticeMedal_MedalType = 2
)

var ProfileNoticeMedal_MedalType_name = map[int32]string{
	0: "UNKNOWN_MEDAL",
	1: "STANDARD_MEDAL",
	2: "WILD_MEDAL",
}
var ProfileNoticeMedal_MedalType_value = map[string]int32{
	"UNKNOWN_MEDAL":  0,
	"STANDARD_MEDAL": 1,
	"WILD_MEDAL":     2,
}

func (x ProfileNoticeMedal_MedalType) Enum() *ProfileNoticeMedal_MedalType {
	p := new(ProfileNoticeMedal_MedalType)
	*p = x
	return p
}
func (x ProfileNoticeMedal_MedalType) String() string {
	return proto.EnumName(ProfileNoticeMedal_MedalType_name, int32(x))
}
func (x *ProfileNoticeMedal_MedalType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeMedal_MedalType_value, data, "ProfileNoticeMedal_MedalType")
	if err != nil {
		return err
	}
	*x = ProfileNoticeMedal_MedalType(value)
	return nil
}
func (ProfileNoticeMedal_MedalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31, 0}
}

type ProfileNoticeMedal_NoticeID int32

const (
	ProfileNoticeMedal_ID ProfileNoticeMedal_NoticeID = 1
)

var ProfileNoticeMedal_NoticeID_name = map[int32]string{
	1: "ID",
}
var ProfileNoticeMedal_NoticeID_value = map[string]int32{
	"ID": 1,
}

func (x ProfileNoticeMedal_NoticeID) Enum() *ProfileNoticeMedal_NoticeID {
	p := new(ProfileNoticeMedal_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeMedal_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeMedal_NoticeID_name, int32(x))
}
func (x *ProfileNoticeMedal_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeMedal_NoticeID_value, data, "ProfileNoticeMedal_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeMedal_NoticeID(value)
	return nil
}
func (ProfileNoticeMedal_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31, 1}
}

type ProfileNoticePreconDeck_NoticeID int32

const (
	ProfileNoticePreconDeck_ID ProfileNoticePreconDeck_NoticeID = 5
)

var ProfileNoticePreconDeck_NoticeID_name = map[int32]string{
	5: "ID",
}
var ProfileNoticePreconDeck_NoticeID_value = map[string]int32{
	"ID": 5,
}

func (x ProfileNoticePreconDeck_NoticeID) Enum() *ProfileNoticePreconDeck_NoticeID {
	p := new(ProfileNoticePreconDeck_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticePreconDeck_NoticeID) String() string {
	return proto.EnumName(ProfileNoticePreconDeck_NoticeID_name, int32(x))
}
func (x *ProfileNoticePreconDeck_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticePreconDeck_NoticeID_value, data, "ProfileNoticePreconDeck_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticePreconDeck_NoticeID(value)
	return nil
}
func (ProfileNoticePreconDeck_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

type ProfileNoticePurchase_NoticeID int32

const (
	ProfileNoticePurchase_ID ProfileNoticePurchase_NoticeID = 10
)

var ProfileNoticePurchase_NoticeID_name = map[int32]string{
	10: "ID",
}
var ProfileNoticePurchase_NoticeID_value = map[string]int32{
	"ID": 10,
}

func (x ProfileNoticePurchase_NoticeID) Enum() *ProfileNoticePurchase_NoticeID {
	p := new(ProfileNoticePurchase_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticePurchase_NoticeID) String() string {
	return proto.EnumName(ProfileNoticePurchase_NoticeID_name, int32(x))
}
func (x *ProfileNoticePurchase_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticePurchase_NoticeID_value, data, "ProfileNoticePurchase_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticePurchase_NoticeID(value)
	return nil
}
func (ProfileNoticePurchase_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0}
}

type ProfileNoticeRewardBooster_NoticeID int32

const (
	ProfileNoticeRewardBooster_ID ProfileNoticeRewardBooster_NoticeID = 2
)

var ProfileNoticeRewardBooster_NoticeID_name = map[int32]string{
	2: "ID",
}
var ProfileNoticeRewardBooster_NoticeID_value = map[string]int32{
	"ID": 2,
}

func (x ProfileNoticeRewardBooster_NoticeID) Enum() *ProfileNoticeRewardBooster_NoticeID {
	p := new(ProfileNoticeRewardBooster_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardBooster_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardBooster_NoticeID_name, int32(x))
}
func (x *ProfileNoticeRewardBooster_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardBooster_NoticeID_value, data, "ProfileNoticeRewardBooster_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardBooster_NoticeID(value)
	return nil
}
func (ProfileNoticeRewardBooster_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34, 0}
}

type ProfileNoticeRewardCard_NoticeID int32

const (
	ProfileNoticeRewardCard_ID ProfileNoticeRewardCard_NoticeID = 3
)

var ProfileNoticeRewardCard_NoticeID_name = map[int32]string{
	3: "ID",
}
var ProfileNoticeRewardCard_NoticeID_value = map[string]int32{
	"ID": 3,
}

func (x ProfileNoticeRewardCard_NoticeID) Enum() *ProfileNoticeRewardCard_NoticeID {
	p := new(ProfileNoticeRewardCard_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardCard_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardCard_NoticeID_name, int32(x))
}
func (x *ProfileNoticeRewardCard_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardCard_NoticeID_value, data, "ProfileNoticeRewardCard_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardCard_NoticeID(value)
	return nil
}
func (ProfileNoticeRewardCard_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{35, 0}
}

type ProfileNoticeRewardCard2X_NoticeID int32

const (
	ProfileNoticeRewardCard2X_ID ProfileNoticeRewardCard2X_NoticeID = 13
)

var ProfileNoticeRewardCard2X_NoticeID_name = map[int32]string{
	13: "ID",
}
var ProfileNoticeRewardCard2X_NoticeID_value = map[string]int32{
	"ID": 13,
}

func (x ProfileNoticeRewardCard2X_NoticeID) Enum() *ProfileNoticeRewardCard2X_NoticeID {
	p := new(ProfileNoticeRewardCard2X_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardCard2X_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardCard2X_NoticeID_name, int32(x))
}
func (x *ProfileNoticeRewardCard2X_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardCard2X_NoticeID_value, data, "ProfileNoticeRewardCard2X_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardCard2X_NoticeID(value)
	return nil
}
func (ProfileNoticeRewardCard2X_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36, 0}
}

type ProfileNoticeRewardDust_NoticeID int32

const (
	ProfileNoticeRewardDust_ID ProfileNoticeRewardDust_NoticeID = 6
)

var ProfileNoticeRewardDust_NoticeID_name = map[int32]string{
	6: "ID",
}
var ProfileNoticeRewardDust_NoticeID_value = map[string]int32{
	"ID": 6,
}

func (x ProfileNoticeRewardDust_NoticeID) Enum() *ProfileNoticeRewardDust_NoticeID {
	p := new(ProfileNoticeRewardDust_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardDust_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardDust_NoticeID_name, int32(x))
}
func (x *ProfileNoticeRewardDust_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardDust_NoticeID_value, data, "ProfileNoticeRewardDust_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardDust_NoticeID(value)
	return nil
}
func (ProfileNoticeRewardDust_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37, 0}
}

type ProfileNoticeRewardForge_NoticeID int32

const (
	ProfileNoticeRewardForge_ID ProfileNoticeRewardForge_NoticeID = 8
)

var ProfileNoticeRewardForge_NoticeID_name = map[int32]string{
	8: "ID",
}
var ProfileNoticeRewardForge_NoticeID_value = map[string]int32{
	"ID": 8,
}

func (x ProfileNoticeRewardForge_NoticeID) Enum() *ProfileNoticeRewardForge_NoticeID {
	p := new(ProfileNoticeRewardForge_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardForge_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardForge_NoticeID_name, int32(x))
}
func (x *ProfileNoticeRewardForge_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardForge_NoticeID_value, data, "ProfileNoticeRewardForge_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardForge_NoticeID(value)
	return nil
}
func (ProfileNoticeRewardForge_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38, 0}
}

type ProfileNoticeRewardGold_NoticeID int32

const (
	ProfileNoticeRewardGold_ID ProfileNoticeRewardGold_NoticeID = 9
)

var ProfileNoticeRewardGold_NoticeID_name = map[int32]string{
	9: "ID",
}
var ProfileNoticeRewardGold_NoticeID_value = map[string]int32{
	"ID": 9,
}

func (x ProfileNoticeRewardGold_NoticeID) Enum() *ProfileNoticeRewardGold_NoticeID {
	p := new(ProfileNoticeRewardGold_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardGold_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardGold_NoticeID_name, int32(x))
}
func (x *ProfileNoticeRewardGold_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardGold_NoticeID_value, data, "ProfileNoticeRewardGold_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardGold_NoticeID(value)
	return nil
}
func (ProfileNoticeRewardGold_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

type ProfileNoticeRewardMount_NoticeID int32

const (
	ProfileNoticeRewardMount_ID ProfileNoticeRewardMount_NoticeID = 7
)

var ProfileNoticeRewardMount_NoticeID_name = map[int32]string{
	7: "ID",
}
var ProfileNoticeRewardMount_NoticeID_value = map[string]int32{
	"ID": 7,
}

func (x ProfileNoticeRewardMount_NoticeID) Enum() *ProfileNoticeRewardMount_NoticeID {
	p := new(ProfileNoticeRewardMount_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeRewardMount_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeRewardMount_NoticeID_name, int32(x))
}
func (x *ProfileNoticeRewardMount_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeRewardMount_NoticeID_value, data, "ProfileNoticeRewardMount_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeRewardMount_NoticeID(value)
	return nil
}
func (ProfileNoticeRewardMount_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40, 0}
}

type ProfileNoticeTavernBrawlRewards_NoticeID int32

const (
	ProfileNoticeTavernBrawlRewards_ID ProfileNoticeTavernBrawlRewards_NoticeID = 17
)

var ProfileNoticeTavernBrawlRewards_NoticeID_name = map[int32]string{
	17: "ID",
}
var ProfileNoticeTavernBrawlRewards_NoticeID_value = map[string]int32{
	"ID": 17,
}

func (x ProfileNoticeTavernBrawlRewards_NoticeID) Enum() *ProfileNoticeTavernBrawlRewards_NoticeID {
	p := new(ProfileNoticeTavernBrawlRewards_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeTavernBrawlRewards_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeTavernBrawlRewards_NoticeID_name, int32(x))
}
func (x *ProfileNoticeTavernBrawlRewards_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeTavernBrawlRewards_NoticeID_value, data, "ProfileNoticeTavernBrawlRewards_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeTavernBrawlRewards_NoticeID(value)
	return nil
}
func (ProfileNoticeTavernBrawlRewards_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41, 0}
}

type ProfileNoticeTavernBrawlTicket_NoticeID int32

const (
	ProfileNoticeTavernBrawlTicket_ID ProfileNoticeTavernBrawlTicket_NoticeID = 18
)

var ProfileNoticeTavernBrawlTicket_NoticeID_name = map[int32]string{
	18: "ID",
}
var ProfileNoticeTavernBrawlTicket_NoticeID_value = map[string]int32{
	"ID": 18,
}

func (x ProfileNoticeTavernBrawlTicket_NoticeID) Enum() *ProfileNoticeTavernBrawlTicket_NoticeID {
	p := new(ProfileNoticeTavernBrawlTicket_NoticeID)
	*p = x
	return p
}
func (x ProfileNoticeTavernBrawlTicket_NoticeID) String() string {
	return proto.EnumName(ProfileNoticeTavernBrawlTicket_NoticeID_name, int32(x))
}
func (x *ProfileNoticeTavernBrawlTicket_NoticeID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProfileNoticeTavernBrawlTicket_NoticeID_value, data, "ProfileNoticeTavernBrawlTicket_NoticeID")
	if err != nil {
		return err
	}
	*x = ProfileNoticeTavernBrawlTicket_NoticeID(value)
	return nil
}
func (ProfileNoticeTavernBrawlTicket_NoticeID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42, 0}
}

type AccountLicenseInfo struct {
	License          *int64  `protobuf:"varint,1,req,name=license" json:"license,omitempty"`
	Flags            *uint64 `protobuf:"varint,2,req,name=flags" json:"flags,omitempty"`
	CasId            *int64  `protobuf:"varint,3,req,name=cas_id,json=casId" json:"cas_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AccountLicenseInfo) Reset()                    { *m = AccountLicenseInfo{} }
func (m *AccountLicenseInfo) String() string            { return proto.CompactTextString(m) }
func (*AccountLicenseInfo) ProtoMessage()               {}
func (*AccountLicenseInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountLicenseInfo) GetLicense() int64 {
	if m != nil && m.License != nil {
		return *m.License
	}
	return 0
}

func (m *AccountLicenseInfo) GetFlags() uint64 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *AccountLicenseInfo) GetCasId() int64 {
	if m != nil && m.CasId != nil {
		return *m.CasId
	}
	return 0
}

type AdventureProgress struct {
	WingId           *int32  `protobuf:"varint,1,req,name=wing_id,json=wingId" json:"wing_id,omitempty"`
	Progress         *int32  `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	Ack              *int32  `protobuf:"varint,3,opt,name=ack,def=0" json:"ack,omitempty"`
	Flags            *uint64 `protobuf:"varint,4,req,name=flags" json:"flags,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AdventureProgress) Reset()                    { *m = AdventureProgress{} }
func (m *AdventureProgress) String() string            { return proto.CompactTextString(m) }
func (*AdventureProgress) ProtoMessage()               {}
func (*AdventureProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_AdventureProgress_Ack int32 = 0

func (m *AdventureProgress) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *AdventureProgress) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *AdventureProgress) GetAck() int32 {
	if m != nil && m.Ack != nil {
		return *m.Ack
	}
	return Default_AdventureProgress_Ack
}

func (m *AdventureProgress) GetFlags() uint64 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

type AssetKey struct {
	Type             *AssetType `protobuf:"varint,1,req,name=type,enum=pegasus.pegasusshared.AssetType" json:"type,omitempty"`
	AssetId          *int32     `protobuf:"varint,2,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *AssetKey) Reset()                    { *m = AssetKey{} }
func (m *AssetKey) String() string            { return proto.CompactTextString(m) }
func (*AssetKey) ProtoMessage()               {}
func (*AssetKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AssetKey) GetType() AssetType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return AssetType_ASSET_TYPE_SCENARIO
}

func (m *AssetKey) GetAssetId() int32 {
	if m != nil && m.AssetId != nil {
		return *m.AssetId
	}
	return 0
}

type AssetRecordInfo struct {
	Asset            *AssetKey `protobuf:"bytes,1,req,name=asset" json:"asset,omitempty"`
	RecordByteSize   *uint32   `protobuf:"varint,2,req,name=record_byte_size,json=recordByteSize" json:"record_byte_size,omitempty"`
	RecordHash       []byte    `protobuf:"bytes,3,req,name=record_hash,json=recordHash" json:"record_hash,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *AssetRecordInfo) Reset()                    { *m = AssetRecordInfo{} }
func (m *AssetRecordInfo) String() string            { return proto.CompactTextString(m) }
func (*AssetRecordInfo) ProtoMessage()               {}
func (*AssetRecordInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AssetRecordInfo) GetAsset() *AssetKey {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *AssetRecordInfo) GetRecordByteSize() uint32 {
	if m != nil && m.RecordByteSize != nil {
		return *m.RecordByteSize
	}
	return 0
}

func (m *AssetRecordInfo) GetRecordHash() []byte {
	if m != nil {
		return m.RecordHash
	}
	return nil
}

type BnetId struct {
	Hi               *uint64 `protobuf:"varint,1,req,name=hi" json:"hi,omitempty"`
	Lo               *uint64 `protobuf:"varint,2,req,name=lo" json:"lo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BnetId) Reset()                    { *m = BnetId{} }
func (m *BnetId) String() string            { return proto.CompactTextString(m) }
func (*BnetId) ProtoMessage()               {}
func (*BnetId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BnetId) GetHi() uint64 {
	if m != nil && m.Hi != nil {
		return *m.Hi
	}
	return 0
}

func (m *BnetId) GetLo() uint64 {
	if m != nil && m.Lo != nil {
		return *m.Lo
	}
	return 0
}

type BoosterInfo struct {
	Type             *int32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Count            *int32 `protobuf:"varint,3,req,name=count" json:"count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BoosterInfo) Reset()                    { *m = BoosterInfo{} }
func (m *BoosterInfo) String() string            { return proto.CompactTextString(m) }
func (*BoosterInfo) ProtoMessage()               {}
func (*BoosterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BoosterInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *BoosterInfo) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

type CachedCard struct {
	CardId           *int64 `protobuf:"varint,1,req,name=card_id,json=cardId" json:"card_id,omitempty"`
	AssetCardId      *int32 `protobuf:"varint,2,req,name=asset_card_id,json=assetCardId" json:"asset_card_id,omitempty"`
	UnixTimestamp    *int32 `protobuf:"varint,3,req,name=unix_timestamp,json=unixTimestamp" json:"unix_timestamp,omitempty"`
	IsSeen           *bool  `protobuf:"varint,4,req,name=is_seen,json=isSeen" json:"is_seen,omitempty"`
	Premium          *int32 `protobuf:"varint,5,req,name=premium" json:"premium,omitempty"`
	InsertSource     *int32 `protobuf:"varint,6,req,name=insert_source,json=insertSource" json:"insert_source,omitempty"`
	InsertData       *int64 `protobuf:"varint,7,req,name=insert_data,json=insertData" json:"insert_data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CachedCard) Reset()                    { *m = CachedCard{} }
func (m *CachedCard) String() string            { return proto.CompactTextString(m) }
func (*CachedCard) ProtoMessage()               {}
func (*CachedCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CachedCard) GetCardId() int64 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

func (m *CachedCard) GetAssetCardId() int32 {
	if m != nil && m.AssetCardId != nil {
		return *m.AssetCardId
	}
	return 0
}

func (m *CachedCard) GetUnixTimestamp() int32 {
	if m != nil && m.UnixTimestamp != nil {
		return *m.UnixTimestamp
	}
	return 0
}

func (m *CachedCard) GetIsSeen() bool {
	if m != nil && m.IsSeen != nil {
		return *m.IsSeen
	}
	return false
}

func (m *CachedCard) GetPremium() int32 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

func (m *CachedCard) GetInsertSource() int32 {
	if m != nil && m.InsertSource != nil {
		return *m.InsertSource
	}
	return 0
}

func (m *CachedCard) GetInsertData() int64 {
	if m != nil && m.InsertData != nil {
		return *m.InsertData
	}
	return 0
}

type CachedCollection struct {
	CardCollection   []*CachedCard `protobuf:"bytes,1,rep,name=card_collection,json=cardCollection" json:"card_collection,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CachedCollection) Reset()                    { *m = CachedCollection{} }
func (m *CachedCollection) String() string            { return proto.CompactTextString(m) }
func (*CachedCollection) ProtoMessage()               {}
func (*CachedCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CachedCollection) GetCardCollection() []*CachedCard {
	if m != nil {
		return m.CardCollection
	}
	return nil
}

type CardDef struct {
	Asset            *int32 `protobuf:"varint,1,req,name=asset" json:"asset,omitempty"`
	Premium          *int32 `protobuf:"varint,2,opt,name=premium" json:"premium,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CardDef) Reset()                    { *m = CardDef{} }
func (m *CardDef) String() string            { return proto.CompactTextString(m) }
func (*CardDef) ProtoMessage()               {}
func (*CardDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CardDef) GetAsset() int32 {
	if m != nil && m.Asset != nil {
		return *m.Asset
	}
	return 0
}

func (m *CardDef) GetPremium() int32 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

type CardStack struct {
	CardDef          *CardDef `protobuf:"bytes,1,req,name=card_def,json=cardDef" json:"card_def,omitempty"`
	LatestInsertDate *Date    `protobuf:"bytes,2,req,name=latest_insert_date,json=latestInsertDate" json:"latest_insert_date,omitempty"`
	Count            *int32   `protobuf:"varint,3,req,name=count" json:"count,omitempty"`
	NumSeen          *int32   `protobuf:"varint,4,req,name=num_seen,json=numSeen" json:"num_seen,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CardStack) Reset()                    { *m = CardStack{} }
func (m *CardStack) String() string            { return proto.CompactTextString(m) }
func (*CardStack) ProtoMessage()               {}
func (*CardStack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CardStack) GetCardDef() *CardDef {
	if m != nil {
		return m.CardDef
	}
	return nil
}

func (m *CardStack) GetLatestInsertDate() *Date {
	if m != nil {
		return m.LatestInsertDate
	}
	return nil
}

func (m *CardStack) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CardStack) GetNumSeen() int32 {
	if m != nil && m.NumSeen != nil {
		return *m.NumSeen
	}
	return 0
}

type DatabaseDeckCard struct {
	AssetCardId      *int32 `protobuf:"varint,1,req,name=asset_card_id,json=assetCardId" json:"asset_card_id,omitempty"`
	Premium          *int32 `protobuf:"varint,2,req,name=premium" json:"premium,omitempty"`
	Quantity         *int32 `protobuf:"varint,3,req,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DatabaseDeckCard) Reset()                    { *m = DatabaseDeckCard{} }
func (m *DatabaseDeckCard) String() string            { return proto.CompactTextString(m) }
func (*DatabaseDeckCard) ProtoMessage()               {}
func (*DatabaseDeckCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DatabaseDeckCard) GetAssetCardId() int32 {
	if m != nil && m.AssetCardId != nil {
		return *m.AssetCardId
	}
	return 0
}

func (m *DatabaseDeckCard) GetPremium() int32 {
	if m != nil && m.Premium != nil {
		return *m.Premium
	}
	return 0
}

func (m *DatabaseDeckCard) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

type DatabaseDeckContent struct {
	DeckCards        []*DatabaseDeckCard `protobuf:"bytes,1,rep,name=deck_cards,json=deckCards" json:"deck_cards,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *DatabaseDeckContent) Reset()                    { *m = DatabaseDeckContent{} }
func (m *DatabaseDeckContent) String() string            { return proto.CompactTextString(m) }
func (*DatabaseDeckContent) ProtoMessage()               {}
func (*DatabaseDeckContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DatabaseDeckContent) GetDeckCards() []*DatabaseDeckCard {
	if m != nil {
		return m.DeckCards
	}
	return nil
}

type Date struct {
	Year             *int32 `protobuf:"varint,1,req,name=year" json:"year,omitempty"`
	Month            *int32 `protobuf:"varint,2,req,name=month" json:"month,omitempty"`
	Day              *int32 `protobuf:"varint,3,req,name=day" json:"day,omitempty"`
	Hours            *int32 `protobuf:"varint,4,req,name=hours" json:"hours,omitempty"`
	Min              *int32 `protobuf:"varint,5,req,name=min" json:"min,omitempty"`
	Sec              *int32 `protobuf:"varint,6,req,name=sec" json:"sec,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Date) Reset()                    { *m = Date{} }
func (m *Date) String() string            { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()               {}
func (*Date) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Date) GetYear() int32 {
	if m != nil && m.Year != nil {
		return *m.Year
	}
	return 0
}

func (m *Date) GetMonth() int32 {
	if m != nil && m.Month != nil {
		return *m.Month
	}
	return 0
}

func (m *Date) GetDay() int32 {
	if m != nil && m.Day != nil {
		return *m.Day
	}
	return 0
}

func (m *Date) GetHours() int32 {
	if m != nil && m.Hours != nil {
		return *m.Hours
	}
	return 0
}

func (m *Date) GetMin() int32 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *Date) GetSec() int32 {
	if m != nil && m.Sec != nil {
		return *m.Sec
	}
	return 0
}

type DeckCardData struct {
	Def              *CardDef `protobuf:"bytes,1,req,name=def" json:"def,omitempty"`
	Qty              *int32   `protobuf:"varint,3,opt,name=qty" json:"qty,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DeckCardData) Reset()                    { *m = DeckCardData{} }
func (m *DeckCardData) String() string            { return proto.CompactTextString(m) }
func (*DeckCardData) ProtoMessage()               {}
func (*DeckCardData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeckCardData) GetDef() *CardDef {
	if m != nil {
		return m.Def
	}
	return nil
}

func (m *DeckCardData) GetQty() int32 {
	if m != nil && m.Qty != nil {
		return *m.Qty
	}
	return 0
}

type DeckInfo struct {
	Id               *int64          `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name             *string         `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	CardBack         *int32          `protobuf:"varint,3,req,name=card_back,json=cardBack" json:"card_back,omitempty"`
	Hero             *int32          `protobuf:"varint,4,req,name=hero" json:"hero,omitempty"`
	DeckType         *DeckType       `protobuf:"varint,5,req,name=deck_type,json=deckType,enum=pegasus.pegasusshared.DeckType" json:"deck_type,omitempty"`
	Validity         *uint64         `protobuf:"varint,6,req,name=validity" json:"validity,omitempty"`
	HeroPremium      *int32          `protobuf:"varint,7,req,name=hero_premium,json=heroPremium" json:"hero_premium,omitempty"`
	CardBackOverride *bool           `protobuf:"varint,8,req,name=card_back_override,json=cardBackOverride" json:"card_back_override,omitempty"`
	HeroOverride     *bool           `protobuf:"varint,9,req,name=hero_override,json=heroOverride" json:"hero_override,omitempty"`
	LastModified     *int64          `protobuf:"varint,10,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	SeasonId         *int32          `protobuf:"varint,11,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	SortOrder        *int64          `protobuf:"varint,12,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	CreateDate       *int64          `protobuf:"varint,13,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	SourceType       *DeckSourceType `protobuf:"varint,14,opt,name=source_type,json=sourceType,enum=pegasus.pegasusshared.DeckSourceType,def=0" json:"source_type,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *DeckInfo) Reset()                    { *m = DeckInfo{} }
func (m *DeckInfo) String() string            { return proto.CompactTextString(m) }
func (*DeckInfo) ProtoMessage()               {}
func (*DeckInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

const Default_DeckInfo_SourceType DeckSourceType = DeckSourceType_DECK_SOURCE_TYPE_UNKNOWN

func (m *DeckInfo) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeckInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DeckInfo) GetCardBack() int32 {
	if m != nil && m.CardBack != nil {
		return *m.CardBack
	}
	return 0
}

func (m *DeckInfo) GetHero() int32 {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return 0
}

func (m *DeckInfo) GetDeckType() DeckType {
	if m != nil && m.DeckType != nil {
		return *m.DeckType
	}
	return DeckType_NORMAL_DECK
}

func (m *DeckInfo) GetValidity() uint64 {
	if m != nil && m.Validity != nil {
		return *m.Validity
	}
	return 0
}

func (m *DeckInfo) GetHeroPremium() int32 {
	if m != nil && m.HeroPremium != nil {
		return *m.HeroPremium
	}
	return 0
}

func (m *DeckInfo) GetCardBackOverride() bool {
	if m != nil && m.CardBackOverride != nil {
		return *m.CardBackOverride
	}
	return false
}

func (m *DeckInfo) GetHeroOverride() bool {
	if m != nil && m.HeroOverride != nil {
		return *m.HeroOverride
	}
	return false
}

func (m *DeckInfo) GetLastModified() int64 {
	if m != nil && m.LastModified != nil {
		return *m.LastModified
	}
	return 0
}

func (m *DeckInfo) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *DeckInfo) GetSortOrder() int64 {
	if m != nil && m.SortOrder != nil {
		return *m.SortOrder
	}
	return 0
}

func (m *DeckInfo) GetCreateDate() int64 {
	if m != nil && m.CreateDate != nil {
		return *m.CreateDate
	}
	return 0
}

func (m *DeckInfo) GetSourceType() DeckSourceType {
	if m != nil && m.SourceType != nil {
		return *m.SourceType
	}
	return Default_DeckInfo_SourceType
}

type DeckRulesetDbRecord struct {
	Id               *int32                     `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Rules            []*DeckRulesetRuleDbRecord `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *DeckRulesetDbRecord) Reset()                    { *m = DeckRulesetDbRecord{} }
func (m *DeckRulesetDbRecord) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetDbRecord) ProtoMessage()               {}
func (*DeckRulesetDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeckRulesetDbRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeckRulesetDbRecord) GetRules() []*DeckRulesetRuleDbRecord {
	if m != nil {
		return m.Rules
	}
	return nil
}

type DeckRulesetRuleDbRecord struct {
	Id                *int32             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	DeckRulesetId     *int32             `protobuf:"varint,2,req,name=deck_ruleset_id,json=deckRulesetId" json:"deck_ruleset_id,omitempty"`
	AppliesToSubsetId *int32             `protobuf:"varint,3,opt,name=applies_to_subset_id,json=appliesToSubsetId" json:"applies_to_subset_id,omitempty"`
	AppliesToIsNot    *bool              `protobuf:"varint,4,opt,name=applies_to_is_not,json=appliesToIsNot" json:"applies_to_is_not,omitempty"`
	RuleType          *string            `protobuf:"bytes,5,req,name=rule_type,json=ruleType" json:"rule_type,omitempty"`
	RuleIsNot         *bool              `protobuf:"varint,6,req,name=rule_is_not,json=ruleIsNot" json:"rule_is_not,omitempty"`
	MinValue          *int32             `protobuf:"varint,7,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue          *int32             `protobuf:"varint,8,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	Tag               *int32             `protobuf:"varint,9,opt,name=tag" json:"tag,omitempty"`
	TagMinValue       *int32             `protobuf:"varint,10,opt,name=tag_min_value,json=tagMinValue" json:"tag_min_value,omitempty"`
	TagMaxValue       *int32             `protobuf:"varint,11,opt,name=tag_max_value,json=tagMaxValue" json:"tag_max_value,omitempty"`
	StringValue       *string            `protobuf:"bytes,12,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	TargetSubsetIds   []int32            `protobuf:"varint,13,rep,name=target_subset_ids,json=targetSubsetIds" json:"target_subset_ids,omitempty"`
	Strings           []*LocalizedString `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *DeckRulesetRuleDbRecord) Reset()                    { *m = DeckRulesetRuleDbRecord{} }
func (m *DeckRulesetRuleDbRecord) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetRuleDbRecord) ProtoMessage()               {}
func (*DeckRulesetRuleDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeckRulesetRuleDbRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetDeckRulesetId() int32 {
	if m != nil && m.DeckRulesetId != nil {
		return *m.DeckRulesetId
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetAppliesToSubsetId() int32 {
	if m != nil && m.AppliesToSubsetId != nil {
		return *m.AppliesToSubsetId
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetAppliesToIsNot() bool {
	if m != nil && m.AppliesToIsNot != nil {
		return *m.AppliesToIsNot
	}
	return false
}

func (m *DeckRulesetRuleDbRecord) GetRuleType() string {
	if m != nil && m.RuleType != nil {
		return *m.RuleType
	}
	return ""
}

func (m *DeckRulesetRuleDbRecord) GetRuleIsNot() bool {
	if m != nil && m.RuleIsNot != nil {
		return *m.RuleIsNot
	}
	return false
}

func (m *DeckRulesetRuleDbRecord) GetMinValue() int32 {
	if m != nil && m.MinValue != nil {
		return *m.MinValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetMaxValue() int32 {
	if m != nil && m.MaxValue != nil {
		return *m.MaxValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTag() int32 {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTagMinValue() int32 {
	if m != nil && m.TagMinValue != nil {
		return *m.TagMinValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetTagMaxValue() int32 {
	if m != nil && m.TagMaxValue != nil {
		return *m.TagMaxValue
	}
	return 0
}

func (m *DeckRulesetRuleDbRecord) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *DeckRulesetRuleDbRecord) GetTargetSubsetIds() []int32 {
	if m != nil {
		return m.TargetSubsetIds
	}
	return nil
}

func (m *DeckRulesetRuleDbRecord) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

type DeckRulesetValidationResults struct {
	DeckRulesetId    *int32                  `protobuf:"varint,1,req,name=deck_ruleset_id,json=deckRulesetId,def=0" json:"deck_ruleset_id,omitempty"`
	ErrorCode        *ErrorCode              `protobuf:"varint,2,opt,name=error_code,json=errorCode,enum=pegasus.pegasusshared.ErrorCode,def=0" json:"error_code,omitempty"`
	Violations       []*DeckRulesetViolation `protobuf:"bytes,3,rep,name=violations" json:"violations,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *DeckRulesetValidationResults) Reset()                    { *m = DeckRulesetValidationResults{} }
func (m *DeckRulesetValidationResults) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetValidationResults) ProtoMessage()               {}
func (*DeckRulesetValidationResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

const Default_DeckRulesetValidationResults_DeckRulesetId int32 = 0
const Default_DeckRulesetValidationResults_ErrorCode ErrorCode = ErrorCode_ERROR_OK

func (m *DeckRulesetValidationResults) GetDeckRulesetId() int32 {
	if m != nil && m.DeckRulesetId != nil {
		return *m.DeckRulesetId
	}
	return Default_DeckRulesetValidationResults_DeckRulesetId
}

func (m *DeckRulesetValidationResults) GetErrorCode() ErrorCode {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Default_DeckRulesetValidationResults_ErrorCode
}

func (m *DeckRulesetValidationResults) GetViolations() []*DeckRulesetViolation {
	if m != nil {
		return m.Violations
	}
	return nil
}

type DeckRulesetViolation struct {
	Card             *CardDef `protobuf:"bytes,1,opt,name=card" json:"card,omitempty"`
	Count            *int32   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	DeckRuleId       *int32   `protobuf:"varint,100,req,name=deck_rule_id,json=deckRuleId" json:"deck_rule_id,omitempty"`
	DeckRuleDesc     *string  `protobuf:"bytes,101,opt,name=deck_rule_desc,json=deckRuleDesc" json:"deck_rule_desc,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DeckRulesetViolation) Reset()                    { *m = DeckRulesetViolation{} }
func (m *DeckRulesetViolation) String() string            { return proto.CompactTextString(m) }
func (*DeckRulesetViolation) ProtoMessage()               {}
func (*DeckRulesetViolation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeckRulesetViolation) GetCard() *CardDef {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *DeckRulesetViolation) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *DeckRulesetViolation) GetDeckRuleId() int32 {
	if m != nil && m.DeckRuleId != nil {
		return *m.DeckRuleId
	}
	return 0
}

func (m *DeckRulesetViolation) GetDeckRuleDesc() string {
	if m != nil && m.DeckRuleDesc != nil {
		return *m.DeckRuleDesc
	}
	return ""
}

type FavoriteHero struct {
	ClassId          *int32   `protobuf:"varint,1,req,name=class_id,json=classId" json:"class_id,omitempty"`
	Hero             *CardDef `protobuf:"bytes,2,req,name=hero" json:"hero,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FavoriteHero) Reset()                    { *m = FavoriteHero{} }
func (m *FavoriteHero) String() string            { return proto.CompactTextString(m) }
func (*FavoriteHero) ProtoMessage()               {}
func (*FavoriteHero) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *FavoriteHero) GetClassId() int32 {
	if m != nil && m.ClassId != nil {
		return *m.ClassId
	}
	return 0
}

func (m *FavoriteHero) GetHero() *CardDef {
	if m != nil {
		return m.Hero
	}
	return nil
}

type LocalizedString struct {
	Key              *string                 `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	DeprecatedValue  *string                 `protobuf:"bytes,2,opt,name=deprecated_value,json=deprecatedValue" json:"deprecated_value,omitempty"`
	DeprecatedLocale *int32                  `protobuf:"varint,3,opt,name=deprecated_locale,json=deprecatedLocale" json:"deprecated_locale,omitempty"`
	Values           []*LocalizedStringValue `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *LocalizedString) Reset()                    { *m = LocalizedString{} }
func (m *LocalizedString) String() string            { return proto.CompactTextString(m) }
func (*LocalizedString) ProtoMessage()               {}
func (*LocalizedString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *LocalizedString) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *LocalizedString) GetDeprecatedValue() string {
	if m != nil && m.DeprecatedValue != nil {
		return *m.DeprecatedValue
	}
	return ""
}

func (m *LocalizedString) GetDeprecatedLocale() int32 {
	if m != nil && m.DeprecatedLocale != nil {
		return *m.DeprecatedLocale
	}
	return 0
}

func (m *LocalizedString) GetValues() []*LocalizedStringValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type LocalizedStringValue struct {
	Locale           *int32  `protobuf:"varint,1,req,name=locale" json:"locale,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LocalizedStringValue) Reset()                    { *m = LocalizedStringValue{} }
func (m *LocalizedStringValue) String() string            { return proto.CompactTextString(m) }
func (*LocalizedStringValue) ProtoMessage()               {}
func (*LocalizedStringValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *LocalizedStringValue) GetLocale() int32 {
	if m != nil && m.Locale != nil {
		return *m.Locale
	}
	return 0
}

func (m *LocalizedStringValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Platform struct {
	Os                     *int32  `protobuf:"varint,1,req,name=os" json:"os,omitempty"`
	Screen                 *int32  `protobuf:"varint,2,req,name=screen" json:"screen,omitempty"`
	Name                   *string `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	Store                  *int32  `protobuf:"varint,4,opt,name=store" json:"store,omitempty"`
	UniqueDeviceIdentifier *string `protobuf:"bytes,5,opt,name=unique_device_identifier,json=uniqueDeviceIdentifier" json:"unique_device_identifier,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *Platform) Reset()                    { *m = Platform{} }
func (m *Platform) String() string            { return proto.CompactTextString(m) }
func (*Platform) ProtoMessage()               {}
func (*Platform) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Platform) GetOs() int32 {
	if m != nil && m.Os != nil {
		return *m.Os
	}
	return 0
}

func (m *Platform) GetScreen() int32 {
	if m != nil && m.Screen != nil {
		return *m.Screen
	}
	return 0
}

func (m *Platform) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Platform) GetStore() int32 {
	if m != nil && m.Store != nil {
		return *m.Store
	}
	return 0
}

func (m *Platform) GetUniqueDeviceIdentifier() string {
	if m != nil && m.UniqueDeviceIdentifier != nil {
		return *m.UniqueDeviceIdentifier
	}
	return ""
}

type PlayerIdentity struct {
	PlayerId         *int64  `protobuf:"varint,1,req,name=player_id,json=playerId" json:"player_id,omitempty"`
	GameAccount      *BnetId `protobuf:"bytes,2,opt,name=game_account,json=gameAccount" json:"game_account,omitempty"`
	Account          *BnetId `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PlayerIdentity) Reset()                    { *m = PlayerIdentity{} }
func (m *PlayerIdentity) String() string            { return proto.CompactTextString(m) }
func (*PlayerIdentity) ProtoMessage()               {}
func (*PlayerIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PlayerIdentity) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *PlayerIdentity) GetGameAccount() *BnetId {
	if m != nil {
		return m.GameAccount
	}
	return nil
}

func (m *PlayerIdentity) GetAccount() *BnetId {
	if m != nil {
		return m.Account
	}
	return nil
}

type PlayQueueInfo struct {
	GameType         *BnetGameType `protobuf:"varint,1,req,name=game_type,json=gameType,enum=pegasus.pegasusshared.BnetGameType" json:"game_type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *PlayQueueInfo) Reset()                    { *m = PlayQueueInfo{} }
func (m *PlayQueueInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayQueueInfo) ProtoMessage()               {}
func (*PlayQueueInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *PlayQueueInfo) GetGameType() BnetGameType {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return BnetGameType_BGT_UNKNOWN
}

type ProfileNoticeAccountLicense struct {
	License          *int64 `protobuf:"varint,1,req,name=license" json:"license,omitempty"`
	CasId            *int64 `protobuf:"varint,2,req,name=cas_id,json=casId" json:"cas_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeAccountLicense) Reset()                    { *m = ProfileNoticeAccountLicense{} }
func (m *ProfileNoticeAccountLicense) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeAccountLicense) ProtoMessage()               {}
func (*ProfileNoticeAccountLicense) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ProfileNoticeAccountLicense) GetLicense() int64 {
	if m != nil && m.License != nil {
		return *m.License
	}
	return 0
}

func (m *ProfileNoticeAccountLicense) GetCasId() int64 {
	if m != nil && m.CasId != nil {
		return *m.CasId
	}
	return 0
}

type ProfileNoticeAdventureProgress struct {
	WingId           *int32 `protobuf:"varint,1,req,name=wing_id,json=wingId" json:"wing_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeAdventureProgress) Reset()                    { *m = ProfileNoticeAdventureProgress{} }
func (m *ProfileNoticeAdventureProgress) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeAdventureProgress) ProtoMessage()               {}
func (*ProfileNoticeAdventureProgress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ProfileNoticeAdventureProgress) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

type ProfileNoticeBonusStars struct {
	StarLevel        *int32 `protobuf:"varint,1,req,name=star_level,json=starLevel" json:"star_level,omitempty"`
	Stars            *int32 `protobuf:"varint,2,req,name=stars" json:"stars,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeBonusStars) Reset()                    { *m = ProfileNoticeBonusStars{} }
func (m *ProfileNoticeBonusStars) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeBonusStars) ProtoMessage()               {}
func (*ProfileNoticeBonusStars) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ProfileNoticeBonusStars) GetStarLevel() int32 {
	if m != nil && m.StarLevel != nil {
		return *m.StarLevel
	}
	return 0
}

func (m *ProfileNoticeBonusStars) GetStars() int32 {
	if m != nil && m.Stars != nil {
		return *m.Stars
	}
	return 0
}

type ProfileNoticeCardBack struct {
	CardBack         *int32 `protobuf:"varint,1,req,name=card_back,json=cardBack" json:"card_back,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeCardBack) Reset()                    { *m = ProfileNoticeCardBack{} }
func (m *ProfileNoticeCardBack) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeCardBack) ProtoMessage()               {}
func (*ProfileNoticeCardBack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ProfileNoticeCardBack) GetCardBack() int32 {
	if m != nil && m.CardBack != nil {
		return *m.CardBack
	}
	return 0
}

type ProfileNoticeDisconnectedGameResult struct {
	GameType         *GameType                                         `protobuf:"varint,8,opt,name=game_type,json=gameType,enum=pegasus.pegasusshared.GameType,def=0" json:"game_type,omitempty"`
	MissionId        *int32                                            `protobuf:"varint,9,opt,name=mission_id,json=missionId" json:"mission_id,omitempty"`
	GameResult       *ProfileNoticeDisconnectedGameResult_GameResult   `protobuf:"varint,10,opt,name=game_result,json=gameResult,enum=pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_GameResult,def=0" json:"game_result,omitempty"`
	YourResult       *ProfileNoticeDisconnectedGameResult_PlayerResult `protobuf:"varint,11,opt,name=your_result,json=yourResult,enum=pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult,def=0" json:"your_result,omitempty"`
	OpponentResult   *ProfileNoticeDisconnectedGameResult_PlayerResult `protobuf:"varint,12,opt,name=opponent_result,json=opponentResult,enum=pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult,def=0" json:"opponent_result,omitempty"`
	FormatType       *FormatType                                       `protobuf:"varint,13,opt,name=format_type,json=formatType,enum=pegasus.pegasusshared.FormatType,def=0" json:"format_type,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *ProfileNoticeDisconnectedGameResult) Reset()         { *m = ProfileNoticeDisconnectedGameResult{} }
func (m *ProfileNoticeDisconnectedGameResult) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeDisconnectedGameResult) ProtoMessage()    {}
func (*ProfileNoticeDisconnectedGameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

const Default_ProfileNoticeDisconnectedGameResult_GameType GameType = GameType_GT_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_GameResult ProfileNoticeDisconnectedGameResult_GameResult = ProfileNoticeDisconnectedGameResult_GR_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_YourResult ProfileNoticeDisconnectedGameResult_PlayerResult = ProfileNoticeDisconnectedGameResult_PR_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_OpponentResult ProfileNoticeDisconnectedGameResult_PlayerResult = ProfileNoticeDisconnectedGameResult_PR_UNKNOWN
const Default_ProfileNoticeDisconnectedGameResult_FormatType FormatType = FormatType_FT_UNKNOWN

func (m *ProfileNoticeDisconnectedGameResult) GetGameType() GameType {
	if m != nil && m.GameType != nil {
		return *m.GameType
	}
	return Default_ProfileNoticeDisconnectedGameResult_GameType
}

func (m *ProfileNoticeDisconnectedGameResult) GetMissionId() int32 {
	if m != nil && m.MissionId != nil {
		return *m.MissionId
	}
	return 0
}

func (m *ProfileNoticeDisconnectedGameResult) GetGameResult() ProfileNoticeDisconnectedGameResult_GameResult {
	if m != nil && m.GameResult != nil {
		return *m.GameResult
	}
	return Default_ProfileNoticeDisconnectedGameResult_GameResult
}

func (m *ProfileNoticeDisconnectedGameResult) GetYourResult() ProfileNoticeDisconnectedGameResult_PlayerResult {
	if m != nil && m.YourResult != nil {
		return *m.YourResult
	}
	return Default_ProfileNoticeDisconnectedGameResult_YourResult
}

func (m *ProfileNoticeDisconnectedGameResult) GetOpponentResult() ProfileNoticeDisconnectedGameResult_PlayerResult {
	if m != nil && m.OpponentResult != nil {
		return *m.OpponentResult
	}
	return Default_ProfileNoticeDisconnectedGameResult_OpponentResult
}

func (m *ProfileNoticeDisconnectedGameResult) GetFormatType() FormatType {
	if m != nil && m.FormatType != nil {
		return *m.FormatType
	}
	return Default_ProfileNoticeDisconnectedGameResult_FormatType
}

type ProfileNoticeLevelUp struct {
	HeroClass        *int32 `protobuf:"varint,1,req,name=hero_class,json=heroClass" json:"hero_class,omitempty"`
	NewLevel         *int32 `protobuf:"varint,2,req,name=new_level,json=newLevel" json:"new_level,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeLevelUp) Reset()                    { *m = ProfileNoticeLevelUp{} }
func (m *ProfileNoticeLevelUp) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeLevelUp) ProtoMessage()               {}
func (*ProfileNoticeLevelUp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ProfileNoticeLevelUp) GetHeroClass() int32 {
	if m != nil && m.HeroClass != nil {
		return *m.HeroClass
	}
	return 0
}

func (m *ProfileNoticeLevelUp) GetNewLevel() int32 {
	if m != nil && m.NewLevel != nil {
		return *m.NewLevel
	}
	return 0
}

type ProfileNoticeMedal struct {
	StarLevel        *int32                        `protobuf:"varint,1,req,name=star_level,json=starLevel" json:"star_level,omitempty"`
	LegendRank       *int32                        `protobuf:"varint,2,opt,name=legend_rank,json=legendRank" json:"legend_rank,omitempty"`
	BestStarLevel    *int32                        `protobuf:"varint,3,opt,name=best_star_level,json=bestStarLevel" json:"best_star_level,omitempty"`
	Chest            *RewardChest                  `protobuf:"bytes,4,opt,name=chest" json:"chest,omitempty"`
	MedalType        *ProfileNoticeMedal_MedalType `protobuf:"varint,5,opt,name=medal_type,json=medalType,enum=pegasus.pegasusshared.ProfileNoticeMedal_MedalType,def=0" json:"medal_type,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *ProfileNoticeMedal) Reset()                    { *m = ProfileNoticeMedal{} }
func (m *ProfileNoticeMedal) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeMedal) ProtoMessage()               {}
func (*ProfileNoticeMedal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

const Default_ProfileNoticeMedal_MedalType ProfileNoticeMedal_MedalType = ProfileNoticeMedal_UNKNOWN_MEDAL

func (m *ProfileNoticeMedal) GetStarLevel() int32 {
	if m != nil && m.StarLevel != nil {
		return *m.StarLevel
	}
	return 0
}

func (m *ProfileNoticeMedal) GetLegendRank() int32 {
	if m != nil && m.LegendRank != nil {
		return *m.LegendRank
	}
	return 0
}

func (m *ProfileNoticeMedal) GetBestStarLevel() int32 {
	if m != nil && m.BestStarLevel != nil {
		return *m.BestStarLevel
	}
	return 0
}

func (m *ProfileNoticeMedal) GetChest() *RewardChest {
	if m != nil {
		return m.Chest
	}
	return nil
}

func (m *ProfileNoticeMedal) GetMedalType() ProfileNoticeMedal_MedalType {
	if m != nil && m.MedalType != nil {
		return *m.MedalType
	}
	return Default_ProfileNoticeMedal_MedalType
}

type ProfileNoticePreconDeck struct {
	Deck             *int64 `protobuf:"varint,1,req,name=deck" json:"deck,omitempty"`
	Hero             *int32 `protobuf:"varint,2,req,name=hero" json:"hero,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticePreconDeck) Reset()                    { *m = ProfileNoticePreconDeck{} }
func (m *ProfileNoticePreconDeck) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticePreconDeck) ProtoMessage()               {}
func (*ProfileNoticePreconDeck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ProfileNoticePreconDeck) GetDeck() int64 {
	if m != nil && m.Deck != nil {
		return *m.Deck
	}
	return 0
}

func (m *ProfileNoticePreconDeck) GetHero() int32 {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return 0
}

type ProfileNoticePurchase struct {
	ProductId        *string `protobuf:"bytes,1,req,name=product_id,json=productId" json:"product_id,omitempty"`
	Data             *int64  `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
	Currency         *int32  `protobuf:"varint,3,opt,name=currency" json:"currency,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProfileNoticePurchase) Reset()                    { *m = ProfileNoticePurchase{} }
func (m *ProfileNoticePurchase) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticePurchase) ProtoMessage()               {}
func (*ProfileNoticePurchase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ProfileNoticePurchase) GetProductId() string {
	if m != nil && m.ProductId != nil {
		return *m.ProductId
	}
	return ""
}

func (m *ProfileNoticePurchase) GetData() int64 {
	if m != nil && m.Data != nil {
		return *m.Data
	}
	return 0
}

func (m *ProfileNoticePurchase) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return 0
}

type ProfileNoticeRewardBooster struct {
	BoosterType      *int32 `protobuf:"varint,1,req,name=booster_type,json=boosterType" json:"booster_type,omitempty"`
	BoosterCount     *int32 `protobuf:"varint,2,req,name=booster_count,json=boosterCount" json:"booster_count,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardBooster) Reset()                    { *m = ProfileNoticeRewardBooster{} }
func (m *ProfileNoticeRewardBooster) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardBooster) ProtoMessage()               {}
func (*ProfileNoticeRewardBooster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ProfileNoticeRewardBooster) GetBoosterType() int32 {
	if m != nil && m.BoosterType != nil {
		return *m.BoosterType
	}
	return 0
}

func (m *ProfileNoticeRewardBooster) GetBoosterCount() int32 {
	if m != nil && m.BoosterCount != nil {
		return *m.BoosterCount
	}
	return 0
}

type ProfileNoticeRewardCard struct {
	Card             *CardDef `protobuf:"bytes,1,req,name=card" json:"card,omitempty"`
	Quantity         *int32   `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProfileNoticeRewardCard) Reset()                    { *m = ProfileNoticeRewardCard{} }
func (m *ProfileNoticeRewardCard) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardCard) ProtoMessage()               {}
func (*ProfileNoticeRewardCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ProfileNoticeRewardCard) GetCard() *CardDef {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *ProfileNoticeRewardCard) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

type ProfileNoticeRewardCard2X struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardCard2X) Reset()                    { *m = ProfileNoticeRewardCard2X{} }
func (m *ProfileNoticeRewardCard2X) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardCard2X) ProtoMessage()               {}
func (*ProfileNoticeRewardCard2X) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type ProfileNoticeRewardDust struct {
	Amount           *int32 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardDust) Reset()                    { *m = ProfileNoticeRewardDust{} }
func (m *ProfileNoticeRewardDust) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardDust) ProtoMessage()               {}
func (*ProfileNoticeRewardDust) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ProfileNoticeRewardDust) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type ProfileNoticeRewardForge struct {
	Quantity         *int32 `protobuf:"varint,1,req,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardForge) Reset()                    { *m = ProfileNoticeRewardForge{} }
func (m *ProfileNoticeRewardForge) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardForge) ProtoMessage()               {}
func (*ProfileNoticeRewardForge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ProfileNoticeRewardForge) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

type ProfileNoticeRewardGold struct {
	Amount           *int32 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardGold) Reset()                    { *m = ProfileNoticeRewardGold{} }
func (m *ProfileNoticeRewardGold) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardGold) ProtoMessage()               {}
func (*ProfileNoticeRewardGold) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ProfileNoticeRewardGold) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

type ProfileNoticeRewardMount struct {
	MountId          *int32 `protobuf:"varint,1,req,name=mount_id,json=mountId" json:"mount_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeRewardMount) Reset()                    { *m = ProfileNoticeRewardMount{} }
func (m *ProfileNoticeRewardMount) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeRewardMount) ProtoMessage()               {}
func (*ProfileNoticeRewardMount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ProfileNoticeRewardMount) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

type ProfileNoticeTavernBrawlRewards struct {
	RewardChest      *RewardChest `protobuf:"bytes,1,req,name=reward_chest,json=rewardChest" json:"reward_chest,omitempty"`
	NumWins          *int32       `protobuf:"varint,2,req,name=num_wins,json=numWins" json:"num_wins,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ProfileNoticeTavernBrawlRewards) Reset()         { *m = ProfileNoticeTavernBrawlRewards{} }
func (m *ProfileNoticeTavernBrawlRewards) String() string { return proto.CompactTextString(m) }
func (*ProfileNoticeTavernBrawlRewards) ProtoMessage()    {}
func (*ProfileNoticeTavernBrawlRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *ProfileNoticeTavernBrawlRewards) GetRewardChest() *RewardChest {
	if m != nil {
		return m.RewardChest
	}
	return nil
}

func (m *ProfileNoticeTavernBrawlRewards) GetNumWins() int32 {
	if m != nil && m.NumWins != nil {
		return *m.NumWins
	}
	return 0
}

type ProfileNoticeTavernBrawlTicket struct {
	TicketType       *int32 `protobuf:"varint,1,req,name=ticket_type,json=ticketType" json:"ticket_type,omitempty"`
	Quantity         *int32 `protobuf:"varint,2,req,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ProfileNoticeTavernBrawlTicket) Reset()                    { *m = ProfileNoticeTavernBrawlTicket{} }
func (m *ProfileNoticeTavernBrawlTicket) String() string            { return proto.CompactTextString(m) }
func (*ProfileNoticeTavernBrawlTicket) ProtoMessage()               {}
func (*ProfileNoticeTavernBrawlTicket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ProfileNoticeTavernBrawlTicket) GetTicketType() int32 {
	if m != nil && m.TicketType != nil {
		return *m.TicketType
	}
	return 0
}

func (m *ProfileNoticeTavernBrawlTicket) GetQuantity() int32 {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return 0
}

type RewardBag struct {
	RewardBooster    *ProfileNoticeRewardBooster `protobuf:"bytes,1,opt,name=reward_booster,json=rewardBooster" json:"reward_booster,omitempty"`
	RewardCard       *ProfileNoticeRewardCard    `protobuf:"bytes,2,opt,name=reward_card,json=rewardCard" json:"reward_card,omitempty"`
	RewardDust       *ProfileNoticeRewardDust    `protobuf:"bytes,3,opt,name=reward_dust,json=rewardDust" json:"reward_dust,omitempty"`
	RewardGold       *ProfileNoticeRewardGold    `protobuf:"bytes,4,opt,name=reward_gold,json=rewardGold" json:"reward_gold,omitempty"`
	RewardCardBack   *ProfileNoticeCardBack      `protobuf:"bytes,5,opt,name=reward_card_back,json=rewardCardBack" json:"reward_card_back,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *RewardBag) Reset()                    { *m = RewardBag{} }
func (m *RewardBag) String() string            { return proto.CompactTextString(m) }
func (*RewardBag) ProtoMessage()               {}
func (*RewardBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *RewardBag) GetRewardBooster() *ProfileNoticeRewardBooster {
	if m != nil {
		return m.RewardBooster
	}
	return nil
}

func (m *RewardBag) GetRewardCard() *ProfileNoticeRewardCard {
	if m != nil {
		return m.RewardCard
	}
	return nil
}

func (m *RewardBag) GetRewardDust() *ProfileNoticeRewardDust {
	if m != nil {
		return m.RewardDust
	}
	return nil
}

func (m *RewardBag) GetRewardGold() *ProfileNoticeRewardGold {
	if m != nil {
		return m.RewardGold
	}
	return nil
}

func (m *RewardBag) GetRewardCardBack() *ProfileNoticeCardBack {
	if m != nil {
		return m.RewardCardBack
	}
	return nil
}

type RewardChest struct {
	Bag1             *RewardBag   `protobuf:"bytes,1,opt,name=bag1" json:"bag1,omitempty"`
	Bag2             *RewardBag   `protobuf:"bytes,2,opt,name=bag2" json:"bag2,omitempty"`
	Bag3             *RewardBag   `protobuf:"bytes,3,opt,name=bag3" json:"bag3,omitempty"`
	Bag4             *RewardBag   `protobuf:"bytes,4,opt,name=bag4" json:"bag4,omitempty"`
	Bag5             *RewardBag   `protobuf:"bytes,5,opt,name=bag5" json:"bag5,omitempty"`
	Bag              []*RewardBag `protobuf:"bytes,6,rep,name=bag" json:"bag,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RewardChest) Reset()                    { *m = RewardChest{} }
func (m *RewardChest) String() string            { return proto.CompactTextString(m) }
func (*RewardChest) ProtoMessage()               {}
func (*RewardChest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *RewardChest) GetBag1() *RewardBag {
	if m != nil {
		return m.Bag1
	}
	return nil
}

func (m *RewardChest) GetBag2() *RewardBag {
	if m != nil {
		return m.Bag2
	}
	return nil
}

func (m *RewardChest) GetBag3() *RewardBag {
	if m != nil {
		return m.Bag3
	}
	return nil
}

func (m *RewardChest) GetBag4() *RewardBag {
	if m != nil {
		return m.Bag4
	}
	return nil
}

func (m *RewardChest) GetBag5() *RewardBag {
	if m != nil {
		return m.Bag5
	}
	return nil
}

func (m *RewardChest) GetBag() []*RewardBag {
	if m != nil {
		return m.Bag
	}
	return nil
}

type ScenarioDbRecord struct {
	Id                            *int32             `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	NoteDesc                      *string            `protobuf:"bytes,2,opt,name=note_desc,json=noteDesc" json:"note_desc,omitempty"`
	NumPlayers                    *int32             `protobuf:"varint,3,req,name=num_players,json=numPlayers" json:"num_players,omitempty"`
	Player1HeroCardId             *int64             `protobuf:"varint,4,req,name=player1_hero_card_id,json=player1HeroCardId" json:"player1_hero_card_id,omitempty"`
	Player2HeroCardId             *int64             `protobuf:"varint,5,req,name=player2_hero_card_id,json=player2HeroCardId" json:"player2_hero_card_id,omitempty"`
	IsExpert                      *bool              `protobuf:"varint,6,req,name=is_expert,json=isExpert" json:"is_expert,omitempty"`
	AdventureId                   *int32             `protobuf:"varint,7,req,name=adventure_id,json=adventureId" json:"adventure_id,omitempty"`
	AdventureModeId               *int32             `protobuf:"varint,8,opt,name=adventure_mode_id,json=adventureModeId" json:"adventure_mode_id,omitempty"`
	WingId                        *int32             `protobuf:"varint,9,req,name=wing_id,json=wingId" json:"wing_id,omitempty"`
	SortOrder                     *int32             `protobuf:"varint,10,req,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	ClientPlayer2HeroCardId       *int64             `protobuf:"varint,11,opt,name=client_player2_hero_card_id,json=clientPlayer2HeroCardId" json:"client_player2_hero_card_id,omitempty"`
	TavernBrawlTexture            *string            `protobuf:"bytes,12,opt,name=tavern_brawl_texture,json=tavernBrawlTexture" json:"tavern_brawl_texture,omitempty"`
	TavernBrawlTexturePhone       *string            `protobuf:"bytes,13,opt,name=tavern_brawl_texture_phone,json=tavernBrawlTexturePhone" json:"tavern_brawl_texture_phone,omitempty"`
	TavernBrawlTexturePhoneOffset *Vector2           `protobuf:"bytes,14,opt,name=tavern_brawl_texture_phone_offset,json=tavernBrawlTexturePhoneOffset" json:"tavern_brawl_texture_phone_offset,omitempty"`
	IsCoop                        *bool              `protobuf:"varint,15,opt,name=is_coop,json=isCoop" json:"is_coop,omitempty"`
	DeckRulesetId                 *int32             `protobuf:"varint,16,opt,name=deck_ruleset_id,json=deckRulesetId" json:"deck_ruleset_id,omitempty"`
	RuleType                      *RuleType          `protobuf:"varint,17,opt,name=rule_type,json=ruleType,enum=pegasus.pegasusshared.RuleType,def=0" json:"rule_type,omitempty"`
	Strings                       []*LocalizedString `protobuf:"bytes,100,rep,name=strings" json:"strings,omitempty"`
	XXX_unrecognized              []byte             `json:"-"`
}

func (m *ScenarioDbRecord) Reset()                    { *m = ScenarioDbRecord{} }
func (m *ScenarioDbRecord) String() string            { return proto.CompactTextString(m) }
func (*ScenarioDbRecord) ProtoMessage()               {}
func (*ScenarioDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

const Default_ScenarioDbRecord_RuleType RuleType = RuleType_RULE_NONE

func (m *ScenarioDbRecord) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ScenarioDbRecord) GetNoteDesc() string {
	if m != nil && m.NoteDesc != nil {
		return *m.NoteDesc
	}
	return ""
}

func (m *ScenarioDbRecord) GetNumPlayers() int32 {
	if m != nil && m.NumPlayers != nil {
		return *m.NumPlayers
	}
	return 0
}

func (m *ScenarioDbRecord) GetPlayer1HeroCardId() int64 {
	if m != nil && m.Player1HeroCardId != nil {
		return *m.Player1HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetPlayer2HeroCardId() int64 {
	if m != nil && m.Player2HeroCardId != nil {
		return *m.Player2HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetIsExpert() bool {
	if m != nil && m.IsExpert != nil {
		return *m.IsExpert
	}
	return false
}

func (m *ScenarioDbRecord) GetAdventureId() int32 {
	if m != nil && m.AdventureId != nil {
		return *m.AdventureId
	}
	return 0
}

func (m *ScenarioDbRecord) GetAdventureModeId() int32 {
	if m != nil && m.AdventureModeId != nil {
		return *m.AdventureModeId
	}
	return 0
}

func (m *ScenarioDbRecord) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *ScenarioDbRecord) GetSortOrder() int32 {
	if m != nil && m.SortOrder != nil {
		return *m.SortOrder
	}
	return 0
}

func (m *ScenarioDbRecord) GetClientPlayer2HeroCardId() int64 {
	if m != nil && m.ClientPlayer2HeroCardId != nil {
		return *m.ClientPlayer2HeroCardId
	}
	return 0
}

func (m *ScenarioDbRecord) GetTavernBrawlTexture() string {
	if m != nil && m.TavernBrawlTexture != nil {
		return *m.TavernBrawlTexture
	}
	return ""
}

func (m *ScenarioDbRecord) GetTavernBrawlTexturePhone() string {
	if m != nil && m.TavernBrawlTexturePhone != nil {
		return *m.TavernBrawlTexturePhone
	}
	return ""
}

func (m *ScenarioDbRecord) GetTavernBrawlTexturePhoneOffset() *Vector2 {
	if m != nil {
		return m.TavernBrawlTexturePhoneOffset
	}
	return nil
}

func (m *ScenarioDbRecord) GetIsCoop() bool {
	if m != nil && m.IsCoop != nil {
		return *m.IsCoop
	}
	return false
}

func (m *ScenarioDbRecord) GetDeckRulesetId() int32 {
	if m != nil && m.DeckRulesetId != nil {
		return *m.DeckRulesetId
	}
	return 0
}

func (m *ScenarioDbRecord) GetRuleType() RuleType {
	if m != nil && m.RuleType != nil {
		return *m.RuleType
	}
	return Default_ScenarioDbRecord_RuleType
}

func (m *ScenarioDbRecord) GetStrings() []*LocalizedString {
	if m != nil {
		return m.Strings
	}
	return nil
}

type SubsetCardListDbRecord struct {
	SubsetId         *int32  `protobuf:"varint,1,req,name=subset_id,json=subsetId" json:"subset_id,omitempty"`
	CardIds          []int32 `protobuf:"varint,2,rep,name=card_ids,json=cardIds" json:"card_ids,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SubsetCardListDbRecord) Reset()                    { *m = SubsetCardListDbRecord{} }
func (m *SubsetCardListDbRecord) String() string            { return proto.CompactTextString(m) }
func (*SubsetCardListDbRecord) ProtoMessage()               {}
func (*SubsetCardListDbRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *SubsetCardListDbRecord) GetSubsetId() int32 {
	if m != nil && m.SubsetId != nil {
		return *m.SubsetId
	}
	return 0
}

func (m *SubsetCardListDbRecord) GetCardIds() []int32 {
	if m != nil {
		return m.CardIds
	}
	return nil
}

type TavernBrawlPlayerRecord struct {
	RewardProgress         *int32                    `protobuf:"varint,1,req,name=reward_progress,json=rewardProgress" json:"reward_progress,omitempty"`
	GamesPlayed            *int32                    `protobuf:"varint,2,opt,name=games_played,json=gamesPlayed" json:"games_played,omitempty"`
	GamesWon               *int32                    `protobuf:"varint,3,req,name=games_won,json=gamesWon" json:"games_won,omitempty"`
	WinStreak              *int32                    `protobuf:"varint,4,opt,name=win_streak,json=winStreak" json:"win_streak,omitempty"`
	SessionStatus          *TavernBrawlStatus        `protobuf:"varint,5,opt,name=session_status,json=sessionStatus,enum=pegasus.pegasusshared.TavernBrawlStatus,def=0" json:"session_status,omitempty"`
	NumTicketsOwned        *int32                    `protobuf:"varint,6,opt,name=num_tickets_owned,json=numTicketsOwned" json:"num_tickets_owned,omitempty"`
	Session                *TavernBrawlPlayerSession `protobuf:"bytes,7,opt,name=session" json:"session,omitempty"`
	NumSessionsPurchasable *int32                    `protobuf:"varint,8,opt,name=num_sessions_purchasable,json=numSessionsPurchasable" json:"num_sessions_purchasable,omitempty"`
	XXX_unrecognized       []byte                    `json:"-"`
}

func (m *TavernBrawlPlayerRecord) Reset()                    { *m = TavernBrawlPlayerRecord{} }
func (m *TavernBrawlPlayerRecord) String() string            { return proto.CompactTextString(m) }
func (*TavernBrawlPlayerRecord) ProtoMessage()               {}
func (*TavernBrawlPlayerRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

const Default_TavernBrawlPlayerRecord_SessionStatus TavernBrawlStatus = TavernBrawlStatus_TB_STATUS_INVALID

func (m *TavernBrawlPlayerRecord) GetRewardProgress() int32 {
	if m != nil && m.RewardProgress != nil {
		return *m.RewardProgress
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetGamesPlayed() int32 {
	if m != nil && m.GamesPlayed != nil {
		return *m.GamesPlayed
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetGamesWon() int32 {
	if m != nil && m.GamesWon != nil {
		return *m.GamesWon
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetWinStreak() int32 {
	if m != nil && m.WinStreak != nil {
		return *m.WinStreak
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetSessionStatus() TavernBrawlStatus {
	if m != nil && m.SessionStatus != nil {
		return *m.SessionStatus
	}
	return Default_TavernBrawlPlayerRecord_SessionStatus
}

func (m *TavernBrawlPlayerRecord) GetNumTicketsOwned() int32 {
	if m != nil && m.NumTicketsOwned != nil {
		return *m.NumTicketsOwned
	}
	return 0
}

func (m *TavernBrawlPlayerRecord) GetSession() *TavernBrawlPlayerSession {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *TavernBrawlPlayerRecord) GetNumSessionsPurchasable() int32 {
	if m != nil && m.NumSessionsPurchasable != nil {
		return *m.NumSessionsPurchasable
	}
	return 0
}

type TavernBrawlPlayerSession struct {
	ErrorCode        *ErrorCode   `protobuf:"varint,1,opt,name=error_code,json=errorCode,enum=pegasus.pegasusshared.ErrorCode,def=0" json:"error_code,omitempty"`
	SeasonId         *int32       `protobuf:"varint,2,req,name=season_id,json=seasonId" json:"season_id,omitempty"`
	Wins             *int32       `protobuf:"varint,3,req,name=wins" json:"wins,omitempty"`
	Losses           *int32       `protobuf:"varint,4,req,name=losses" json:"losses,omitempty"`
	Chest            *RewardChest `protobuf:"bytes,5,opt,name=chest" json:"chest,omitempty"`
	DeckLocked       *bool        `protobuf:"varint,6,req,name=deck_locked,json=deckLocked" json:"deck_locked,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *TavernBrawlPlayerSession) Reset()                    { *m = TavernBrawlPlayerSession{} }
func (m *TavernBrawlPlayerSession) String() string            { return proto.CompactTextString(m) }
func (*TavernBrawlPlayerSession) ProtoMessage()               {}
func (*TavernBrawlPlayerSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

const Default_TavernBrawlPlayerSession_ErrorCode ErrorCode = ErrorCode_ERROR_OK

func (m *TavernBrawlPlayerSession) GetErrorCode() ErrorCode {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Default_TavernBrawlPlayerSession_ErrorCode
}

func (m *TavernBrawlPlayerSession) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetWins() int32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetLosses() int32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *TavernBrawlPlayerSession) GetChest() *RewardChest {
	if m != nil {
		return m.Chest
	}
	return nil
}

func (m *TavernBrawlPlayerSession) GetDeckLocked() bool {
	if m != nil && m.DeckLocked != nil {
		return *m.DeckLocked
	}
	return false
}

type TavernBrawlSpec struct {
	EndSecondsFromNow                 *uint64                  `protobuf:"varint,1,opt,name=end_seconds_from_now,json=endSecondsFromNow" json:"end_seconds_from_now,omitempty"`
	ScenarioId                        *int32                   `protobuf:"varint,2,req,name=scenario_id,json=scenarioId" json:"scenario_id,omitempty"`
	ScenarioRecordByteSize            *uint32                  `protobuf:"varint,3,req,name=scenario_record_byte_size,json=scenarioRecordByteSize" json:"scenario_record_byte_size,omitempty"`
	ScenarioRecordHash                []byte                   `protobuf:"bytes,4,req,name=scenario_record_hash,json=scenarioRecordHash" json:"scenario_record_hash,omitempty"`
	RewardType                        *RewardType              `protobuf:"varint,5,req,name=reward_type,json=rewardType,enum=pegasus.pegasusshared.RewardType" json:"reward_type,omitempty"`
	RewardData1                       *int64                   `protobuf:"varint,6,req,name=reward_data1,json=rewardData1" json:"reward_data1,omitempty"`
	RewardData2                       *int64                   `protobuf:"varint,7,req,name=reward_data2,json=rewardData2" json:"reward_data2,omitempty"`
	RewardTrigger                     *RewardTrigger           `protobuf:"varint,8,opt,name=reward_trigger,json=rewardTrigger,enum=pegasus.pegasusshared.RewardTrigger,def=0" json:"reward_trigger,omitempty"`
	FormatType                        *FormatType              `protobuf:"varint,9,opt,name=format_type,json=formatType,enum=pegasus.pegasusshared.FormatType,def=0" json:"format_type,omitempty"`
	SeasonId                          *int32                   `protobuf:"varint,11,req,name=season_id,json=seasonId" json:"season_id,omitempty"`
	TicketType                        *int32                   `protobuf:"varint,12,opt,name=ticket_type,json=ticketType" json:"ticket_type,omitempty"`
	MaxWins                           *int32                   `protobuf:"varint,13,opt,name=max_wins,json=maxWins" json:"max_wins,omitempty"`
	MaxLosses                         *int32                   `protobuf:"varint,14,opt,name=max_losses,json=maxLosses" json:"max_losses,omitempty"`
	ClosedToNewSessionsSecondsFromNow *uint64                  `protobuf:"varint,15,opt,name=closed_to_new_sessions_seconds_from_now,json=closedToNewSessionsSecondsFromNow" json:"closed_to_new_sessions_seconds_from_now,omitempty"`
	MaxSessions                       *int32                   `protobuf:"varint,16,opt,name=max_sessions,json=maxSessions" json:"max_sessions,omitempty"`
	FriendlyChallengeDisabled         *bool                    `protobuf:"varint,17,opt,name=friendly_challenge_disabled,json=friendlyChallengeDisabled" json:"friendly_challenge_disabled,omitempty"`
	SeasonEndSecondSpreadCount        *int32                   `protobuf:"varint,18,opt,name=season_end_second_spread_count,json=seasonEndSecondSpreadCount" json:"season_end_second_spread_count,omitempty"`
	AdditionalAssets                  []*AssetRecordInfo       `protobuf:"bytes,100,rep,name=additional_assets,json=additionalAssets" json:"additional_assets,omitempty"`
	MyRecord                          *TavernBrawlPlayerRecord `protobuf:"bytes,105,req,name=my_record,json=myRecord" json:"my_record,omitempty"`
	XXX_unrecognized                  []byte                   `json:"-"`
}

func (m *TavernBrawlSpec) Reset()                    { *m = TavernBrawlSpec{} }
func (m *TavernBrawlSpec) String() string            { return proto.CompactTextString(m) }
func (*TavernBrawlSpec) ProtoMessage()               {}
func (*TavernBrawlSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

const Default_TavernBrawlSpec_RewardTrigger RewardTrigger = RewardTrigger_REWARD_TRIGGER_UNKNOWN
const Default_TavernBrawlSpec_FormatType FormatType = FormatType_FT_UNKNOWN

func (m *TavernBrawlSpec) GetEndSecondsFromNow() uint64 {
	if m != nil && m.EndSecondsFromNow != nil {
		return *m.EndSecondsFromNow
	}
	return 0
}

func (m *TavernBrawlSpec) GetScenarioId() int32 {
	if m != nil && m.ScenarioId != nil {
		return *m.ScenarioId
	}
	return 0
}

func (m *TavernBrawlSpec) GetScenarioRecordByteSize() uint32 {
	if m != nil && m.ScenarioRecordByteSize != nil {
		return *m.ScenarioRecordByteSize
	}
	return 0
}

func (m *TavernBrawlSpec) GetScenarioRecordHash() []byte {
	if m != nil {
		return m.ScenarioRecordHash
	}
	return nil
}

func (m *TavernBrawlSpec) GetRewardType() RewardType {
	if m != nil && m.RewardType != nil {
		return *m.RewardType
	}
	return RewardType_REWARD_UNKNOWN
}

func (m *TavernBrawlSpec) GetRewardData1() int64 {
	if m != nil && m.RewardData1 != nil {
		return *m.RewardData1
	}
	return 0
}

func (m *TavernBrawlSpec) GetRewardData2() int64 {
	if m != nil && m.RewardData2 != nil {
		return *m.RewardData2
	}
	return 0
}

func (m *TavernBrawlSpec) GetRewardTrigger() RewardTrigger {
	if m != nil && m.RewardTrigger != nil {
		return *m.RewardTrigger
	}
	return Default_TavernBrawlSpec_RewardTrigger
}

func (m *TavernBrawlSpec) GetFormatType() FormatType {
	if m != nil && m.FormatType != nil {
		return *m.FormatType
	}
	return Default_TavernBrawlSpec_FormatType
}

func (m *TavernBrawlSpec) GetSeasonId() int32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *TavernBrawlSpec) GetTicketType() int32 {
	if m != nil && m.TicketType != nil {
		return *m.TicketType
	}
	return 0
}

func (m *TavernBrawlSpec) GetMaxWins() int32 {
	if m != nil && m.MaxWins != nil {
		return *m.MaxWins
	}
	return 0
}

func (m *TavernBrawlSpec) GetMaxLosses() int32 {
	if m != nil && m.MaxLosses != nil {
		return *m.MaxLosses
	}
	return 0
}

func (m *TavernBrawlSpec) GetClosedToNewSessionsSecondsFromNow() uint64 {
	if m != nil && m.ClosedToNewSessionsSecondsFromNow != nil {
		return *m.ClosedToNewSessionsSecondsFromNow
	}
	return 0
}

func (m *TavernBrawlSpec) GetMaxSessions() int32 {
	if m != nil && m.MaxSessions != nil {
		return *m.MaxSessions
	}
	return 0
}

func (m *TavernBrawlSpec) GetFriendlyChallengeDisabled() bool {
	if m != nil && m.FriendlyChallengeDisabled != nil {
		return *m.FriendlyChallengeDisabled
	}
	return false
}

func (m *TavernBrawlSpec) GetSeasonEndSecondSpreadCount() int32 {
	if m != nil && m.SeasonEndSecondSpreadCount != nil {
		return *m.SeasonEndSecondSpreadCount
	}
	return 0
}

func (m *TavernBrawlSpec) GetAdditionalAssets() []*AssetRecordInfo {
	if m != nil {
		return m.AdditionalAssets
	}
	return nil
}

func (m *TavernBrawlSpec) GetMyRecord() *TavernBrawlPlayerRecord {
	if m != nil {
		return m.MyRecord
	}
	return nil
}

type Vector2 struct {
	X                *float32 `protobuf:"fixed32,1,req,name=x,def=0" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,2,req,name=y,def=0" json:"y,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Vector2) Reset()                    { *m = Vector2{} }
func (m *Vector2) String() string            { return proto.CompactTextString(m) }
func (*Vector2) ProtoMessage()               {}
func (*Vector2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

const Default_Vector2_X float32 = 0
const Default_Vector2_Y float32 = 0

func (m *Vector2) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return Default_Vector2_X
}

func (m *Vector2) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return Default_Vector2_Y
}

func init() {
	proto.RegisterType((*AccountLicenseInfo)(nil), "pegasus.pegasusshared.AccountLicenseInfo")
	proto.RegisterType((*AdventureProgress)(nil), "pegasus.pegasusshared.AdventureProgress")
	proto.RegisterType((*AssetKey)(nil), "pegasus.pegasusshared.AssetKey")
	proto.RegisterType((*AssetRecordInfo)(nil), "pegasus.pegasusshared.AssetRecordInfo")
	proto.RegisterType((*BnetId)(nil), "pegasus.pegasusshared.BnetId")
	proto.RegisterType((*BoosterInfo)(nil), "pegasus.pegasusshared.BoosterInfo")
	proto.RegisterType((*CachedCard)(nil), "pegasus.pegasusshared.CachedCard")
	proto.RegisterType((*CachedCollection)(nil), "pegasus.pegasusshared.CachedCollection")
	proto.RegisterType((*CardDef)(nil), "pegasus.pegasusshared.CardDef")
	proto.RegisterType((*CardStack)(nil), "pegasus.pegasusshared.CardStack")
	proto.RegisterType((*DatabaseDeckCard)(nil), "pegasus.pegasusshared.DatabaseDeckCard")
	proto.RegisterType((*DatabaseDeckContent)(nil), "pegasus.pegasusshared.DatabaseDeckContent")
	proto.RegisterType((*Date)(nil), "pegasus.pegasusshared.Date")
	proto.RegisterType((*DeckCardData)(nil), "pegasus.pegasusshared.DeckCardData")
	proto.RegisterType((*DeckInfo)(nil), "pegasus.pegasusshared.DeckInfo")
	proto.RegisterType((*DeckRulesetDbRecord)(nil), "pegasus.pegasusshared.DeckRulesetDbRecord")
	proto.RegisterType((*DeckRulesetRuleDbRecord)(nil), "pegasus.pegasusshared.DeckRulesetRuleDbRecord")
	proto.RegisterType((*DeckRulesetValidationResults)(nil), "pegasus.pegasusshared.DeckRulesetValidationResults")
	proto.RegisterType((*DeckRulesetViolation)(nil), "pegasus.pegasusshared.DeckRulesetViolation")
	proto.RegisterType((*FavoriteHero)(nil), "pegasus.pegasusshared.FavoriteHero")
	proto.RegisterType((*LocalizedString)(nil), "pegasus.pegasusshared.LocalizedString")
	proto.RegisterType((*LocalizedStringValue)(nil), "pegasus.pegasusshared.LocalizedStringValue")
	proto.RegisterType((*Platform)(nil), "pegasus.pegasusshared.Platform")
	proto.RegisterType((*PlayerIdentity)(nil), "pegasus.pegasusshared.PlayerIdentity")
	proto.RegisterType((*PlayQueueInfo)(nil), "pegasus.pegasusshared.PlayQueueInfo")
	proto.RegisterType((*ProfileNoticeAccountLicense)(nil), "pegasus.pegasusshared.ProfileNoticeAccountLicense")
	proto.RegisterType((*ProfileNoticeAdventureProgress)(nil), "pegasus.pegasusshared.ProfileNoticeAdventureProgress")
	proto.RegisterType((*ProfileNoticeBonusStars)(nil), "pegasus.pegasusshared.ProfileNoticeBonusStars")
	proto.RegisterType((*ProfileNoticeCardBack)(nil), "pegasus.pegasusshared.ProfileNoticeCardBack")
	proto.RegisterType((*ProfileNoticeDisconnectedGameResult)(nil), "pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult")
	proto.RegisterType((*ProfileNoticeLevelUp)(nil), "pegasus.pegasusshared.ProfileNoticeLevelUp")
	proto.RegisterType((*ProfileNoticeMedal)(nil), "pegasus.pegasusshared.ProfileNoticeMedal")
	proto.RegisterType((*ProfileNoticePreconDeck)(nil), "pegasus.pegasusshared.ProfileNoticePreconDeck")
	proto.RegisterType((*ProfileNoticePurchase)(nil), "pegasus.pegasusshared.ProfileNoticePurchase")
	proto.RegisterType((*ProfileNoticeRewardBooster)(nil), "pegasus.pegasusshared.ProfileNoticeRewardBooster")
	proto.RegisterType((*ProfileNoticeRewardCard)(nil), "pegasus.pegasusshared.ProfileNoticeRewardCard")
	proto.RegisterType((*ProfileNoticeRewardCard2X)(nil), "pegasus.pegasusshared.ProfileNoticeRewardCard2x")
	proto.RegisterType((*ProfileNoticeRewardDust)(nil), "pegasus.pegasusshared.ProfileNoticeRewardDust")
	proto.RegisterType((*ProfileNoticeRewardForge)(nil), "pegasus.pegasusshared.ProfileNoticeRewardForge")
	proto.RegisterType((*ProfileNoticeRewardGold)(nil), "pegasus.pegasusshared.ProfileNoticeRewardGold")
	proto.RegisterType((*ProfileNoticeRewardMount)(nil), "pegasus.pegasusshared.ProfileNoticeRewardMount")
	proto.RegisterType((*ProfileNoticeTavernBrawlRewards)(nil), "pegasus.pegasusshared.ProfileNoticeTavernBrawlRewards")
	proto.RegisterType((*ProfileNoticeTavernBrawlTicket)(nil), "pegasus.pegasusshared.ProfileNoticeTavernBrawlTicket")
	proto.RegisterType((*RewardBag)(nil), "pegasus.pegasusshared.RewardBag")
	proto.RegisterType((*RewardChest)(nil), "pegasus.pegasusshared.RewardChest")
	proto.RegisterType((*ScenarioDbRecord)(nil), "pegasus.pegasusshared.ScenarioDbRecord")
	proto.RegisterType((*SubsetCardListDbRecord)(nil), "pegasus.pegasusshared.SubsetCardListDbRecord")
	proto.RegisterType((*TavernBrawlPlayerRecord)(nil), "pegasus.pegasusshared.TavernBrawlPlayerRecord")
	proto.RegisterType((*TavernBrawlPlayerSession)(nil), "pegasus.pegasusshared.TavernBrawlPlayerSession")
	proto.RegisterType((*TavernBrawlSpec)(nil), "pegasus.pegasusshared.TavernBrawlSpec")
	proto.RegisterType((*Vector2)(nil), "pegasus.pegasusshared.Vector2")
	proto.RegisterEnum("pegasus.pegasusshared.AssetType", AssetType_name, AssetType_value)
	proto.RegisterEnum("pegasus.pegasusshared.BattlePayProvider", BattlePayProvider_name, BattlePayProvider_value)
	proto.RegisterEnum("pegasus.pegasusshared.BnetGameType", BnetGameType_name, BnetGameType_value)
	proto.RegisterEnum("pegasus.pegasusshared.DatabaseAction", DatabaseAction_name, DatabaseAction_value)
	proto.RegisterEnum("pegasus.pegasusshared.DatabaseResult", DatabaseResult_name, DatabaseResult_value)
	proto.RegisterEnum("pegasus.pegasusshared.DeckSourceType", DeckSourceType_name, DeckSourceType_value)
	proto.RegisterEnum("pegasus.pegasusshared.DeckType", DeckType_name, DeckType_value)
	proto.RegisterEnum("pegasus.pegasusshared.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("pegasus.pegasusshared.FormatType", FormatType_name, FormatType_value)
	proto.RegisterEnum("pegasus.pegasusshared.GameType", GameType_name, GameType_value)
	proto.RegisterEnum("pegasus.pegasusshared.RecruitAFriendState", RecruitAFriendState_name, RecruitAFriendState_value)
	proto.RegisterEnum("pegasus.pegasusshared.ReturningPlayerStatus", ReturningPlayerStatus_name, ReturningPlayerStatus_value)
	proto.RegisterEnum("pegasus.pegasusshared.RewardTrigger", RewardTrigger_name, RewardTrigger_value)
	proto.RegisterEnum("pegasus.pegasusshared.RewardType", RewardType_name, RewardType_value)
	proto.RegisterEnum("pegasus.pegasusshared.RuleType", RuleType_name, RuleType_value)
	proto.RegisterEnum("pegasus.pegasusshared.TavernBrawlStatus", TavernBrawlStatus_name, TavernBrawlStatus_value)
	proto.RegisterEnum("pegasus.pegasusshared.AccountLicenseInfo_Flags", AccountLicenseInfo_Flags_name, AccountLicenseInfo_Flags_value)
	proto.RegisterEnum("pegasus.pegasusshared.AdventureProgress_Flags", AdventureProgress_Flags_name, AdventureProgress_Flags_value)
	proto.RegisterEnum("pegasus.pegasusshared.DeckInfo_ValidityFlags", DeckInfo_ValidityFlags_name, DeckInfo_ValidityFlags_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeAccountLicense_NoticeID", ProfileNoticeAccountLicense_NoticeID_name, ProfileNoticeAccountLicense_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeAdventureProgress_NoticeID", ProfileNoticeAdventureProgress_NoticeID_name, ProfileNoticeAdventureProgress_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeBonusStars_NoticeID", ProfileNoticeBonusStars_NoticeID_name, ProfileNoticeBonusStars_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeCardBack_NoticeID", ProfileNoticeCardBack_NoticeID_name, ProfileNoticeCardBack_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_GameResult", ProfileNoticeDisconnectedGameResult_GameResult_name, ProfileNoticeDisconnectedGameResult_GameResult_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_NoticeID", ProfileNoticeDisconnectedGameResult_NoticeID_name, ProfileNoticeDisconnectedGameResult_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult_PlayerResult", ProfileNoticeDisconnectedGameResult_PlayerResult_name, ProfileNoticeDisconnectedGameResult_PlayerResult_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeLevelUp_NoticeID", ProfileNoticeLevelUp_NoticeID_name, ProfileNoticeLevelUp_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeMedal_MedalType", ProfileNoticeMedal_MedalType_name, ProfileNoticeMedal_MedalType_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeMedal_NoticeID", ProfileNoticeMedal_NoticeID_name, ProfileNoticeMedal_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticePreconDeck_NoticeID", ProfileNoticePreconDeck_NoticeID_name, ProfileNoticePreconDeck_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticePurchase_NoticeID", ProfileNoticePurchase_NoticeID_name, ProfileNoticePurchase_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardBooster_NoticeID", ProfileNoticeRewardBooster_NoticeID_name, ProfileNoticeRewardBooster_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardCard_NoticeID", ProfileNoticeRewardCard_NoticeID_name, ProfileNoticeRewardCard_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardCard2X_NoticeID", ProfileNoticeRewardCard2X_NoticeID_name, ProfileNoticeRewardCard2X_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardDust_NoticeID", ProfileNoticeRewardDust_NoticeID_name, ProfileNoticeRewardDust_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardForge_NoticeID", ProfileNoticeRewardForge_NoticeID_name, ProfileNoticeRewardForge_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardGold_NoticeID", ProfileNoticeRewardGold_NoticeID_name, ProfileNoticeRewardGold_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeRewardMount_NoticeID", ProfileNoticeRewardMount_NoticeID_name, ProfileNoticeRewardMount_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeTavernBrawlRewards_NoticeID", ProfileNoticeTavernBrawlRewards_NoticeID_name, ProfileNoticeTavernBrawlRewards_NoticeID_value)
	proto.RegisterEnum("pegasus.pegasusshared.ProfileNoticeTavernBrawlTicket_NoticeID", ProfileNoticeTavernBrawlTicket_NoticeID_name, ProfileNoticeTavernBrawlTicket_NoticeID_value)
}

func init() { proto.RegisterFile("Pegasus/PegasusShared/PegasusShared.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x7b, 0x4b, 0x8c, 0x1b, 0xc9,
	0x79, 0xf0, 0x92, 0x1c, 0xce, 0x90, 0x1f, 0xe7, 0x51, 0x53, 0x9a, 0x95, 0x28, 0x69, 0xb5, 0x1a,
	0xf5, 0xbe, 0xb4, 0xb3, 0xfe, 0xb5, 0xbb, 0xb3, 0x6b, 0xd8, 0xd6, 0xef, 0x09, 0xb6, 0xc9, 0xee,
	0xe1, 0xb4, 0xc5, 0xe9, 0xe6, 0x56, 0x37, 0x67, 0x56, 0x0e, 0x9c, 0x4e, 0x8b, 0x5d, 0x9a, 0x69,
	0x88, 0xec, 0x9e, 0xed, 0x6e, 0x4a, 0x9a, 0x85, 0x03, 0xec, 0x61, 0x0f, 0x0e, 0x20, 0x20, 0x0f,
	0x2b, 0x76, 0x80, 0x5c, 0x7d, 0x70, 0x9c, 0x97, 0x0f, 0x89, 0xcf, 0xb6, 0xf3, 0x42, 0x80, 0x00,
	0xb9, 0xe5, 0x9e, 0x9b, 0x9d, 0x43, 0x00, 0x23, 0x87, 0x04, 0x08, 0x90, 0x04, 0xf5, 0x68, 0xb2,
	0xc9, 0x21, 0xa5, 0x59, 0x2c, 0xb2, 0x87, 0x1d, 0xd6, 0xf7, 0xae, 0xaf, 0xbe, 0xfa, 0xea, 0xab,
	0xaf, 0x4b, 0xf0, 0x66, 0x87, 0x1e, 0x79, 0xc9, 0x30, 0x79, 0x5b, 0xfe, 0xb5, 0x8f, 0xbd, 0x98,
	0xfa, 0x93, 0xa3, 0x5b, 0x27, 0x71, 0x94, 0x46, 0xf8, 0xc5, 0x13, 0x01, 0xbc, 0x25, 0xff, 0x26,
	0x1c, 0xa9, 0x44, 0x80, 0xd5, 0x5e, 0x2f, 0x1a, 0x86, 0x69, 0x3b, 0xe8, 0xd1, 0x30, 0xa1, 0x46,
	0x78, 0x3f, 0xc2, 0x75, 0x58, 0xea, 0x8b, 0x61, 0xbd, 0xb0, 0x59, 0xbc, 0x59, 0x22, 0xd9, 0x10,
	0x6f, 0x40, 0xf9, 0x7e, 0xdf, 0x3b, 0x4a, 0xea, 0xc5, 0xcd, 0xe2, 0xcd, 0x05, 0x22, 0x06, 0xf8,
	0x45, 0x58, 0xec, 0x79, 0x89, 0x1b, 0xf8, 0xf5, 0x12, 0x27, 0x2f, 0xf7, 0xbc, 0xc4, 0xf0, 0x15,
	0x0c, 0xe5, 0x5d, 0x8e, 0xaf, 0x42, 0xd9, 0x3a, 0x34, 0x75, 0x0d, 0x15, 0x94, 0x5f, 0x15, 0x61,
	0x5d, 0xf5, 0x1f, 0xd2, 0x30, 0x1d, 0xc6, 0xb4, 0x13, 0x47, 0x47, 0x31, 0x4d, 0x12, 0x7c, 0x09,
	0x96, 0x1e, 0x05, 0xe1, 0x11, 0x93, 0xc0, 0x14, 0x96, 0xc9, 0x22, 0x1b, 0x1a, 0x3e, 0xbe, 0x02,
	0x95, 0x13, 0x49, 0xc4, 0x55, 0x96, 0xc9, 0x68, 0x8c, 0x2f, 0x40, 0xc9, 0xeb, 0x3d, 0xa8, 0x97,
	0x36, 0x0b, 0x37, 0xcb, 0xb7, 0x0b, 0xef, 0x10, 0x36, 0x1a, 0x1b, 0xb8, 0x90, 0x33, 0x50, 0xf9,
	0xaf, 0xc2, 0x59, 0x53, 0xf0, 0x55, 0xb8, 0xa4, 0xe9, 0xbb, 0xba, 0xea, 0xb8, 0x7b, 0x3a, 0xb1,
	0x8c, 0xa6, 0xbb, 0x6f, 0xd8, 0xb6, 0x61, 0x99, 0xee, 0xbb, 0xa8, 0x38, 0x1f, 0xb9, 0x8d, 0x16,
	0xe6, 0x23, 0xdf, 0x43, 0x95, 0xf9, 0xc8, 0xf7, 0x11, 0xc2, 0xaf, 0xc1, 0xa6, 0x44, 0x36, 0xdb,
	0xaa, 0x6d, 0xbb, 0xcd, 0x3d, 0xb5, 0xdd, 0xd6, 0xcd, 0x96, 0x9e, 0x53, 0xfe, 0x69, 0xf1, 0x1c,
	0x64, 0xdb, 0xe8, 0xd3, 0x85, 0x73, 0x90, 0xbd, 0x87, 0x3e, 0xad, 0x28, 0xbf, 0x0e, 0x15, 0x35,
	0x49, 0x68, 0x7a, 0x87, 0x9e, 0xe2, 0xf7, 0x61, 0x21, 0x3d, 0x3d, 0x11, 0xeb, 0xba, 0xba, 0xbd,
	0x79, 0x6b, 0x66, 0x58, 0xdc, 0xe2, 0xe4, 0xce, 0xe9, 0x09, 0x25, 0x9c, 0x1a, 0x5f, 0x86, 0x8a,
	0xc7, 0x40, 0x6c, 0x81, 0x8a, 0xcc, 0xdf, 0x64, 0x89, 0x8f, 0x0d, 0x5f, 0xf9, 0x6e, 0x01, 0xd6,
	0x38, 0x39, 0xa1, 0xbd, 0x28, 0xf6, 0x79, 0xfc, 0x7c, 0x19, 0xca, 0x1c, 0xcd, 0xb5, 0xd4, 0xb6,
	0xaf, 0x3f, 0x4b, 0xcb, 0x1d, 0x7a, 0x4a, 0x04, 0x35, 0xbe, 0x09, 0x28, 0xe6, 0x42, 0xdc, 0x7b,
	0xa7, 0x29, 0x75, 0x93, 0xe0, 0x13, 0xca, 0x17, 0x7d, 0x85, 0xac, 0x0a, 0x78, 0xe3, 0x34, 0xa5,
	0x76, 0xf0, 0x09, 0xc5, 0xd7, 0xa1, 0x26, 0x29, 0x8f, 0xbd, 0xe4, 0x98, 0x47, 0xdd, 0x32, 0x01,
	0x01, 0xda, 0xf3, 0x92, 0x63, 0xe5, 0x26, 0x2c, 0x36, 0x42, 0x66, 0x1f, 0x5e, 0x85, 0xe2, 0x71,
	0xc0, 0x0d, 0x59, 0x20, 0xc5, 0xe3, 0x80, 0x8d, 0xfb, 0x91, 0x0c, 0xdf, 0x62, 0x3f, 0x52, 0xbe,
	0x02, 0xb5, 0x46, 0x14, 0x25, 0x29, 0x8d, 0xb9, 0xe9, 0x58, 0xfa, 0x47, 0x04, 0x9b, 0x98, 0xfd,
	0x06, 0x94, 0xf9, 0x16, 0xe1, 0x7a, 0xca, 0x44, 0x0c, 0x94, 0x5f, 0x16, 0x00, 0x9a, 0x5e, 0xef,
	0x98, 0xfa, 0x4d, 0x2f, 0xf6, 0x59, 0x08, 0xf7, 0xbc, 0xd8, 0xcf, 0x42, 0xb8, 0x44, 0x16, 0xd9,
	0xd0, 0xf0, 0xb1, 0x02, 0x2b, 0xc2, 0x77, 0x19, 0x5a, 0x88, 0xae, 0x71, 0x60, 0x53, 0xd0, 0xbc,
	0x06, 0xab, 0xc3, 0x30, 0x78, 0xec, 0xa6, 0xc1, 0x80, 0x26, 0xa9, 0x37, 0x38, 0x91, 0xaa, 0x56,
	0x18, 0xd4, 0xc9, 0x80, 0x4c, 0x47, 0x90, 0xb8, 0x09, 0xa5, 0x21, 0x0f, 0xef, 0x0a, 0x59, 0x0c,
	0x12, 0x9b, 0xd2, 0x90, 0x6d, 0xd8, 0x93, 0x98, 0x0e, 0x82, 0xe1, 0xa0, 0x5e, 0xe6, 0x8c, 0xd9,
	0x10, 0xbf, 0x02, 0x2b, 0x41, 0x98, 0xd0, 0x38, 0x75, 0x93, 0x68, 0x18, 0xf7, 0x68, 0x7d, 0x91,
	0xe3, 0x97, 0x05, 0xd0, 0xe6, 0x30, 0xe6, 0x4e, 0x49, 0xe4, 0x7b, 0xa9, 0x57, 0x5f, 0xe2, 0xf6,
	0x83, 0x00, 0x69, 0x5e, 0xea, 0x29, 0xbf, 0x01, 0x48, 0x4e, 0x35, 0xea, 0xf7, 0x69, 0x2f, 0x0d,
	0xa2, 0x10, 0x7f, 0x03, 0xd6, 0xf8, 0x8c, 0x7a, 0x23, 0x50, 0xbd, 0xb0, 0x59, 0xba, 0x59, 0xdb,
	0xbe, 0x31, 0x67, 0xb9, 0xc7, 0xce, 0x22, 0xab, 0x8c, 0x73, 0x2c, 0x4b, 0xf9, 0x1a, 0x2c, 0x31,
	0xb8, 0x46, 0xef, 0x33, 0x67, 0x8f, 0x63, 0xa7, 0x9c, 0x85, 0x46, 0x6e, 0x82, 0x32, 0xfe, 0xe4,
	0x50, 0xf9, 0x79, 0x01, 0xaa, 0x8c, 0xd7, 0x4e, 0xd9, 0xf6, 0xff, 0x1a, 0x54, 0xb8, 0x51, 0x3e,
	0xbd, 0x2f, 0x83, 0xef, 0xe5, 0xb9, 0xd6, 0x70, 0x7d, 0x84, 0xaf, 0x1a, 0x53, 0x6c, 0x00, 0xee,
	0x7b, 0x29, 0x4d, 0x52, 0x77, 0xec, 0x0b, 0x11, 0x07, 0xb5, 0xed, 0xab, 0x73, 0x84, 0x68, 0x5e,
	0x4a, 0x09, 0x12, 0x6c, 0x46, 0xe6, 0xae, 0x39, 0x01, 0xc3, 0x36, 0x51, 0x38, 0x1c, 0x8c, 0x97,
	0xaf, 0x4c, 0x96, 0xc2, 0xe1, 0x80, 0xad, 0x9f, 0xd2, 0x07, 0xc4, 0xfc, 0x7c, 0xcf, 0x4b, 0xa8,
	0x46, 0x7b, 0x0f, 0x78, 0x40, 0x9d, 0x89, 0x9b, 0xc2, 0xd9, 0xb8, 0x99, 0x70, 0xcb, 0xc4, 0xba,
	0x5f, 0x81, 0xca, 0xc7, 0x43, 0x2f, 0x4c, 0x83, 0xf4, 0x54, 0x5a, 0x31, 0x1a, 0x2b, 0xdf, 0x82,
	0x0b, 0x13, 0xda, 0xa2, 0x30, 0xa5, 0x61, 0x8a, 0x77, 0x01, 0x7c, 0xda, 0x7b, 0xc0, 0xf5, 0x25,
	0x72, 0x2d, 0xdf, 0x98, 0x3f, 0xf1, 0x09, 0x6b, 0x49, 0xd5, 0x97, 0xbf, 0x12, 0xe5, 0xdb, 0xb0,
	0xc0, 0xbd, 0x80, 0x61, 0xe1, 0x94, 0x7a, 0xb1, 0xb4, 0x9b, 0xff, 0x66, 0x9e, 0x19, 0x44, 0x61,
	0x7a, 0x2c, 0xcd, 0x15, 0x03, 0x8c, 0xa0, 0xe4, 0x7b, 0x99, 0x9d, 0xec, 0x27, 0xa3, 0x3b, 0x8e,
	0x86, 0x71, 0x22, 0x1d, 0x25, 0x06, 0x8c, 0x6e, 0x10, 0x84, 0x32, 0xc4, 0xd9, 0x4f, 0x06, 0x49,
	0x68, 0x4f, 0x06, 0x35, 0xfb, 0xa9, 0x10, 0x58, 0xce, 0x8c, 0x62, 0x46, 0xe2, 0x77, 0xa0, 0x74,
	0xfe, 0x60, 0x60, 0xa4, 0x4c, 0xe6, 0xc7, 0xdc, 0x6b, 0x2c, 0xce, 0xd8, 0x4f, 0xe5, 0x3f, 0xca,
	0x50, 0x61, 0x42, 0x79, 0x86, 0x58, 0x85, 0xe2, 0x68, 0x8f, 0x17, 0x03, 0x9f, 0x4d, 0x33, 0xf4,
	0x06, 0x22, 0x52, 0xaa, 0x84, 0xff, 0xc6, 0x57, 0xa1, 0xca, 0x57, 0xed, 0x9e, 0x38, 0xa0, 0xb8,
	0xfb, 0x19, 0xa0, 0xc1, 0x62, 0x14, 0xc3, 0xc2, 0x31, 0x8d, 0x23, 0x39, 0x35, 0xfe, 0x1b, 0x7f,
	0x1d, 0xb8, 0x03, 0x5d, 0x9e, 0x7b, 0xca, 0x3c, 0x37, 0xcf, 0xcb, 0x9a, 0xcc, 0x10, 0x9e, 0x9a,
	0x2b, 0xbe, 0xfc, 0xc5, 0x16, 0xfb, 0xa1, 0xd7, 0x0f, 0x7c, 0xb6, 0xd8, 0x8b, 0x3c, 0xb3, 0x8d,
	0xc6, 0xf8, 0x06, 0x2c, 0x33, 0x0d, 0x6e, 0x16, 0x27, 0x4b, 0x22, 0x8a, 0x18, 0xac, 0x23, 0x63,
	0xe5, 0x4b, 0x80, 0x47, 0xd6, 0xba, 0xd1, 0x43, 0x1a, 0xc7, 0x81, 0x4f, 0xeb, 0x15, 0x9e, 0x61,
	0x50, 0x66, 0xb6, 0x25, 0xe1, 0x2c, 0xa3, 0x70, 0x81, 0x23, 0xc2, 0x2a, 0x27, 0xe4, 0x5a, 0xf2,
	0x44, 0x7d, 0x2f, 0x49, 0xdd, 0x41, 0xe4, 0x07, 0xf7, 0x03, 0xea, 0xd7, 0x61, 0xb3, 0x70, 0xb3,
	0x44, 0x96, 0x19, 0x70, 0x5f, 0xc2, 0x98, 0x97, 0x12, 0xea, 0x25, 0x51, 0xc8, 0xa2, 0xbb, 0xc6,
	0xdd, 0x5d, 0x11, 0x00, 0xc3, 0xc7, 0xd7, 0x00, 0x92, 0x28, 0x4e, 0xdd, 0x28, 0xf6, 0x69, 0x5c,
	0x5f, 0xe6, 0xec, 0x55, 0x06, 0xb1, 0x18, 0x80, 0xa5, 0xac, 0x5e, 0x4c, 0xbd, 0x94, 0x8a, 0x6d,
	0xba, 0xc2, 0xf1, 0x20, 0x40, 0x3c, 0xfa, 0x7e, 0x13, 0x6a, 0x22, 0xe3, 0x09, 0x9f, 0xae, 0x6e,
	0x16, 0x6e, 0xae, 0x6e, 0xbf, 0xf6, 0x0c, 0x9f, 0x8a, 0x5c, 0xc8, 0xfc, 0x79, 0xbb, 0xae, 0xe9,
	0xcd, 0x3b, 0xae, 0x6d, 0x75, 0x49, 0x53, 0x77, 0x9d, 0xbb, 0x1d, 0xdd, 0xed, 0x9a, 0x77, 0x4c,
	0xeb, 0xd0, 0x24, 0x90, 0x8c, 0xa8, 0x94, 0x7f, 0x29, 0xc0, 0xca, 0x81, 0x74, 0xb3, 0x28, 0x2e,
	0x2e, 0xc1, 0x85, 0xae, 0xd9, 0xb6, 0x9a, 0x77, 0x74, 0x8d, 0x1f, 0xfe, 0xe2, 0x58, 0x46, 0x05,
	0xbc, 0x0a, 0x60, 0x1d, 0x9a, 0xb6, 0xdb, 0x54, 0x89, 0x66, 0xa3, 0x22, 0x46, 0xb0, 0xbc, 0xa7,
	0xda, 0xee, 0x7b, 0xef, 0x48, 0xc8, 0x02, 0x5e, 0x83, 0x9a, 0xd5, 0xd0, 0xef, 0xda, 0xee, 0xbe,
	0xfa, 0x91, 0x6e, 0xa3, 0x0a, 0x5e, 0x87, 0x15, 0x71, 0xa8, 0xef, 0xab, 0x4e, 0x73, 0x4f, 0xb7,
	0x11, 0xc2, 0x18, 0x56, 0x47, 0x52, 0xdc, 0x86, 0xda, 0xbc, 0x83, 0x36, 0xf1, 0x0a, 0x54, 0x39,
	0x8c, 0xa9, 0x43, 0x1f, 0xe0, 0x0d, 0x58, 0x73, 0xd4, 0x56, 0x4b, 0xd7, 0x5c, 0xdb, 0x51, 0x4d,
	0x4d, 0x25, 0x1a, 0xfa, 0xb4, 0x80, 0x5f, 0x04, 0x64, 0xea, 0xba, 0x66, 0xbb, 0x07, 0x6a, 0xdb,
	0xd0, 0x54, 0xc7, 0xb0, 0x4c, 0x56, 0x65, 0xac, 0x01, 0x08, 0xb0, 0xa9, 0xee, 0xeb, 0xac, 0x9e,
	0x40, 0x50, 0x93, 0xd6, 0x33, 0x07, 0xb0, 0xd2, 0xe1, 0x01, 0x5c, 0x60, 0xbe, 0x21, 0xc3, 0x3e,
	0x4d, 0x68, 0xaa, 0xdd, 0x13, 0x87, 0x7c, 0x6e, 0x0f, 0x94, 0xf9, 0x1e, 0xd0, 0xa0, 0x1c, 0x33,
	0x92, 0x7a, 0x91, 0x67, 0x8d, 0x5b, 0xcf, 0x70, 0xb3, 0x14, 0xc5, 0xfe, 0x64, 0xe2, 0x88, 0x60,
	0x56, 0x7e, 0x67, 0x01, 0x2e, 0xcd, 0x21, 0x39, 0xa3, 0xf1, 0x75, 0x58, 0xe3, 0x1b, 0x26, 0x16,
	0xb4, 0xe3, 0x73, 0x75, 0xc5, 0x1f, 0x4b, 0x30, 0x7c, 0xfc, 0x36, 0x6c, 0x78, 0x27, 0x27, 0xfd,
	0x80, 0x26, 0x6e, 0x1a, 0xb9, 0xc9, 0xf0, 0x9e, 0x24, 0x16, 0xbb, 0x7b, 0x5d, 0xe2, 0x9c, 0xc8,
	0xe6, 0x18, 0xc3, 0xc7, 0x6f, 0xc2, 0x7a, 0x8e, 0x21, 0x48, 0xdc, 0x30, 0x4a, 0xeb, 0x0b, 0x9b,
	0x85, 0x9b, 0x15, 0xb2, 0x3a, 0xa2, 0x36, 0x12, 0x33, 0x4a, 0x59, 0xfc, 0x32, 0xf5, 0xe3, 0x4d,
	0x5b, 0x25, 0x15, 0x06, 0xe0, 0x7b, 0xf2, 0x65, 0xa8, 0x71, 0xa4, 0x94, 0xb0, 0xc8, 0x37, 0x09,
	0xa7, 0x1f, 0x31, 0x0f, 0x82, 0xd0, 0x7d, 0xe8, 0xf5, 0x87, 0xb4, 0xbe, 0x24, 0x82, 0x7f, 0x10,
	0x84, 0x07, 0x6c, 0xcc, 0x91, 0xde, 0x63, 0x89, 0xac, 0x48, 0xa4, 0xf7, 0x58, 0x20, 0x11, 0x94,
	0x52, 0xef, 0xa8, 0x5e, 0x15, 0xf9, 0x29, 0xf5, 0x8e, 0xd8, 0x51, 0x91, 0x7a, 0x47, 0xee, 0x58,
	0x1e, 0x70, 0x5c, 0x2d, 0xf5, 0x8e, 0xf6, 0x33, 0x91, 0x19, 0xcd, 0x48, 0x6c, 0x6d, 0x4c, 0x93,
	0x49, 0xbe, 0x01, 0xcb, 0x49, 0x1a, 0xb3, 0x42, 0x5c, 0x90, 0xb0, 0x5d, 0x57, 0x25, 0x35, 0x01,
	0x13, 0x24, 0x5b, 0xb0, 0x9e, 0x7a, 0xf1, 0x11, 0x4d, 0xc7, 0xbe, 0x4c, 0xea, 0x2b, 0x9b, 0xa5,
	0x9b, 0x65, 0xb2, 0x26, 0x10, 0x99, 0x27, 0x13, 0xfc, 0x01, 0x2c, 0x09, 0xd6, 0xa4, 0xee, 0xf3,
	0xb8, 0x78, 0x7d, 0x4e, 0x5c, 0xb4, 0xa3, 0x9e, 0xd7, 0x0f, 0x3e, 0xa1, 0xbe, 0xcd, 0xc9, 0x49,
	0xc6, 0xc6, 0xb6, 0xd8, 0x4b, 0xb9, 0x88, 0xe0, 0xbb, 0xcd, 0x63, 0x15, 0x03, 0xa1, 0xc9, 0xb0,
	0x9f, 0x26, 0xf8, 0xcd, 0xb3, 0x61, 0xc0, 0x63, 0x84, 0xdd, 0x07, 0xa6, 0x22, 0xc1, 0x00, 0xa0,
	0x71, 0x1c, 0xc5, 0x6e, 0x2f, 0xf2, 0x29, 0xaf, 0x22, 0xe6, 0xd7, 0xbf, 0x3a, 0x23, 0x6c, 0x46,
	0x3e, 0xbd, 0x5d, 0xd1, 0x09, 0xb1, 0x88, 0x6b, 0xdd, 0x21, 0x55, 0x9a, 0x01, 0xf1, 0x1d, 0x80,
	0x87, 0x41, 0xd4, 0xe7, 0x96, 0x24, 0xf5, 0x12, 0x9f, 0xdb, 0x5b, 0xcf, 0x8f, 0xf9, 0x83, 0x8c,
	0x87, 0xe4, 0xd8, 0x95, 0x1f, 0x16, 0x60, 0x63, 0x16, 0x11, 0xde, 0x86, 0x05, 0x96, 0x7c, 0xeb,
	0x85, 0xcd, 0xc2, 0x39, 0x8e, 0x2e, 0x4e, 0x3b, 0xae, 0x3c, 0x44, 0x95, 0x24, 0x2b, 0x8f, 0x4d,
	0x58, 0x1e, 0x79, 0x89, 0xb9, 0xc8, 0xe7, 0x3b, 0x05, 0x32, 0xff, 0x18, 0x3e, 0x7e, 0x15, 0x56,
	0xc7, 0x14, 0x3e, 0x4d, 0x7a, 0x75, 0xca, 0xd7, 0x7e, 0x39, 0xa3, 0xd1, 0x68, 0xd2, 0x53, 0xbe,
	0x05, 0xcb, 0xbb, 0xde, 0xc3, 0x28, 0x0e, 0x52, 0xba, 0xc7, 0x4e, 0xad, 0xcb, 0x50, 0xe9, 0xf5,
	0xbd, 0x24, 0x19, 0x57, 0x27, 0x4b, 0x7c, 0x6c, 0xf8, 0xcc, 0x78, 0x7e, 0xc8, 0x15, 0xcf, 0x75,
	0xee, 0x72, 0x5a, 0xe5, 0xa7, 0x05, 0x58, 0x9b, 0x0a, 0x05, 0x16, 0xec, 0x0f, 0xe8, 0x29, 0x97,
	0x5e, 0x25, 0xec, 0x27, 0x7e, 0x13, 0x90, 0x4f, 0x4f, 0x62, 0xda, 0xf3, 0x52, 0xea, 0xcb, 0x40,
	0x2d, 0x72, 0x63, 0xd7, 0xc6, 0x70, 0x11, 0xac, 0x6f, 0xc1, 0x7a, 0x8e, 0xb4, 0xcf, 0x44, 0x53,
	0xb9, 0xf3, 0x73, 0x32, 0xb8, 0x4a, 0x8a, 0x9b, 0xb0, 0xc8, 0x85, 0xb1, 0x9a, 0xe3, 0x59, 0x0b,
	0x3a, 0x65, 0x21, 0xd7, 0x44, 0x24, 0xab, 0xa2, 0xc1, 0xc6, 0x2c, 0x3c, 0xbe, 0x08, 0x8b, 0x52,
	0xbd, 0xbc, 0xdf, 0x8a, 0x11, 0x5b, 0xaf, 0x6c, 0x06, 0x6c, 0x82, 0x62, 0xa0, 0x7c, 0xaf, 0x00,
	0x95, 0x4e, 0xdf, 0x4b, 0xef, 0x47, 0xf1, 0x80, 0x65, 0xbe, 0x28, 0xc9, 0x32, 0x5f, 0x94, 0x30,
	0x51, 0x49, 0x2f, 0x66, 0x45, 0xa4, 0x48, 0x78, 0x72, 0x34, 0xaa, 0x43, 0x4a, 0xb9, 0x3a, 0x64,
	0x03, 0xca, 0x49, 0x1a, 0xc5, 0x94, 0x27, 0xb0, 0x32, 0x11, 0x03, 0xfc, 0x55, 0xa8, 0x0f, 0xc3,
	0xe0, 0xe3, 0x21, 0x5b, 0xe9, 0x87, 0x41, 0x8f, 0x85, 0x04, 0x0d, 0x53, 0x76, 0x26, 0xc7, 0xf5,
	0x32, 0xf7, 0xe4, 0x45, 0x81, 0xd7, 0x38, 0xda, 0x18, 0x61, 0x59, 0xac, 0xae, 0x76, 0xfa, 0xde,
	0x29, 0x8d, 0x05, 0x30, 0x3d, 0x65, 0xa9, 0xea, 0x84, 0x43, 0xc6, 0x37, 0x9f, 0xca, 0x89, 0x24,
	0xc1, 0x1f, 0xc0, 0xf2, 0x91, 0x37, 0xa0, 0xae, 0xd7, 0x1b, 0x47, 0x65, 0x6d, 0xfb, 0xda, 0x1c,
	0xcf, 0x8a, 0x1b, 0x1b, 0xa9, 0x31, 0x16, 0xd9, 0x95, 0xc0, 0x5f, 0x81, 0xa5, 0x8c, 0xb9, 0x74,
	0x1e, 0xe6, 0x8c, 0x5a, 0xf9, 0x10, 0x56, 0x98, 0xa5, 0x1f, 0x0e, 0xe9, 0x50, 0x34, 0x35, 0x3e,
	0x80, 0x2a, 0xb7, 0x25, 0x77, 0xfd, 0x7d, 0xe5, 0x19, 0xb2, 0x5a, 0xde, 0x80, 0x8a, 0x32, 0xeb,
	0x48, 0xfe, 0x52, 0xee, 0xc1, 0xd5, 0x4e, 0x1c, 0xdd, 0x0f, 0xfa, 0xd4, 0x8c, 0xd2, 0xa0, 0x47,
	0x27, 0x3b, 0x27, 0xcf, 0xe8, 0x9a, 0x8c, 0xfb, 0x23, 0xc5, 0xc9, 0xfe, 0x48, 0x45, 0x08, 0x32,
	0x34, 0xbc, 0x08, 0x45, 0x43, 0x43, 0x48, 0xd9, 0x87, 0x97, 0x27, 0x75, 0x9c, 0xbb, 0x57, 0x32,
	0x43, 0xdc, 0xaa, 0x72, 0x0f, 0x2e, 0x4d, 0x88, 0x6b, 0x44, 0xe1, 0x30, 0xb1, 0x53, 0x2f, 0x4e,
	0x78, 0x81, 0x95, 0x7a, 0xb1, 0xdb, 0xa7, 0x0f, 0x69, 0x5f, 0x8a, 0xaa, 0x32, 0x48, 0x9b, 0x01,
	0x44, 0xe8, 0x78, 0x71, 0xd6, 0x76, 0x11, 0x83, 0x19, 0x3a, 0x96, 0x95, 0x3d, 0x78, 0x71, 0x42,
	0x47, 0x33, 0x2b, 0x74, 0x27, 0xaa, 0xe0, 0xc2, 0x64, 0x15, 0x3c, 0x43, 0x52, 0x4d, 0xf9, 0xef,
	0x32, 0xbc, 0x32, 0x21, 0x4a, 0x0b, 0x92, 0x5e, 0x14, 0x86, 0xb4, 0x97, 0x52, 0x9f, 0x2d, 0x88,
	0x48, 0xfb, 0x78, 0x2f, 0xbf, 0x94, 0x15, 0x9e, 0xc9, 0xe7, 0x55, 0xcb, 0xd9, 0x32, 0xde, 0x86,
	0x96, 0x33, 0xaa, 0xe2, 0x46, 0x4b, 0xca, 0x9c, 0x30, 0x08, 0x92, 0x24, 0x10, 0x35, 0xa8, 0x38,
	0x52, 0xab, 0x12, 0x62, 0xf8, 0x38, 0x06, 0x1e, 0x8c, 0x6e, 0xcc, 0xf5, 0xf2, 0x63, 0x75, 0x75,
	0x5b, 0x9f, 0xa3, 0xea, 0x1c, 0x96, 0xdf, 0x1a, 0xff, 0xbc, 0x0d, 0x2d, 0x32, 0x2e, 0x2b, 0x8f,
	0xc6, 0x93, 0x4b, 0xa1, 0x76, 0x1a, 0x0d, 0xe3, 0x4c, 0x67, 0x8d, 0xeb, 0x6c, 0x7d, 0x01, 0x9d,
	0x62, 0xc3, 0x66, 0x5a, 0x3b, 0x39, 0xad, 0x4c, 0x8f, 0xd4, 0xfa, 0x6d, 0x58, 0x8b, 0x4e, 0x4e,
	0xa2, 0x90, 0x86, 0x69, 0xa6, 0x79, 0xf9, 0xff, 0x4e, 0xf3, 0x6a, 0xa6, 0x4b, 0x6a, 0x37, 0xa1,
	0xc6, 0x72, 0x9d, 0x97, 0x8a, 0x25, 0x5d, 0xe1, 0x9a, 0xe7, 0xf5, 0x11, 0x76, 0x39, 0xa5, 0x58,
	0xd4, 0xdd, 0xf1, 0xa2, 0xc2, 0xfd, 0x11, 0x5c, 0x69, 0x01, 0xe4, 0xc2, 0x65, 0x15, 0x72, 0xbe,
	0x46, 0x2f, 0xc8, 0x71, 0xa7, 0xad, 0xde, 0x35, 0xcc, 0x16, 0x2a, 0xb0, 0x1a, 0xba, 0x45, 0xdc,
	0x43, 0xc3, 0x34, 0x75, 0x82, 0x8a, 0x18, 0x60, 0xb1, 0x45, 0x5c, 0xc7, 0xd0, 0x51, 0x69, 0x46,
	0x94, 0x2e, 0x28, 0x77, 0x61, 0x39, 0x3f, 0x31, 0x26, 0xae, 0x93, 0x17, 0x0f, 0xb0, 0xd8, 0x21,
	0xee, 0xa1, 0x65, 0xa2, 0x02, 0xae, 0xc1, 0x52, 0x87, 0xb8, 0x6d, 0xcb, 0x76, 0x50, 0x11, 0x5f,
	0x80, 0xb5, 0x0e, 0x71, 0x35, 0xc3, 0x6e, 0x5a, 0xa6, 0xa9, 0x37, 0x1d, 0x5d, 0x43, 0x25, 0x49,
	0xf1, 0x61, 0xd7, 0x70, 0xd0, 0x82, 0x72, 0x1f, 0x36, 0x26, 0xfc, 0xca, 0xb7, 0x62, 0xf7, 0x84,
	0x85, 0x29, 0xbf, 0x73, 0xf1, 0xd3, 0x35, 0xdb, 0xab, 0x0c, 0xd2, 0x64, 0x00, 0xb6, 0xd1, 0x42,
	0xfa, 0x48, 0xee, 0x64, 0xd9, 0x26, 0x0d, 0xe9, 0x23, 0xce, 0x3d, 0x63, 0x0a, 0x6b, 0xca, 0xaf,
	0x8a, 0x80, 0x27, 0x14, 0xed, 0x53, 0xdf, 0xeb, 0x3f, 0x2f, 0x25, 0x5c, 0x87, 0x5a, 0x9f, 0x1e,
	0xd1, 0xd0, 0x77, 0x63, 0x2f, 0x7c, 0x20, 0x4b, 0x0c, 0x10, 0x20, 0xe2, 0x85, 0x0f, 0x58, 0x51,
	0x7e, 0x8f, 0x26, 0xa9, 0x9b, 0x13, 0x22, 0x4e, 0xdb, 0x15, 0x06, 0xb6, 0x47, 0x82, 0xbe, 0x0a,
	0xe5, 0xde, 0x31, 0x4d, 0x44, 0x5d, 0x5d, 0xdb, 0x56, 0xe6, 0x2c, 0x34, 0xa1, 0x8f, 0xbc, 0xd8,
	0x6f, 0x32, 0x4a, 0x22, 0x18, 0xb0, 0x07, 0x30, 0x60, 0xa6, 0x66, 0x35, 0x37, 0x8b, 0x93, 0xf7,
	0xce, 0x13, 0xa1, 0x7c, 0x82, 0xb7, 0xf8, 0xff, 0x79, 0xe4, 0xac, 0xc8, 0xf5, 0x72, 0xf7, 0x75,
	0x4d, 0x6d, 0x93, 0xea, 0x20, 0xc3, 0x28, 0x0d, 0xa8, 0x8e, 0xc8, 0xd8, 0x2d, 0x6c, 0x82, 0x10,
	0xbd, 0xc0, 0x6e, 0x61, 0xd9, 0xdd, 0x4a, 0xc2, 0xf8, 0xfd, 0xee, 0xd0, 0x68, 0x67, 0xe3, 0xe2,
	0x0c, 0x9f, 0x17, 0x94, 0xee, 0x54, 0x2a, 0xee, 0xc4, 0xb4, 0x17, 0x85, 0xac, 0xf2, 0x63, 0x47,
	0x37, 0xab, 0xb3, 0xe4, 0xb1, 0xc1, 0x7f, 0x8f, 0xba, 0x04, 0xc5, 0x71, 0x97, 0x60, 0x86, 0xd8,
	0xb2, 0xf2, 0xc9, 0x54, 0xf6, 0xed, 0x0c, 0xe3, 0xde, 0xb1, 0x97, 0xf0, 0xd4, 0x76, 0x12, 0x47,
	0xfe, 0xb0, 0x37, 0xaa, 0x8a, 0xab, 0xa4, 0x2a, 0x21, 0x06, 0x6f, 0x5b, 0xf0, 0x66, 0x5f, 0x91,
	0xdf, 0x9c, 0xf9, 0x6f, 0x7c, 0x05, 0x2a, 0xbd, 0x61, 0x1c, 0xd3, 0xb0, 0x97, 0xb5, 0x3f, 0x46,
	0xe3, 0x19, 0xba, 0x41, 0x79, 0x0c, 0x57, 0x26, 0x74, 0x8b, 0x05, 0x93, 0xed, 0x54, 0x76, 0x9b,
	0xb8, 0x27, 0x7e, 0x8e, 0xcf, 0xdc, 0x32, 0xa9, 0x49, 0x18, 0x77, 0xef, 0x2b, 0xb0, 0x92, 0x91,
	0x64, 0x05, 0x02, 0xef, 0x4e, 0x4a, 0x60, 0x93, 0x9f, 0xe4, 0x67, 0x35, 0x17, 0x95, 0xdf, 0x9a,
	0x72, 0xa6, 0x0c, 0x15, 0x56, 0x02, 0x8f, 0xcb, 0xe6, 0xe2, 0xb9, 0xcb, 0xe6, 0x7c, 0xb7, 0x4c,
	0x84, 0xf5, 0xb8, 0x5b, 0x76, 0x56, 0x7d, 0x49, 0x79, 0x1b, 0x2e, 0xcf, 0x51, 0xbf, 0xfd, 0x78,
	0x06, 0xc3, 0x8a, 0xa2, 0xcf, 0xb4, 0x57, 0x1b, 0x26, 0x29, 0xab, 0xe7, 0xbc, 0x01, 0x9f, 0xbc,
	0x3c, 0xce, 0xc5, 0x68, 0x86, 0x98, 0x45, 0xe5, 0x1b, 0x50, 0x9f, 0x21, 0x66, 0x37, 0x8a, 0x8f,
	0xe8, 0xc4, 0x1c, 0x0a, 0x53, 0x1d, 0xbf, 0xb3, 0xb2, 0x2a, 0x73, 0x4c, 0x6a, 0x45, 0x7d, 0xff,
	0x73, 0x98, 0x54, 0x55, 0x8c, 0x99, 0x26, 0xed, 0x67, 0x1d, 0x4f, 0xce, 0x98, 0xbb, 0x1f, 0xf0,
	0xf1, 0xcc, 0x62, 0x65, 0x49, 0xf9, 0x7e, 0x01, 0xae, 0x4f, 0xc8, 0x72, 0xbc, 0x87, 0x34, 0x0e,
	0x1b, 0xb1, 0xf7, 0xa8, 0x2f, 0xc4, 0x26, 0x58, 0x87, 0xe5, 0x98, 0xff, 0x74, 0x45, 0x06, 0x11,
	0xab, 0x7c, 0x9e, 0x0c, 0x52, 0x8b, 0xc7, 0x83, 0xac, 0x17, 0xfb, 0x28, 0x08, 0xb3, 0x02, 0x67,
	0x29, 0x1c, 0x0e, 0x0e, 0x83, 0x70, 0x56, 0x89, 0xb3, 0xae, 0x7c, 0x3c, 0x55, 0x95, 0xe5, 0x0c,
	0x73, 0x82, 0xde, 0x03, 0x9a, 0xb2, 0xdc, 0x98, 0xf2, 0x5f, 0xf9, 0x58, 0x07, 0x01, 0xca, 0x7a,
	0x74, 0xb9, 0x10, 0x7b, 0xde, 0xf2, 0x60, 0xe5, 0xc7, 0x25, 0xa8, 0xca, 0xfd, 0xe4, 0x1d, 0xe1,
	0x8f, 0x60, 0x55, 0x4e, 0x5b, 0x6e, 0x0d, 0x79, 0x2b, 0x7c, 0xf7, 0x3c, 0xb9, 0x6f, 0x62, 0x5b,
	0x92, 0x95, 0x78, 0x62, 0x97, 0x5a, 0x50, 0xcb, 0x1c, 0xca, 0x76, 0x8d, 0xa8, 0xd0, 0x6f, 0x9d,
	0x5f, 0x2c, 0xef, 0xfe, 0x42, 0x3c, 0xde, 0x7f, 0x63, 0x81, 0xfe, 0x30, 0xc9, 0xaa, 0xf6, 0xcf,
	0x21, 0x90, 0x6d, 0x8a, 0x4c, 0x20, 0xdf, 0x20, 0x63, 0x81, 0x47, 0x51, 0xdf, 0x97, 0x67, 0xc6,
	0xe7, 0x10, 0xc8, 0x42, 0x3a, 0x13, 0xc8, 0xc3, 0xfb, 0x00, 0x50, 0x6e, 0xca, 0xa2, 0x3c, 0x2d,
	0x73, 0xa9, 0x5f, 0x3a, 0x8f, 0xd4, 0xac, 0xbe, 0x25, 0xab, 0xe3, 0x59, 0xf3, 0x92, 0xf6, 0x9f,
	0x8a, 0x50, 0xcb, 0x45, 0x1c, 0x7e, 0x1f, 0x16, 0xee, 0x79, 0x47, 0xef, 0xca, 0xa5, 0xda, 0x7c,
	0x66, 0x8c, 0x36, 0xbc, 0x23, 0xc2, 0xa9, 0x25, 0xd7, 0xb6, 0x5c, 0x89, 0xf3, 0x71, 0x6d, 0x4b,
	0xae, 0xf7, 0xa4, 0xbb, 0xcf, 0xc7, 0xf5, 0x9e, 0xe4, 0x7a, 0x5f, 0xfa, 0xf4, 0x7c, 0x5c, 0xef,
	0x4b, 0xae, 0x2f, 0x4b, 0x9f, 0x9d, 0x8f, 0xeb, 0xcb, 0x78, 0x1b, 0x4a, 0xf7, 0xbc, 0xa3, 0xfa,
	0x22, 0xbf, 0x5c, 0x3f, 0x9f, 0x89, 0x11, 0x2b, 0xff, 0xb0, 0x08, 0xc8, 0xee, 0xd1, 0xd0, 0x8b,
	0x83, 0x68, 0x6e, 0x2b, 0x90, 0x55, 0x3f, 0x51, 0x2a, 0xdb, 0x16, 0xa2, 0x13, 0x50, 0x61, 0x00,
	0x8d, 0x26, 0x3d, 0xb6, 0x2f, 0xd9, 0x46, 0x17, 0x37, 0xd2, 0x44, 0xf6, 0xe2, 0x21, 0x1c, 0x0e,
	0x44, 0x09, 0x97, 0xe0, 0xb7, 0x61, 0x43, 0x20, 0xdf, 0x75, 0x45, 0x89, 0x25, 0xbf, 0xb6, 0x2c,
	0xf0, 0xb3, 0x78, 0x5d, 0xe2, 0xf6, 0x58, 0xad, 0x25, 0xbe, 0xb9, 0x8c, 0x18, 0xb6, 0x27, 0x19,
	0xca, 0x79, 0x86, 0xed, 0x1c, 0xc3, 0x55, 0xa8, 0x06, 0x89, 0x4b, 0x1f, 0x9f, 0xd0, 0x38, 0xeb,
	0x03, 0x56, 0x82, 0x44, 0xe7, 0x63, 0x76, 0x48, 0x7a, 0xd9, 0x15, 0x8f, 0x49, 0x91, 0xed, 0xf9,
	0x11, 0xcc, 0xf0, 0xf1, 0x16, 0xac, 0x8f, 0x49, 0x06, 0x91, 0xcf, 0xe9, 0x44, 0x53, 0x70, 0x6d,
	0x84, 0xd8, 0x8f, 0x7c, 0x46, 0x9b, 0xbb, 0x1c, 0x56, 0x27, 0x3e, 0xa4, 0x4f, 0xb6, 0xd3, 0x41,
	0x96, 0x76, 0xa3, 0x76, 0xfa, 0xd7, 0xe1, 0x6a, 0xaf, 0x1f, 0xb0, 0xe2, 0x7f, 0xe6, 0xdc, 0x6a,
	0xbc, 0x48, 0xb8, 0x24, 0x48, 0x3a, 0x67, 0x66, 0xf8, 0x0e, 0x6c, 0xa4, 0x3c, 0x23, 0xba, 0xf7,
	0x58, 0x4a, 0x74, 0x53, 0xfa, 0x98, 0xd9, 0x24, 0xfb, 0x87, 0x38, 0xcd, 0x65, 0x4b, 0x81, 0xc1,
	0xff, 0x1f, 0xae, 0xcc, 0xe2, 0x70, 0x4f, 0x8e, 0xa3, 0x50, 0xd4, 0xff, 0x55, 0x72, 0xe9, 0x2c,
	0x5f, 0x87, 0xa1, 0xf1, 0x31, 0xdc, 0x98, 0xcf, 0xec, 0x46, 0xf7, 0xef, 0x27, 0x34, 0xe5, 0x0d,
	0xff, 0xf9, 0xc7, 0xff, 0x01, 0xed, 0xa5, 0x51, 0xbc, 0x4d, 0xae, 0xcd, 0xd1, 0x61, 0x71, 0x21,
	0xf2, 0x83, 0x6b, 0x2f, 0x8a, 0x4e, 0xea, 0x6b, 0xbc, 0x05, 0xbc, 0x18, 0x24, 0xcd, 0x28, 0x3a,
	0x99, 0xd5, 0x7e, 0x46, 0xa2, 0xd2, 0x9d, 0x6c, 0x3a, 0xb6, 0xf2, 0x2d, 0xe2, 0xf5, 0x67, 0xde,
	0x54, 0x89, 0xec, 0x1c, 0xdf, 0xae, 0x92, 0x6e, 0x5b, 0x77, 0x4d, 0xcb, 0xd4, 0x73, 0xed, 0xe4,
	0x2f, 0xde, 0x4b, 0xed, 0xc0, 0x45, 0xd1, 0x9a, 0x65, 0x8b, 0xd6, 0x0e, 0x92, 0x71, 0x37, 0xff,
	0x2a, 0x54, 0xc7, 0x8d, 0x71, 0x59, 0x3a, 0x24, 0x59, 0x3f, 0xfc, 0xb2, 0xfc, 0xa2, 0x1a, 0xf8,
	0xa2, 0xbb, 0x5f, 0x16, 0x5f, 0x4c, 0x0d, 0x3f, 0x51, 0x7e, 0x52, 0x82, 0x4b, 0xb9, 0x93, 0x30,
	0xbb, 0x14, 0x71, 0x99, 0x6f, 0xc0, 0x9a, 0xcc, 0xb1, 0xa3, 0xf7, 0x1b, 0x42, 0xb2, 0x4c, 0x9a,
	0xa3, 0x76, 0xc6, 0x0d, 0xd1, 0x22, 0x4a, 0x44, 0xe0, 0x65, 0xcf, 0x0b, 0xf8, 0xb5, 0x3b, 0xe1,
	0x12, 0xb9, 0x7d, 0x82, 0xe4, 0x51, 0x14, 0x66, 0x5f, 0xd3, 0x38, 0xe0, 0x30, 0x0a, 0x59, 0x60,
	0x3f, 0x0a, 0x42, 0x37, 0x49, 0x63, 0xea, 0x3d, 0x90, 0x7d, 0xae, 0xea, 0xa3, 0x20, 0xb4, 0x39,
	0x00, 0xdf, 0x83, 0xd5, 0x84, 0x8a, 0x0b, 0x7e, 0x92, 0x7a, 0xe9, 0x30, 0x91, 0x97, 0x86, 0x9b,
	0x73, 0xdc, 0x97, 0x9b, 0x8f, 0xcd, 0xe9, 0x6f, 0xaf, 0x3b, 0x0d, 0xd7, 0x76, 0x54, 0xa7, 0x6b,
	0xbb, 0x86, 0xc9, 0x3f, 0xa0, 0x90, 0x15, 0x29, 0x52, 0x50, 0xb0, 0x0d, 0xca, 0x72, 0x8c, 0x38,
	0xec, 0x13, 0x37, 0x7a, 0x14, 0x52, 0xbf, 0xbe, 0x28, 0x36, 0x68, 0x38, 0x1c, 0x88, 0x0a, 0x21,
	0xb1, 0x18, 0x18, 0x1b, 0xb0, 0x24, 0x99, 0x79, 0xd3, 0xbf, 0xb6, 0xfd, 0xf6, 0xf3, 0x0d, 0x11,
	0x8e, 0xb5, 0x05, 0x1b, 0xc9, 0xf8, 0xf1, 0x57, 0xa1, 0x2e, 0xbe, 0x27, 0xf3, 0x61, 0xe2, 0x9e,
	0x88, 0xca, 0xdf, 0xbb, 0xd7, 0xcf, 0xbe, 0x19, 0x5c, 0xe4, 0xdf, 0x97, 0x05, 0xba, 0x33, 0xc6,
	0x2a, 0xbf, 0x5d, 0x84, 0xfa, 0x3c, 0xf9, 0x53, 0x7d, 0xf2, 0xc2, 0x17, 0xe9, 0x93, 0x4f, 0x7c,
	0xe0, 0x93, 0x45, 0xcf, 0xe8, 0x03, 0x1f, 0x86, 0x05, 0x5e, 0x7e, 0x89, 0x05, 0xe5, 0xbf, 0x45,
	0x9b, 0x34, 0x49, 0x68, 0xf6, 0xdd, 0x57, 0x8e, 0xc6, 0x17, 0xc6, 0xf2, 0xe7, 0xbd, 0x30, 0x5e,
	0x87, 0x1a, 0xdf, 0xa8, 0xfd, 0xa8, 0xf7, 0x80, 0xaf, 0x0a, 0x4b, 0xbf, 0xbc, 0xf3, 0xdd, 0xe6,
	0x10, 0xe5, 0x07, 0x15, 0x58, 0xcb, 0x2f, 0xfa, 0x09, 0xed, 0xb1, 0x14, 0xcf, 0x6e, 0xb9, 0x09,
	0xbb, 0xa0, 0xf9, 0x89, 0x7b, 0x3f, 0x8e, 0x06, 0x6e, 0x18, 0x3d, 0xe2, 0xce, 0x58, 0x20, 0xeb,
	0x34, 0xf4, 0x6d, 0x81, 0xda, 0x8d, 0xa3, 0x81, 0x19, 0x3d, 0x62, 0x5a, 0x12, 0x79, 0x4c, 0x8d,
	0xa7, 0x0a, 0x19, 0xc8, 0xf0, 0xf1, 0xd7, 0xe0, 0xf2, 0x88, 0xe0, 0xcc, 0x1b, 0x97, 0x12, 0x7f,
	0xe3, 0x72, 0x31, 0x23, 0x20, 0x93, 0x6f, 0x5d, 0xde, 0x81, 0x8d, 0x69, 0x56, 0xfe, 0xe8, 0x65,
	0x81, 0x3f, 0x7a, 0xc1, 0x93, 0x5c, 0x7b, 0x5e, 0x72, 0x8c, 0x1b, 0xa3, 0x82, 0x29, 0xf7, 0x39,
	0xf9, 0xc6, 0x33, 0x7d, 0xc6, 0x3b, 0x9d, 0xb2, 0x46, 0xe2, 0xf9, 0xe6, 0xc6, 0xa8, 0xce, 0x66,
	0x37, 0xc3, 0x77, 0xb9, 0xe3, 0x4a, 0x59, 0x0d, 0xad, 0x31, 0xd0, 0x14, 0xc9, 0xb6, 0x7c, 0x36,
	0x92, 0x23, 0xd9, 0xc6, 0xbd, 0x51, 0xd9, 0x9a, 0xc6, 0xc1, 0xd1, 0x11, 0x8d, 0x65, 0xb7, 0xee,
	0xd5, 0x67, 0x1b, 0x23, 0x68, 0x6f, 0x5f, 0x24, 0xfa, 0x21, 0xbb, 0x65, 0x3b, 0xc4, 0x68, 0xb5,
	0xf4, 0x71, 0xf7, 0x48, 0x56, 0xb0, 0x92, 0x6c, 0xba, 0x79, 0x54, 0xfd, 0x82, 0xcd, 0xa3, 0xe9,
	0xcf, 0xd2, 0x93, 0x51, 0x3b, 0x55, 0xe7, 0x2f, 0x8b, 0x1e, 0x48, 0xae, 0xce, 0x67, 0x77, 0x1e,
	0xef, 0xb1, 0xb8, 0x59, 0xac, 0x88, 0xa7, 0x2a, 0x03, 0xef, 0x31, 0xbb, 0x59, 0xf0, 0x66, 0xa3,
	0xf7, 0xd8, 0x95, 0x11, 0xbe, 0x2a, 0x9b, 0x8d, 0xde, 0xe3, 0xb6, 0x08, 0x72, 0x02, 0x6f, 0xf4,
	0xfa, 0x51, 0x42, 0x7d, 0x37, 0x8d, 0xdc, 0x90, 0x3e, 0x1a, 0xef, 0xec, 0x33, 0x81, 0xb8, 0xc6,
	0x03, 0xf1, 0x86, 0x20, 0x77, 0x22, 0x93, 0x3e, 0xca, 0xb6, 0xf9, 0x54, 0x60, 0xde, 0x80, 0x65,
	0xa6, 0x32, 0x93, 0x24, 0x0f, 0xa9, 0xda, 0xc0, 0x7b, 0x9c, 0x31, 0xe0, 0x5f, 0x83, 0xab, 0xf7,
	0xe3, 0x80, 0x86, 0x7e, 0xff, 0xd4, 0xed, 0x1d, 0x7b, 0xfd, 0x3e, 0x0d, 0x8f, 0xa8, 0xeb, 0x07,
	0x3c, 0x55, 0xf8, 0xfc, 0xd0, 0xaa, 0x90, 0xcb, 0x19, 0x49, 0x33, 0xa3, 0xd0, 0x24, 0x01, 0x6e,
	0xc0, 0xcb, 0xd2, 0x5d, 0xe3, 0x3d, 0xe3, 0x26, 0x27, 0x31, 0xf5, 0x7c, 0x79, 0xa9, 0xc7, 0x5c,
	0xe9, 0x15, 0x41, 0xa5, 0x67, 0x9b, 0xc7, 0xe6, 0x24, 0xfc, 0x8a, 0x8f, 0x6d, 0x56, 0xe2, 0xf8,
	0x41, 0x1a, 0x44, 0xa1, 0xd7, 0x77, 0xf9, 0x0b, 0x97, 0xe7, 0x9d, 0x73, 0x53, 0x6f, 0xce, 0x08,
	0x1a, 0x0b, 0xe0, 0xa8, 0x04, 0xdf, 0x81, 0xea, 0xe0, 0x54, 0x6e, 0x99, 0x7a, 0xc0, 0xef, 0x89,
	0xb7, 0xce, 0x9b, 0x6c, 0xe5, 0x87, 0xe9, 0xca, 0xe0, 0x54, 0xfc, 0x52, 0xde, 0x82, 0x25, 0x59,
	0x33, 0xe0, 0x35, 0x28, 0x3c, 0xe6, 0x87, 0x59, 0xf1, 0x76, 0xe1, 0x1d, 0x52, 0x78, 0xcc, 0x00,
	0xe2, 0x4e, 0x27, 0x00, 0xa7, 0x5b, 0xdf, 0x82, 0xea, 0xe8, 0x05, 0x1d, 0xbe, 0x04, 0x17, 0x54,
	0xdb, 0xd6, 0x1d, 0xf1, 0x90, 0xc0, 0x6e, 0xea, 0xa6, 0x4a, 0x0c, 0x0b, 0x15, 0xf0, 0x15, 0xb8,
	0x98, 0x47, 0x74, 0x1b, 0xec, 0x77, 0x53, 0x25, 0x9a, 0x78, 0x7e, 0x98, 0xc3, 0xf1, 0xe7, 0x08,
	0xac, 0x2a, 0xb0, 0x75, 0x07, 0x95, 0xb6, 0x4e, 0x61, 0xbd, 0xe1, 0xa5, 0x69, 0x9f, 0x76, 0xbc,
	0xd3, 0x4e, 0x1c, 0x3d, 0x0c, 0x58, 0x05, 0x57, 0x87, 0x8d, 0x46, 0xc7, 0xed, 0x10, 0xeb, 0xc0,
	0xd0, 0x74, 0xe2, 0x36, 0xda, 0xc6, 0x37, 0xbf, 0xc9, 0x64, 0x15, 0xf0, 0x8b, 0xb0, 0x9e, 0xc7,
	0xa8, 0x9d, 0x4e, 0x5b, 0x17, 0x2a, 0xf2, 0xe0, 0x96, 0x65, 0xb5, 0xda, 0x3a, 0xef, 0x8a, 0xa2,
	0x12, 0xbe, 0x08, 0x78, 0x82, 0x67, 0x5f, 0xfd, 0xa6, 0x65, 0xa2, 0x85, 0xad, 0x7f, 0x2b, 0xc2,
	0x72, 0xfe, 0xeb, 0x08, 0x5e, 0x83, 0x5a, 0x63, 0xdc, 0x59, 0x47, 0x2f, 0x64, 0x80, 0x5d, 0x62,
	0xe8, 0xa6, 0x66, 0xa3, 0x02, 0x9b, 0x3f, 0x03, 0x10, 0xd5, 0xbc, 0x93, 0x7f, 0x96, 0x50, 0xc4,
	0x2b, 0x50, 0x65, 0x08, 0x95, 0xe8, 0xa6, 0x8a, 0x4a, 0xd9, 0xf0, 0xc0, 0x76, 0x55, 0x03, 0x2d,
	0x60, 0x04, 0xcb, 0x6c, 0xe8, 0x74, 0x1d, 0x8b, 0x18, 0x6a, 0x1b, 0x95, 0x47, 0xf4, 0xf6, 0x5d,
	0xb3, 0x89, 0x16, 0xf1, 0x2a, 0x00, 0x1b, 0x9a, 0xfa, 0x61, 0xc3, 0xd0, 0x51, 0x35, 0xd3, 0xd3,
	0x54, 0xed, 0xae, 0xda, 0x1e, 0xeb, 0x81, 0x8c, 0xcf, 0xd1, 0x6d, 0xe7, 0x5d, 0x54, 0xcb, 0x0f,
	0xb7, 0xd1, 0x72, 0x7e, 0xf8, 0x1e, 0x5a, 0xc9, 0xa4, 0x38, 0xea, 0x81, 0x4e, 0xcc, 0x06, 0x51,
	0x0f, 0xdb, 0x6e, 0xe7, 0xa0, 0x83, 0x10, 0xde, 0x84, 0x97, 0xa6, 0x11, 0xef, 0x76, 0xdc, 0x03,
	0x9d, 0xd8, 0x5d, 0x6e, 0xf1, 0x3a, 0x77, 0xe8, 0x14, 0xc5, 0x76, 0xc7, 0x6d, 0x5a, 0x56, 0x07,
	0x61, 0x7c, 0x01, 0xd6, 0x72, 0x5e, 0x38, 0x34, 0xda, 0x1a, 0x7a, 0x39, 0x03, 0x4a, 0x93, 0x39,
	0xf0, 0x3a, 0x5e, 0x86, 0x0a, 0x03, 0xb6, 0x55, 0xdb, 0x41, 0x9b, 0x5b, 0x3f, 0x29, 0xc0, 0x6a,
	0xf6, 0xd8, 0x4a, 0x15, 0x0f, 0xef, 0x10, 0x2c, 0x6b, 0x0d, 0x57, 0xcd, 0xf9, 0x7c, 0x1d, 0x56,
	0x38, 0xa4, 0xa5, 0x3b, 0xe2, 0xe5, 0x46, 0x01, 0x6f, 0x00, 0xe2, 0xa0, 0x26, 0xd1, 0x55, 0x47,
	0x44, 0x10, 0x2a, 0x8e, 0xa0, 0xcc, 0xe5, 0xfb, 0x12, 0x5a, 0x1a, 0x41, 0x35, 0xbd, 0xad, 0x67,
	0xb4, 0x0b, 0x23, 0xa1, 0x76, 0x26, 0xb4, 0xcc, 0x22, 0x89, 0x83, 0xac, 0x8e, 0x6e, 0xba, 0x0d,
	0xcb, 0xb2, 0x1d, 0x9d, 0xa0, 0x45, 0x36, 0x0d, 0xa1, 0x5e, 0xdd, 0xd7, 0x59, 0x91, 0xb4, 0x6b,
	0xa1, 0xa5, 0xad, 0x7f, 0xcc, 0x19, 0x2e, 0x1b, 0xe5, 0x75, 0xa8, 0x69, 0x0d, 0x57, 0x77, 0xed,
	0x0f, 0xdb, 0xae, 0xfe, 0x11, 0xfa, 0x9f, 0xec, 0xbf, 0x82, 0x9c, 0x92, 0x9e, 0x9b, 0x52, 0x06,
	0xb1, 0xbb, 0xcd, 0xa6, 0xce, 0xdf, 0xd0, 0x60, 0x58, 0xe5, 0x10, 0xd3, 0x72, 0x5c, 0xf1, 0x84,
	0xb7, 0x28, 0x35, 0xeb, 0x6e, 0xd3, 0x32, 0x6d, 0x87, 0xa8, 0x86, 0xe9, 0xa0, 0xd2, 0x04, 0xe1,
	0xae, 0xd5, 0x35, 0x35, 0xb4, 0x30, 0x82, 0xe9, 0x1f, 0x35, 0xf5, 0x0e, 0x7f, 0xff, 0x52, 0x1d,
	0xc1, 0x1a, 0xaa, 0xe6, 0x76, 0x54, 0xa2, 0xee, 0xa3, 0x1a, 0x5b, 0x7e, 0x0e, 0xe3, 0x3b, 0xce,
	0xb0, 0x5d, 0xf1, 0x1c, 0x06, 0x2d, 0x6f, 0xfd, 0x98, 0x4d, 0x67, 0xe2, 0x95, 0x10, 0x7e, 0x09,
	0xe6, 0xbe, 0x13, 0x42, 0x2f, 0x88, 0x67, 0xc0, 0x53, 0x58, 0xd3, 0x22, 0xfb, 0xbc, 0x5f, 0x7c,
	0x0d, 0x2e, 0x9f, 0x41, 0x3a, 0xfa, 0x7e, 0xa7, 0xad, 0x3a, 0x6c, 0x6b, 0x5e, 0x87, 0xab, 0x67,
	0xd0, 0x0d, 0xd5, 0x36, 0x9a, 0xd9, 0x8a, 0xbd, 0x02, 0xd7, 0xcf, 0x10, 0x18, 0xa6, 0x79, 0x47,
	0xd7, 0x3b, 0x3a, 0x91, 0x0b, 0xb8, 0x15, 0x8b, 0x47, 0x6b, 0xd9, 0x36, 0x15, 0xca, 0xb3, 0xf8,
	0xa8, 0xc1, 0x92, 0x6a, 0x64, 0x61, 0xb1, 0x0a, 0xa0, 0x11, 0x75, 0xd7, 0xc9, 0x96, 0x7e, 0x0d,
	0x6a, 0x1d, 0xa2, 0x37, 0x2d, 0x33, 0xb7, 0xf0, 0x22, 0xac, 0x5d, 0x11, 0xd7, 0x1c, 0xbc, 0x88,
	0x11, 0xd4, 0xf6, 0x0c, 0x4d, 0xd3, 0x25, 0xdd, 0x2f, 0x96, 0xb6, 0xfe, 0xbd, 0x0a, 0xd5, 0x51,
	0x51, 0xc8, 0x42, 0x39, 0x2b, 0x0b, 0xd1, 0x0b, 0xf8, 0x1a, 0x5c, 0x12, 0xa3, 0x3d, 0x5d, 0x25,
	0xce, 0x9e, 0xed, 0x58, 0xa6, 0xee, 0x36, 0xf4, 0x96, 0x61, 0xa2, 0x9f, 0x7e, 0xb6, 0x83, 0x37,
	0xe1, 0x8a, 0x40, 0xb7, 0xda, 0x56, 0x43, 0x6d, 0x67, 0xc5, 0xb6, 0x6b, 0x98, 0x9d, 0xae, 0x83,
	0x7e, 0xf6, 0xd9, 0x0e, 0xbe, 0x02, 0x1b, 0x13, 0x14, 0xa6, 0xe5, 0x6a, 0xaa, 0xa3, 0xa2, 0x9f,
	0x7f, 0xb6, 0x83, 0x5f, 0x87, 0xcd, 0x29, 0x9c, 0xe3, 0xde, 0xd5, 0x1d, 0xd7, 0xd8, 0xef, 0xb4,
	0xf5, 0x7d, 0xdd, 0x74, 0x74, 0x0d, 0xfd, 0xf5, 0x0c, 0x2d, 0x4c, 0x80, 0xbb, 0x6f, 0x69, 0xc6,
	0xae, 0xa1, 0x6b, 0xe8, 0x6f, 0x3e, 0xdb, 0xc1, 0xaf, 0xc2, 0xcb, 0x53, 0x76, 0x38, 0x3a, 0x31,
	0x19, 0x69, 0xc3, 0xe5, 0x08, 0xf4, 0xb7, 0x9f, 0xed, 0xe0, 0x1b, 0x70, 0x75, 0x52, 0xce, 0x64,
	0xc0, 0xfc, 0xdd, 0x67, 0x3b, 0xf8, 0x15, 0xb8, 0x36, 0x41, 0xb2, 0xab, 0xab, 0x4e, 0x97, 0xe8,
	0xae, 0x66, 0xd8, 0x6a, 0xa3, 0xad, 0x6b, 0xe8, 0xef, 0x3f, 0xdb, 0xc1, 0x5b, 0xf0, 0xaa, 0x20,
	0xca, 0x0e, 0x06, 0xd7, 0x30, 0x9b, 0x16, 0x21, 0x7a, 0xd3, 0x71, 0xcd, 0xee, 0x3e, 0xcf, 0xc7,
	0x3a, 0xb1, 0xd1, 0x5f, 0x7e, 0x27, 0x37, 0xc7, 0x11, 0x2d, 0xf3, 0x00, 0x8f, 0x83, 0x8e, 0xde,
	0x14, 0x33, 0xf8, 0xab, 0xef, 0xec, 0xe0, 0x9b, 0xa0, 0x4c, 0xd1, 0xed, 0x77, 0x6d, 0xc7, 0x6d,
	0xe8, 0xae, 0xad, 0x93, 0x03, 0x9d, 0xb8, 0x96, 0xd9, 0xbe, 0x8b, 0x7e, 0xf2, 0x9d, 0x1d, 0xfc,
	0x16, 0xbc, 0x26, 0x28, 0x27, 0x56, 0xd7, 0xd6, 0x55, 0xdb, 0x32, 0x99, 0x21, 0x24, 0x73, 0xdd,
	0x0f, 0x9f, 0xe4, 0xe6, 0x33, 0x41, 0xcc, 0x1c, 0xad, 0x36, 0x1d, 0xe3, 0x40, 0x47, 0x7f, 0xfc,
	0x64, 0x07, 0x2b, 0xf0, 0xd2, 0x4c, 0x22, 0xd7, 0x31, 0x9a, 0x77, 0x74, 0x07, 0xfd, 0xe8, 0xc9,
	0x0e, 0x7e, 0x0d, 0xae, 0xcf, 0xa0, 0x21, 0xba, 0x63, 0x10, 0xdd, 0xdd, 0x35, 0x88, 0xed, 0xa0,
	0x3f, 0x79, 0xb2, 0x83, 0xdf, 0x80, 0x1b, 0x73, 0xf4, 0x19, 0xa6, 0x6b, 0xeb, 0xfc, 0x81, 0x3b,
	0xfa, 0xd3, 0x27, 0x3b, 0xf8, 0x7d, 0xb8, 0xf5, 0x5c, 0x42, 0xb7, 0xd1, 0x75, 0xdc, 0xa6, 0xd5,
	0x6d, 0x6b, 0x6e, 0x43, 0x47, 0x7f, 0xf6, 0x64, 0x07, 0xbf, 0x09, 0xaf, 0xcc, 0xe0, 0x3a, 0xb3,
	0x48, 0x7f, 0xfe, 0x64, 0x07, 0x7f, 0x09, 0x5e, 0x9f, 0x41, 0x2a, 0x66, 0xc4, 0xf5, 0x10, 0xfd,
	0xc3, 0xae, 0x41, 0x74, 0x0d, 0xfd, 0xc5, 0x5c, 0x73, 0xc4, 0x81, 0xd8, 0xbe, 0x9b, 0x7b, 0xa4,
	0x3f, 0xd2, 0xf1, 0xe3, 0x27, 0xb9, 0x40, 0xc8, 0x1f, 0xf6, 0xfc, 0x6f, 0x96, 0x54, 0xf8, 0x36,
	0x47, 0xbf, 0xfb, 0x34, 0xb7, 0x6c, 0x67, 0x69, 0xb5, 0x86, 0x4b, 0x74, 0x55, 0x93, 0x91, 0xfa,
	0x7b, 0x4f, 0x73, 0x6e, 0x3c, 0x4b, 0x7c, 0x60, 0x58, 0x6d, 0xf1, 0x1a, 0xf0, 0xf7, 0x9f, 0xee,
	0xe0, 0xff, 0x07, 0x6f, 0xcc, 0x20, 0xe4, 0x03, 0xfe, 0xe2, 0xd0, 0xd0, 0x46, 0xe9, 0xed, 0xbb,
	0x4f, 0x77, 0xf0, 0xdb, 0xf0, 0xe6, 0x0c, 0x72, 0xf1, 0xec, 0x91, 0x91, 0xb7, 0xba, 0x39, 0x86,
	0xa7, 0x73, 0x19, 0xc6, 0xf2, 0x27, 0x18, 0xfe, 0xe0, 0xe9, 0xb4, 0x4b, 0xc6, 0x6f, 0x17, 0xd9,
	0x24, 0x0f, 0x89, 0xe1, 0xe8, 0x72, 0x96, 0xdf, 0x7b, 0x9a, 0x8b, 0xf9, 0x69, 0xda, 0x43, 0x62,
	0x99, 0x2d, 0x77, 0x97, 0x25, 0x3f, 0x07, 0x7d, 0xff, 0x69, 0x6e, 0x31, 0x27, 0xcc, 0x98, 0xb5,
	0x43, 0xfe, 0xf0, 0x69, 0x2e, 0xe8, 0xd9, 0x46, 0xe4, 0x27, 0x9c, 0xe0, 0x1b, 0xa5, 0x8c, 0xff,
	0xfc, 0xa3, 0x9d, 0xad, 0xdb, 0x00, 0xe3, 0x7b, 0x05, 0xcb, 0xa6, 0xbb, 0xf9, 0x8a, 0xa8, 0x06,
	0x4b, 0xbb, 0x8e, 0x38, 0xdd, 0x0b, 0x2c, 0xb5, 0xee, 0x3a, 0xb9, 0x2a, 0x88, 0x9d, 0x93, 0x95,
	0x51, 0x35, 0xb5, 0x0a, 0x30, 0x51, 0x4c, 0x2d, 0x43, 0x65, 0x54, 0x12, 0xf1, 0x53, 0x52, 0x8c,
	0x44, 0x2c, 0xa1, 0x22, 0x93, 0x96, 0xaf, 0x91, 0x16, 0x24, 0x83, 0x28, 0xa9, 0xca, 0x4c, 0xb3,
	0x2c, 0x6d, 0xd0, 0x22, 0xff, 0xca, 0x9d, 0x15, 0x20, 0x68, 0x49, 0x0e, 0x45, 0xe9, 0x81, 0x2a,
	0xec, 0x30, 0x9c, 0xac, 0x5d, 0xc4, 0x7b, 0x53, 0x06, 0x6b, 0xf0, 0x42, 0x47, 0x16, 0x39, 0xeb,
	0xb0, 0x22, 0x60, 0xe3, 0xd2, 0x46, 0x68, 0xe1, 0xf5, 0xca, 0x85, 0xad, 0x7f, 0x2e, 0xc0, 0x05,
	0x42, 0x7b, 0xf1, 0x30, 0x48, 0xd5, 0x5d, 0x7e, 0x67, 0xb0, 0x53, 0x2f, 0xa5, 0xec, 0xa4, 0x26,
	0xea, 0xae, 0x4b, 0xf4, 0x26, 0xe9, 0x1a, 0x0e, 0x0b, 0x7b, 0x54, 0x60, 0xc2, 0x72, 0x40, 0x7e,
	0xa2, 0x4b, 0x50, 0x8b, 0xa8, 0x5a, 0x57, 0x15, 0x5f, 0xc8, 0x5f, 0x84, 0x75, 0x06, 0x3a, 0x50,
	0xdb, 0xba, 0x66, 0x34, 0xf9, 0x54, 0x4d, 0xc4, 0xff, 0xf1, 0x0b, 0x03, 0x8b, 0xed, 0x37, 0x92,
	0x2a, 0xd7, 0x9b, 0xe8, 0x2d, 0x16, 0xd6, 0xbf, 0x58, 0xc2, 0x9b, 0x70, 0x75, 0x16, 0x99, 0x63,
	0x59, 0xae, 0xd5, 0xd6, 0xd0, 0x2f, 0x97, 0xf0, 0xab, 0x70, 0x7d, 0x42, 0xa5, 0x7b, 0x68, 0x38,
	0x7b, 0x56, 0x77, 0x44, 0xaf, 0x13, 0xf4, 0xaf, 0x4b, 0x5b, 0x3f, 0x2a, 0xc0, 0x8b, 0x84, 0xa6,
	0xc3, 0x38, 0x0c, 0xc2, 0x23, 0xd9, 0x31, 0x11, 0xed, 0x9f, 0x35, 0xa8, 0x91, 0x8e, 0x9d, 0x5b,
	0xb5, 0x97, 0xa0, 0xce, 0x00, 0x42, 0xa5, 0xd3, 0x25, 0xa6, 0x61, 0xb6, 0x64, 0x22, 0x17, 0xdf,
	0x8a, 0x19, 0x56, 0xe6, 0x4c, 0xfe, 0x16, 0x98, 0x8d, 0x9b, 0x16, 0x3b, 0xa9, 0x1c, 0x1d, 0x95,
	0xd8, 0xf1, 0x3f, 0xa6, 0x70, 0xad, 0x0e, 0xb3, 0x89, 0xd9, 0xf3, 0x61, 0x97, 0x97, 0xb0, 0x0b,
	0x53, 0x04, 0xcc, 0x5c, 0x77, 0x5f, 0x35, 0xef, 0xba, 0x6d, 0xcb, 0xb6, 0x75, 0x1b, 0x95, 0xb7,
	0x7e, 0x50, 0x80, 0x95, 0x89, 0xbb, 0x34, 0xbb, 0x6c, 0xcc, 0xbe, 0x4d, 0xa3, 0x17, 0x58, 0xd1,
	0x33, 0x85, 0x33, 0x2d, 0x53, 0x17, 0xff, 0x42, 0x6a, 0x0a, 0x71, 0x68, 0x98, 0x7c, 0x13, 0xa0,
	0x22, 0x7e, 0x19, 0xae, 0x4c, 0x21, 0x77, 0x0d, 0xd3, 0xb0, 0xf7, 0x04, 0xbe, 0x84, 0x6f, 0xc0,
	0xb5, 0xd9, 0xf8, 0x2c, 0x75, 0x2f, 0x6c, 0xfd, 0xac, 0x04, 0x30, 0xee, 0x3f, 0xb0, 0x78, 0x93,
	0x1c, 0x13, 0xd7, 0x09, 0x09, 0x93, 0x36, 0x5d, 0x83, 0xcb, 0x12, 0xa0, 0x6a, 0x07, 0xba, 0xc9,
	0x93, 0x75, 0x87, 0x58, 0x2d, 0xc2, 0xaa, 0xc4, 0x22, 0xbb, 0xb8, 0x64, 0x68, 0xd2, 0x54, 0x4d,
	0xdd, 0xd5, 0xba, 0xb6, 0x23, 0x83, 0x48, 0xc0, 0x45, 0x21, 0xc5, 0xef, 0x59, 0x0b, 0xec, 0xd6,
	0x94, 0x81, 0x45, 0x39, 0xeb, 0x76, 0xd4, 0xe6, 0x1d, 0x1b, 0x95, 0x59, 0x51, 0x2c, 0x31, 0xe3,
	0xe7, 0xd6, 0x8b, 0x39, 0x13, 0x65, 0x4a, 0x44, 0x4b, 0x39, 0xd1, 0x59, 0x9a, 0xdc, 0xfe, 0x08,
	0x55, 0x78, 0xc4, 0xe7, 0xc0, 0xec, 0xea, 0x56, 0xc5, 0xaf, 0x83, 0xa2, 0xe9, 0xac, 0xb6, 0xe2,
	0x81, 0x96, 0xe1, 0x59, 0xed, 0xc5, 0xa3, 0xb2, 0x65, 0xb5, 0x35, 0xdd, 0x44, 0x90, 0x9b, 0x36,
	0x03, 0xa1, 0x5a, 0xce, 0x1c, 0x06, 0x10, 0xcf, 0xbd, 0x97, 0x73, 0xe6, 0xef, 0x5a, 0xa4, 0xa5,
	0xcb, 0x23, 0xc9, 0x46, 0x2b, 0x39, 0x01, 0x9c, 0x74, 0x35, 0xb7, 0x5c, 0xfa, 0x47, 0xb2, 0xa0,
	0xe1, 0xd9, 0x6c, 0xdf, 0xea, 0x9a, 0x0e, 0x5a, 0xe3, 0x61, 0x28, 0xcd, 0xd9, 0x63, 0x09, 0x03,
	0xe1, 0x57, 0x61, 0x53, 0x42, 0xa6, 0xa3, 0x78, 0x1c, 0xac, 0xeb, 0x5b, 0x3a, 0x54, 0xb2, 0xce,
	0x35, 0xcb, 0x29, 0xa3, 0xde, 0x35, 0x7a, 0x81, 0xdb, 0xcc, 0x86, 0xcd, 0x3d, 0xcb, 0xb2, 0x75,
	0x61, 0x48, 0x61, 0x1a, 0x2a, 0x4a, 0x50, 0x76, 0xa7, 0x3d, 0xd3, 0x7a, 0xe5, 0x65, 0xe7, 0x74,
	0xf3, 0x95, 0x17, 0x92, 0x97, 0xc7, 0x60, 0x79, 0x0a, 0x8f, 0x4e, 0x60, 0xae, 0x60, 0x8c, 0x1e,
	0x6d, 0xb3, 0x3a, 0x6c, 0xe4, 0x65, 0x49, 0xdf, 0xdb, 0xa8, 0xf4, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x80, 0xa6, 0x50, 0x1c, 0x46, 0x39, 0x00, 0x00,
}
